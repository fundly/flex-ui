<?xml version="1.0" encoding="utf-8"?>
<common:LabeledContainer
	xmlns:mx="http://www.adobe.com/2006/mxml" 
	xmlns:common="com.enilsson.elephantadmin.views.common.*" 
	xmlns:checks="com.enilsson.elephantadmin.views.modules.checks.*"
	verticalScrollPolicy="off" horizontalScrollPolicy="off"
	label="{_model.viewStateNames.getItemAt(moduleID)}">

	<mx:HBox horizontalGap="10" width="100%" height="100%">
		
		<checks:ChecksGrid id="checksGrid" height="100%" width="100%" />
						
		<checks:Checks_Form id="checksForm"
			upsertRecord="validateRecord(event)"
			deleteRecord="deleteRecord(event)"
			width="260" 
			height="100%" />
			
	</mx:HBox>

	<mx:Script>
		<![CDATA[
			import com.enilsson.elephantadmin.vo.RecordsVO;
			import com.enilsson.elephantadmin.vo.SidVO;
			import com.enilsson.elephantadmin.models.EAModelLocator;
			import com.enilsson.elephantadmin.vo.RecordVO;
			import mx.events.CloseEvent;
			import com.enilsson.elephantadmin.events.modules.ChecksEvent;
			import mx.controls.Alert;
			import org.osflash.thunderbolt.Logger;			
			
			[Bindable] private var _model:EAModelLocator = EAModelLocator.getInstance();

			override protected function init():void
			{
				super.init();

				// grab any SID data if present
				var sid:SidVO = _model.sid;
			
				if(sid)
				{
					if(sid.table_name == 'checks')
					{
						_model.checks.sidRecord = true;
						_model.sid = null;
						
						// load the check and pledge information for the selected check
						new ChecksEvent(
							ChecksEvent.RECORD, 
							{
								recordVO : new RecordVO(
									'checks(pledge_id<ALL>(tr_users_id<fname:lname:_fid>))',
									sid.data.id
								)
							}).dispatch();
					}
				}
				else
				{
					checksGrid.getChecks();
				}

				// reset the data changed flag
				_model.dataChanged = false;
			}
			
			private function validateRecord(event:Event):void
			{
				new ChecksEvent( 
					ChecksEvent.VALIDATE, {
						'recordVO' :  new RecordVO (
							"checks",
							0,
							checksForm.formVariables
						)
					}
				).dispatch();
			}

			/**
			 * Run the delete event
			 */
			private function deleteRecord(event:Event):void
			{
				if (checksGrid.clickedItem == null) {
					return;
				}
				if(_model.debug) Logger.info('Deleting Checks', checksGrid.clickedItem.id);

				var confirmBox:Alert = Alert.show('Are you sure you want to delete this item?', 'Delete', Alert.YES | Alert.NO,this,function(eventObj:CloseEvent):void {
					if (eventObj.detail==Alert.YES) 
					{
						new ChecksEvent( 
							ChecksEvent.DELETE, {
								'recordVO' :  new RecordVO (
									"checks",
									checksGrid.clickedItem.id
								)
							}
						).dispatch();
					}
				},null,Alert.NO); 
				confirmBox.width = 330;
			}
			
		]]>
	</mx:Script>

</common:LabeledContainer>
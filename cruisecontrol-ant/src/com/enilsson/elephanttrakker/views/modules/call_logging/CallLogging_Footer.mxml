<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas 
	xmlns:mx="http://www.adobe.com/2006/mxml" 
	width="40"
	show="init()"
	horizontalScrollPolicy="off" verticalScrollPolicy="off"
	xmlns:common="com.enilsson.elephanttrakker.views.common.*">

	<mx:LinkButton id="saveBT"
		styleName="saveBT"
		label="save" 
		enabled="{_model.call_logging.formAction == 'add'}"
		verticalCenter="0" left="95"
		toolTip="{_model.call_logging.formAction == 'add' ? 'Save this pledge to finish at a later date' : 'You can not save an existing pledge!'}" 
		tabIndex="2"
		click="saveForm(event)"
		/>
	
	<mx:HBox id="buttons" horizontalCenter="0" top="6">
		<common:ValidFormIndicator status="{_isFormValid}" 
			showToolTips="false"
			rollOver="_model.call_logging.showErrorList = true"
			rollOut="_model.call_logging.showErrorList = false"		
			/>
		<mx:Button id="submit" name="submit" styleName="submitBtn" 
			label="{_model.call_logging.formAction == 'add' ? 'complete':'update'} this pledge"
			click="submitForm(event)" 
			keyUp="submitBtnKeyHandler(event)"
			enabled="{_isFormValid}"
			/>
	</mx:HBox>
	
	<mx:LinkButton id="clearBT" styleName="clearBT"
		label="clear" 
		verticalCenter="0" right="85"
		toolTip="Clear the form"
		click="_model.call_logging.reset()" 
		tabIndex="3" />
	
	<mx:Button id="backMove" styleName="backMove" 
		left="5" verticalCenter="0"  
		useHandCursor="true" buttonMode="true"
		toolTip="Return to previous section" 
		tabIndex="4"
		enabled="{_model.call_logging.vindex != 0}" 
		click="_model.call_logging.vindex--"  />
	
	<mx:Button id="forwardMove" styleName="forwardMove" 
		verticalCenter="0" right="5" 
		enabled="{_model.call_logging.vindex &lt; (_model.call_logging.numTabs - 1)}"
		toolTip="Progress to next section" 
		tabIndex="5" 
		useHandCursor="true" buttonMode="true" 
		click="_model.call_logging.vindex++" />

	<!--<mx:Button label="show vo"
		click="Logger.info('Pledge VO', ObjectUtil.toString(_model.call_logging.vo))"
		/>-->

	
	<mx:Metadata>
		[Event(name="completeCall", type="flash.events.Event")]
	</mx:Metadata>
	
	<mx:Script>
		<![CDATA[
			import mx.managers.PopUpManager;
			import com.enilsson.elephanttrakker.views.modules.call_logging.popups.CallLogging_ErrorList;
			import mx.controls.Alert;
			import com.enilsson.elephanttrakker.vo.SearchVO;
			import com.enilsson.elephanttrakker.events.modules.call_logging.PledgeWorkspaceEvent;
			import mx.collections.ArrayCollection;
			import mx.controls.ComboBox;
			import com.enilsson.utils.eNilssonUtils;
			import mx.utils.ObjectUtil;
			import mx.managers.ToolTipManager;
			import com.enilsson.elephanttrakker.events.modules.call_logging.CallLoggingRecordEvent;
			import com.enilsson.elephanttrakker.vo.RecordVO;
			import com.enilsson.elephanttrakker.models.ETModelLocator;
			
			import org.osflash.thunderbolt.Logger;
			
			[Bindable] private var _model:ETModelLocator = ETModelLocator.getInstance();
			[Bindable] private var _isFormValid:Boolean = false;
			
			private function init():void
			{
				ToolTipManager.enabled = true;	
			}
			
			public function set isFormValid(value:Boolean):void
			{
				_isFormValid = value;
			}
			
			/**
			 * Keyboard handler for the submit btn
			 */
			private function submitBtnKeyHandler(e:KeyboardEvent):void
			{
				if(e.keyCode == Keyboard.ENTER)
					submitForm();
			}
			
			/**
			 * Routine to save the form before completing the transaction
			 */
			private function saveForm(e:MouseEvent):void 
			{
				// if you are editing an exist pledge you can't save it
				if (_model.call_logging.formAction == 'edit') return;
				
				// create an object for the variables to send to the save table				
				var fv:Object = new Object();
				
				// check if it is editing a saved data
				if (_model.call_logging.savedID > 0) 
					fv['id'] = _model.call_logging.savedID;

				// remove any credit card data for the save
				_model.call_logging.vo.transactionData = null;
				_model.call_logging.vo.transaction = null;
				
				// create a data object to save
				var dataObj:Object = new Object();
				dataObj['vo'] = _model.call_logging.vo;
				
				// added the contact owner to the information
				if(_model.call_logging.initialContactData)
				{
					if(_model.call_logging.initialContactData.hasOwnProperty('created_by_id'))
						dataObj['contactOwner'] = _model.call_logging.initialContactData.created_by_id;
					else
						dataObj['contactOwner'] = _model.session.user_id;
				}
				else
					dataObj['contactOwner'] = _model.session.user_id;

				// add which table and the serialized data
				fv['table'] = 'pledges';
				fv['data'] = eNilssonUtils.serialize(dataObj);
				
				// dispatch the event to save this data		
 				new PledgeWorkspaceEvent( PledgeWorkspaceEvent.SAVE, fv ).dispatch();
			}
			
			/**
			 * Submit the form, looking for dups if needed
			 */
			private function submitForm(e:MouseEvent = null):void
			{
 				if(_model.call_logging.formAction == 'edit')
					new PledgeWorkspaceEvent ( PledgeWorkspaceEvent.DO_TRANSACTION ).dispatch();
				else
					checkContactDups();
			}
			
			/**
			 * Check the contact details for duplicates if the contact details are added new
			 */
			private function checkContactDups():void
			{
				checkPledgeDups();
				
				/* if(_model.call_logging.contactID != 0) 
					checkPledgeDups();
				else
					new PledgeWorkspaceEvent ( PledgeWorkspaceEvent.DUP_SEARCH, { 'table' : 'contacts' } ).dispatch(); */
			}
			
			/**
			 * Check the pledges details for duplicates
			 */
			private function checkPledgeDups():void
			{
				if(_model.call_logging.pledgeID != 0) 
					new PledgeWorkspaceEvent ( PledgeWorkspaceEvent.DO_TRANSACTION ).dispatch();
				else
					new PledgeWorkspaceEvent ( PledgeWorkspaceEvent.DUP_SEARCH, { 'table' : 'pledges' } ).dispatch();
			}	
			
		]]>
	</mx:Script>
		
</mx:Canvas> 	
<?xml version="1.0" encoding="utf-8"?>
<business:ServiceLocator
	xmlns:mx="http://www.adobe.com/2006/mxml"
	xmlns:business="com.adobe.cairngorm.business.*">

	<mx:Script>
		<![CDATA[
			import com.enilsson.elephantadmin.vo.ErrorVO;
			import com.enilsson.elephantadmin.models.Icons;
			import mx.events.CloseEvent;
			import mx.utils.ObjectUtil;
			import org.osflash.thunderbolt.Logger;
			import mx.controls.Alert;
			import mx.rpc.events.FaultEvent;
			import com.enilsson.elephantadmin.models.EAModelLocator;
			
			[Bindable] private var _model:EAModelLocator = EAModelLocator.getInstance();
			private var _alert : Alert;
			
			private function handleFault( event : FaultEvent ) : void 
			{
				if(_model.debug) Logger.info('Global Fault Handler', _model.session == null, ObjectUtil.toString(event.fault));
				
				switch ( event.fault.faultCode )
				{
		 			case 'AMFPHP_AUTHENTICATE_ERROR' :
		 				
		 				if(_model.session)
							_model.reset();
						
						if(event.fault.faultString.indexOf('You do not have permission to login to the admin.') == 0)
						{
							// if this is a login then show the login error box
							if(_model.isLoggingIn)
							{
								if(_model.debug) Logger.info('User does NOT have sufficient rights');
							
								_model.login.loginProcessing = false;
								_model.login.loginErrorMessage = 'You do not have sufficient permission to proceed!';
								_model.login.loginFormState = 'ClearPassword';
								_model.login.loginErrorVisible = true;
								_model.login.loginErrorStyle = 'errorBox';
							} 
							// if it is page refresh then show the Alert box
							else if(!_alert)
							{
								_alert = Alert.show(	
									'You do not have sufficient permission to proceed with the ' + _model.appName + ' Admin Panel!',
									'Insufficient system priveledges', 
									0, 
									null,
									handleClose,
									Icons.ALERT
								);
							}
						}						
						else if(!_alert)
						{
							_alert = Alert.show(	
								'Your ' + _model.appName + ' session has expired, please login to continue!',
								'Session timeout', 
								0, 
								null,
								handleClose,
								Icons.ALERT
							);
						}
					break;
					case 'AMFPHP_INEXISTANT_METHOD' :
						if(!_alert)
						{
							_alert = Alert.show(	
								'There has been an internal error with ' + _model.appName + ', please contact support!',
								'Internal Error', 
								0, 
								null,
								handleClose,
								Icons.ALERT
							);
						}
					
					break;
					case 'Client.Error.MessageSend' :
					case 'Client.Error.DeliveryInDoubt' :
					case 'Channel.Call.Failed':
					
						var title : String;
						var message : String;
						var reset : Boolean;
					
						if( event.fault.faultDetail.search("NetConnection.Call.BadVersion") != -1 || 
							event.fault.faultDetail.search("Channel disconnected") != -1 ) 
						{
							title = 'Your session has expired';
							message = 'Sorry, it looks like your session has expired. Please log in again.';
							reset = true;
						}
						else if( _model.screenState == EAModelLocator.LOGIN_SCREEN) { 
							return;
						}
						else {
							title = 'Sorry, your request could not be sent';
							message = 'Ooops, it seems like there was a problem sending your last request. Please make sure your internet connection is working correctly and try again.';							
						}
						
						if(!_alert)
						{
							_alert =Alert.show(	
								message,	
								title,
								0, 
								null,
								handleClose,
								Icons.ALERT
							);
							
							if(reset) {
								_model.reset();
							}
						}
						
					break;
					case 'Client.Error.RequestTimeout' :
						if(!_alert)
						{
							_alert =Alert.show(	
								'Unfortunately your request timed out. Please try to submit it again. Sorry for the inconvenience.',
								'Request timeout',
								0,
								null,
								handleClose,
								Icons.ALERT
							);
						}
					break;
				}
			}
			
			private function handleClose( event : CloseEvent ) : void {
				_alert = null;
			}
		]]>
	</mx:Script>

	<mx:RemoteObject id="authentikator" 
		endpoint="{_model.authURL}" 
		destination="amfphp" 
		source="e_auth.e_auth" 
		showBusyCursor="true"
		fault="handleFault(event)">
		<mx:method name="list_instances" />
		<mx:method name="random_gateway" />
	</mx:RemoteObject>

	<mx:RemoteObject id="struktorPayment"
		endpoint="{_model.gatewayURL}" 
		destination="amfphp" 
		source="payments.authorizedotnet" 
		showBusyCursor="true"
		fault="handleFault(event)">
		<mx:method name="bill_card" />
	</mx:RemoteObject>

	<mx:RemoteObject id="struktorAuth"
		endpoint="{_model.gatewayURL}" 
		destination="amfphp" 
		source="struktor.auth" 
		showBusyCursor="true"
		fault="handleFault(event)">
		<mx:method name="get_session_info" />
		<mx:method name="end_session" />
	</mx:RemoteObject>

	<mx:RemoteObject id="struktorSys"
		endpoint="{_model.gatewayURL}" 
		destination="amfphp" 
		source="struktor.sys"
		fault="handleFault(event)">
		<mx:method name="ping" />
	</mx:RemoteObject>

	<mx:RemoteObject id="struktorPluginsDownline"
		endpoint="{_model.gatewayURL}" 
		destination="amfphp" 
		source="plugins.{_model.appInstanceID}.downline" 
		showBusyCursor="true"
		fault="handleFault(event)">
		<mx:method name="get_downline" />
	</mx:RemoteObject>

	<mx:RemoteObject id="struktorPluginsRSS"
		endpoint="{_model.gatewayURL}" 
		destination="amfphp" 
		source="plugins.{_model.appInstanceID}.rssExtractor" 
		showBusyCursor="true"
		fault="handleFault(event)">
		<mx:method name="selective_feed" />
	</mx:RemoteObject>

	<mx:RemoteObject id="struktorPluginsEmail"
		endpoint="{_model.gatewayURL}" 
		destination="amfphp" 
		source="plugins.{_model.appInstanceID}.email"
		showBusyCursor="true"
		fault="handleFault(event)">
		<mx:method name="send_test_email" />
		<mx:method name="send_system_email" />
		<mx:method name="send_user_email" />
		<mx:method name="send_invite" />
		<mx:method name="add_fundraiser" />
	</mx:RemoteObject>

    <mx:RemoteObject id="struktorPluginsContacts"
    	endpoint="{_model.gatewayURL}" 
    	destination="amfphp" 
    	source="plugins.{_model.appInstanceID}.contacts" 
    	showBusyCursor="true"
    	fault="handleFault(event)">
    	<mx:method name="list_contacts" />
    	<mx:method name="search" />
    	<mx:method name="upsert_contact" />
    </mx:RemoteObject>
	
	<mx:RemoteObject id="struktorSelect"
		endpoint="{_model.gatewayURL}" 
		destination="amfphp" 
		source="struktor.select" 
		showBusyCursor="true"
		fault="handleFault(event)">
		<mx:method name="get_related_tree" />
		<mx:method name="record_tree" />
		<mx:method name="get_sid_tree" />
		<mx:method name="get_sid_record" />
	</mx:RemoteObject>

	<mx:RemoteObject id="struktorCounting"
		endpoint="{_model.gatewayURL}" 
		destination="amfphp" 
		source="struktor.counting" 
		showBusyCursor="true"
		fault="handleFault(event)">
		<mx:method name="global_count" />
		<mx:method name="personal_count" />
	</mx:RemoteObject>

	<mx:RemoteObject id="struktorSearch"
		endpoint="{_model.gatewayURL}" 
		destination="amfphp" 
		source="struktor.search" 
		showBusyCursor="true"
		fault="handleFault(event)">
		<mx:method name="similar" />
		<mx:method name="table" />
	</mx:RemoteObject>

	<mx:RemoteObject id="struktorEdit"
		endpoint="{_model.gatewayURL}" 
		destination="amfphp" 
		source="struktor.edit" 
		showBusyCursor="true"
		fault="handleFault(event)">
		<mx:method name="del" />
		<mx:method name="upsert" />
	</mx:RemoteObject>

	<mx:RemoteObject id="struktorLayout"
		endpoint="{_model.gatewayURL}" 
		destination="amfphp" 
		source="struktor.layout" 
		showBusyCursor="true"
		fault="handleFault(event)">
		<mx:method name="fetch_layout" />  	
	</mx:RemoteObject>

	<mx:RemoteObject id="struktorTicket"
		endpoint="{_model.gatewayURL}" 
		destination="amfphp" 
		source="struktor.ticket" 
		showBusyCursor="true"
		fault="handleFault(event)">
		<mx:method name="create" />
	</mx:RemoteObject>

	<mx:RemoteObject id="struktorAudit"
		endpoint="{_model.gatewayURL}" 
		destination="amfphp" 
		source="struktor.audit" 
		showBusyCursor="true"
		fault="handleFault(event)">
		<mx:method name="history" />
		<mx:method name="histogram" />
		<mx:method name="fetch_archive" />
		<mx:method name="fetch_archives" />
		<mx:method name="add" />
		<mx:method name="restore" />
	</mx:RemoteObject>

	<mx:RemoteObject id="struktorS3"
		endpoint="{_model.gatewayURL}"
		destination="amfphp" 
		source="struktor.s3" 
		showBusyCursor="true"
		fault="handleFault(event)">
		<mx:method name="delete_object" />
		<mx:method name="get_bucket" />
		<mx:method name="get_credentials" />
	</mx:RemoteObject>

	<mx:RemoteObject id="authentikatorManagement"
		endpoint="{_model.gatewayURL}"
		destination="amfphp"
		source="authentikator.management"
		showBusyCursor="true"
		fault="handleFault(event)">
		<mx:method name="list_users_groups" />
		<mx:method name="list_groups" />
		<mx:method name="list_profiles" />
		<mx:method name="add_user" />
		<mx:method name="add_user_to_groups" />
		<mx:method name="add_user_to_profile" />
		<mx:method name="delete_user_from_groups" />
		<mx:method name="delete_profile_from_user" />
		<mx:method name="enable_user" />
		<mx:method name="disable_user" />
		<mx:method name="get_online_users" />
		<mx:method name="add_user_superuser" />
		<mx:method name="delete_user_from_superuser" />
		<mx:method name="add_user_poweruser" />
		<mx:method name="delete_user_from_poweruser" />
		<mx:method name="get_user_email" />
	</mx:RemoteObject>

	<mx:RemoteObject id="authentikatorPassword"
		endpoint="{_model.gatewayURL}" 
		destination="amfphp" 
		source="authentikator.password" 
		showBusyCursor="true"
		fault="handleFault(event)">
		<mx:method name="change_email" />
		<mx:method name="change_password" />
		<mx:method name="wheel" />
		<mx:method name="admin_change_email" />
	</mx:RemoteObject>

	<mx:RemoteObject id="struktorPluginsPledges"
		endpoint="{_model.gatewayURL}" 
		destination="amfphp" 
		source="plugins.{_model.appInstanceID}.pledges" 
		requestTimeout="120"
		showBusyCursor="true"
		fault="handleFault(event)">
		<mx:method name="process_pledge" />
	</mx:RemoteObject>

	<mx:RemoteObject id="struktorPluginsChecks"
		endpoint="{_model.gatewayURL}" 
		destination="amfphp" 
		source="plugins.{_model.appInstanceID}.checks" 
		requestTimeout="120"
		showBusyCursor="true"
		fault="handleFault(event)">
		<mx:method name="add_refund" />
		<mx:method name="insert_checks_batches" />
		<mx:method name="list_unfulfilled_checks" />
		<mx:method name="list_batch_checks" />
		<mx:method name="validate_check_entry" />
		<mx:method name="validate_new_check" />
		<mx:method name="fulfill_checks" />
	</mx:RemoteObject>
	
	<mx:RemoteObject id="struktorPluginsBatches"
		endpoint="{_model.gatewayURL}" 
		destination="amfphp" 
		source="plugins.{_model.appInstanceID}.reporting.batch" 
		requestTimeout="120"
		showBusyCursor="true"
		fault="handleFault(event)">
		<mx:method name="export_batch" />
	</mx:RemoteObject>
	
	<mx:RemoteObject id="access"
		endpoint="{_model.gatewayURL}"
		destination="amfphp"
		source="struktor.access"
		showBusyCursor="true"
		fault="handleFault(event)">
		<mx:method name="get_ui_access" />
	</mx:RemoteObject>
	
	<mx:RemoteObject id="struktorPluginsSharedCredit"
		endpoint="{_model.gatewayURL}" 
		destination="amfphp" 
		source="plugins.common.shared_credit" 
		requestTimeout="120"
		showBusyCursor="true"
		fault="handleFault(event)">
		<mx:method name="add_shared_credit" />
		<mx:method name="remove_shared_credit" />
	</mx:RemoteObject>
	
	<mx:HTTPService id="versionService"
		url="{_model.versionXmlUrl}"
		contentType="application/xml"
		resultFormat="e4x"
		showBusyCursor="true" />	

</business:ServiceLocator>
<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" label="Select Fields" width="100%" horizontalScrollPolicy="off"
	creationComplete="init();">

	<mx:Canvas label="Select Data Type" width="100%">
		<mx:List id="dataType" 
			fontSize="16" itemClick="selectDataType(event)"
			width="100%" height="100%" 
			top="20" left="20" right="20"/>
		<mx:Text width="100%" top="20" right="20" left="20">
			<mx:htmlText>
				<![CDATA[Please select the type of data you wish to report on.<br><br>For instance you may be looking for all users with a first name of 'John', in which case you would select <b>Users</b> as your data type.<br><br>Once selected the data type will define which tables you can gather data from.]]>
			</mx:htmlText>
		</mx:Text>
	</mx:Canvas>

	<mx:Text text="Please select a data type" 
		verticalCenter="0" horizontalCenter="0" 
		fontSize="18" fontWeight="bold"
		visible="{dataType.selectedIndex == -1}" />
	<mx:VBox id="fieldList" width="100%" verticalGap="0" 
		top="0" left="0"
		visible="{dataType.selectedIndex &gt; -1}" />
	<mx:Script>
		<![CDATA[
			import mx.controls.LinkButton;
			import mx.containers.HBox;
			import flexlib.containers.FlowBox;
			import mx.controls.CheckBox;
			import mx.collections.ArrayCollection;
			import mx.events.ListEvent;
			import com.enilsson.utils.eNilssonUtils;
			import com.enilsson.elephantadmin.views.modules.custom_reporting.model.FieldsTabModel;
			import org.un.cava.birdeye.ravis.graphLayout.data.Graph;
			import com.enilsson.elephantadmin.views.modules.batch.model.AbstractPM;

			public function init():void
			{
				buildDataType();
				// hide all boxes and uncheck all the links
				for( var j:int=0; j<fieldList.numChildren; j++ )
				{
					var linkBox:* = fieldList.getChildAt(j);
					// record the existing height of the linkbox, then reduce it to zero to hide it
					if(!_presentationModel.tableBoxHts[linkBox.name]){
						_presentationModel.tableBoxHts[linkBox.name] = linkBox.height;
					}
					linkBox.height = 0;
					// loop through each container and its checkboxes
					var cbBox:* = eNilssonUtils.$(linkBox.name.replace('container','cbBox'), linkBox);
					for(var k:int=0; k < cbBox.numChildren; k++)
					{
						var child:Object = cbBox.getChildAt(k);
						// if there is loaded field data look at it
						if(_presentationModel.loadedData)
						{
							if(_presentationModel.loadedData.fields[child.id])
							{
								child.selected = _presentationModel.loadedData.fields[child.id];
								_presentationModel.reportData.fields[child.id] = _presentationModel.loadedData.fields[child.id];
							} 
							else 
							{
								child.selected = false;
							}
						// if not set the child to false and wipe the _rData
						} 
						else 
						{
							child.selected = false;
							_presentationModel.reportData.fields = {};
						}
					}
				}
	
				// loop through the relationships and hid the non-related tables
				for(var i:String in _presentationModel.relationships)
				{
					var rel:Object = _presentationModel.relationships[i];
					// if the datatype matches the table
					if(i == _presentationModel.dataType)
					{
						// show the tables related to the main data type
						for( var l:String in rel)
						{
							if(_presentationModel.tableBoxHts['container_' + rel[l].related_name] > 0)
							{
								var container:Object = eNilssonUtils.$('container_' +  rel[l].related_name, fieldList);
								container.height = _presentationModel.tableBoxHts['container_' + rel[l].related_name];
							}
						}
						// show the table of the data type
						container = eNilssonUtils.$('container_' + i, fieldList)
						container.height = _presentationModel.tableBoxHts[container.name];
					}
				}
			}

			public function buildDataType():void
			{
				_presentationModel.initReportData();
				var layout:Object = _presentationModel.layout;

				// initialise an ArrayCollection as the dataprovider for the Datatype list
				var dataTypeDP:ArrayCollection = new ArrayCollection();
				// sort the layout based on the title of each table
				layout.sortOn('title');
				// loop through the layout and build the field list and add elements to the dataprovider
				for( var i:String in layout){
					// only proceed if the table is listed as public
					if(layout[i].display_type != 'public'){ continue; }
					// create a container for all the elements of each table
					var tableBox:VBox = new VBox();
					tableBox.name = 'container_' + layout[i].table;
					tableBox.percentWidth = 100;
					fieldList.addChild(tableBox);
					// create a box to house the title and check links
					var titleBox:Canvas = new Canvas();
					titleBox.percentWidth = 100;
					tableBox.addChild(titleBox);
					// write the table name as a heading
					var tblHBox:HBox = new HBox();
					tblHBox.percentWidth = 100;
					tblHBox.styleName = 'tblTitle';
					titleBox.addChild(tblHBox);			
					var tblTitle:Text = new Text();
					tblTitle.text = layout[i].title;
					tblHBox.addChild(tblTitle);	
					// create check/uncheck links
					var chkAll:LinkButton = new LinkButton();
					chkAll.label = 'Check All';
					chkAll.setStyle('verticalCenter', 0);
					chkAll.setStyle('right', 110);
					chkAll.setStyle('fontSize', 11);
					chkAll.id = 'chkAll_' + layout[i].table;
//					chkAll.addEventListener(MouseEvent.CLICK, _presentationModel.checkAll);
					titleBox.addChild(chkAll);
					var unchkAll:LinkButton = new LinkButton();
					unchkAll.label = 'Uncheck All';
					unchkAll.setStyle('verticalCenter', 0);
					unchkAll.setStyle('right', 20)
					unchkAll.setStyle('fontSize', 11);
					unchkAll.id = 'unchkAll_' + layout[i].table;
//					unchkAll.addEventListener(MouseEvent.CLICK, _presentationModel.unCheckAll);
					titleBox.addChild(unchkAll);		
					// create a holding box for all the checkboxes
					var cbBox:FlowBox = new FlowBox();
					cbBox.percentWidth = 100;
					cbBox.setStyle('hAlign','left');
					cbBox.setStyle('vAlign', 'top');
					cbBox.setStyle('hGap', 10);
					cbBox.setStyle('vGap', 10);		
					cbBox.minHeight = 20;
					cbBox.name = 'cbBox_' + layout[i].table;
					tableBox.addChild(cbBox);
					// sort the fields based on the label
					layout[i].fields.sortOn('label');
					// loop through the fields and create a checkbox for each one
					var iter:int = 0;
					for( var j:String in layout[i].fields){
						var f:Object = layout[i].fields[j];
						var cb:CheckBox = new CheckBox();
						cb.styleName = 'tblField';
						cb.width = Math.ceil(fieldList.width/3) - 35;
						cb.height = 20;
						cb.id = layout[i].table + '.' + f.fieldname;
						cb.name = layout[i].table + '.' + f.fieldname;			
						cb.label = f.label + ' ( ' + f.fieldname + ' )';
						cbBox.addChild(cb);
						cb.addEventListener(MouseEvent.CLICK, _presentationModel.cbClickHandler);
						iter++;
					}
					// set the height of each flowbox as it ends up very large otherwise
					var numRows:int = Math.ceil(iter/3);
					var labelSize:TextLineMetrics = this.measureText(f.label + ' (' + f.fieldname + ')');
					cbBox.height =  numRows * (cb.height + cbBox.getStyle('vGap'));
					// add data elements to the dataprovider
					dataTypeDP.addItem({ value: layout[i].table, label: layout[i].title });
				}
				// set the data type list dataprovider
				_presentationModel.setDataTypeDataProvider(dataTypeDP);
			}

			public function selectDataType(e:ListEvent):void
			{
				// set the selected value as the datatype
				var _dataType:String = dataType.selectedItem.value;
				_presentationModel.setDataType(_dataType);
				init();
			}

			public function set presentationModel(value:AbstractPM):void
			{
				if(value && value != _presentationModel)
					_presentationModel = FieldsTabModel(value);
			}
			[Bindable] private var _presentationModel:FieldsTabModel;
		]]>
	</mx:Script>
</mx:Canvas>
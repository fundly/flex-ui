<?xml version="1.0" encoding="utf-8"?>
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml"
	xmlns:components="com.enilsson.elephantadmin.views.modules.app_options.view.components.*">

	<mx:Form width="100%" verticalGap="10">
	
		<mx:FormItem label="Description:" width="100%">
			<mx:TextArea id="descriptionInput" 
				text="{_xml.description}" 
				height="80" width="100%"
				change="setXmlValue('description', descriptionInput.text)" />
		</mx:FormItem>
		
		<mx:FormItem label="Statements:" width="100%">
		
			<components:StatementList id="statementList"
				dataProvider="{_statements}"				
				itemEditBeginning="handleItemEditBeginning(event)"
				itemEditEnd="handleItemEditEnd(event)" />
			
			<mx:HBox width="100%" horizontalAlign="center">
				<mx:LinkButton 
					label="add a statement" 
					click="addStatment()" />
				<mx:LinkButton 
					label="remove selected statement" 
					enabled="{statementList.selectedItem != null}" 
					click="removeStatement()"/>	
			</mx:HBox>
			
		</mx:FormItem>
		
		<mx:FormItem label="Confirmation:" width="100%">
			<mx:TextArea id="confirmationInput" 
				text="{_xml.confirmation}" 
				height="100" width="100%"
				change="setXmlValue('confirmation', confirmationInput.text)"/>
			<mx:HBox width="100%" horizontalAlign="center">
				<components:VariableSelector id="variableSelector"
					dataProvider="{this.variables}"
					addVariable="addSelectedVar()" />
			</mx:HBox>		
		</mx:FormItem>

	</mx:Form>
	
	
	<mx:Metadata>
		[Event(name="change", type="flash.events.Event")]
	</mx:Metadata>
	
	
	<mx:Script>
		<![CDATA[
			import mx.core.IUITextField;
			import mx.collections.ICollectionView;
			import mx.core.UIComponent;
			import mx.events.ListEvent;
			import mx.core.mx_internal;
			import mx.collections.XMLListCollection;
			
			use namespace mx_internal;
			
			[Bindable]
			public function get xmlString() : String { 
				return _xml ? _xml.toXMLString() : null; 
			}
			public function set xmlString( value : String ) : void 
			{
				if(value != _xmlString)
				{
					_xmlString = value;
					
					try {
						_xml = new XML(_xmlString);
					} catch( e : Error ) {
						_xmlString = EMPTY_AGREEMENT;
						_xml = new XML(_xmlString);
					}
				
					var list : XMLList = _xml.statements.statement;				
					_statements = new XMLListCollection(_xml.statements.statement);
				}
			}
			private var _xmlString : String;
			
			
			private function addStatment() : void {
				_statements.addItem(new XML(EMPTY_STATEMENT));
				dispatchChange();
			}
			
			private function setXmlValue( childName : String, value : String ) : void
			{
				try {
					_xml.child(childName)[0] = value;	
					dispatchChange();
				}
				catch( e : Error ) {
					trace( e.getStackTrace() ); 
				}
			}
			
			private function handleItemEditEnd( event : ListEvent ) : void
			{
				event.preventDefault();
				event.itemRenderer.removeEventListener( Event.CHANGE, handleStatementChange );
								
				if(_statementChanged)
				{
					var ta : TextArea = event.itemRenderer as TextArea;
					var xml : XML = ta.data as XML;
					
					xml.setChildren(ta.text);
					_statements.itemUpdated( xml );
					_statementChanged = false;
					dispatchChange();					
				}
			}
			
			private function handleItemEditBeginning( event : ListEvent ) : void {
				event.itemRenderer.addEventListener( Event.CHANGE, handleStatementChange );
			}
			
			private function removeStatement() : void
			{
				if(statementList.selectedItem) {
					_statements.removeItemAt(statementList.selectedIndex);
					dispatchChange();
				}
			}
			
			private function handleStatementChange(event:Event) : void
			{
				_statementChanged = true;
				dispatchChange();
			}
			
			
			private function dispatchChange() : void {
				dispatchEvent( new Event( Event.CHANGE ) );
			}
			
			[Bindable] private var _xml : XML;
			[Bindable] private var _statements : XMLListCollection;			
			[Bindable] private var _statementChanged : Boolean;
			[Bindable] private var _agreementChanged : Boolean;
			
			private static const EMPTY_STATEMENT 	: String = "<statement />";
			private static const EMPTY_AGREEMENT : String = 
				 "<workspace_agreement>" + 
					"<description />" +
					"<statements>" +
						EMPTY_STATEMENT +
					"</statements>" +
					"<confirmation />" +
				"</workspace_agreement>";

			/**
			 * Set the allowed variables that can be inserted into the text
			 */
			public function set variables( value:ICollectionView ) : void
			{
				_variables = value;
				_variablesChanged = true;
				invalidateProperties();
			}
			private var _variables : ICollectionView;
			[Bindable] public function get variables() : ICollectionView { return _variables; }
			private var _variablesChanged : Boolean

			private function addSelectedVar() : void
			{
				if(variableSelector && variableSelector.variablesCb.selectedItem)
				{
					var _textField:IUITextField = confirmationInput.getTextField() as IUITextField;
					
					_textField.setFocus();				
					_textField.replaceSelectedText(variableSelector.variablesCb.selectedItem.toString());
					dispatchChange();
				}
			}

			
		]]>
	</mx:Script>
	
</mx:VBox>
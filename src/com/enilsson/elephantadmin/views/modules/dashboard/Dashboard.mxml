<?xml version="1.0" encoding="utf-8"?>
<common:LabeledContainer
	xmlns:mx="http://www.adobe.com/2006/mxml"
	xmlns:overview="com.enilsson.elephantadmin.views.modules.dashboard.*"
	xmlns:common="com.enilsson.elephantadmin.views.common.*"
	xmlns:en="com.enilsson.controls.*"
	verticalScrollPolicy="off" horizontalScrollPolicy="off">
	
	<mx:HDividedBox width="100%" height="100%">
		<mx:Canvas id="latestPledgesContainer" enabled="{!presentationModel.latestPledgesLoading}"
			width="50%" minWidth="310" height="100%"
			horizontalScrollPolicy="off" verticalScrollPolicy="off">
			<overview:DashboardHeader id="latestPledgesHeader" refreshEvent="presentationModel.refresh()"
				top="0" left="0" width="{pledgesDg.width}" height="24" showRefreshButton="true"
				styleName="dashboardHeader" text="latest pledges" />
			<mx:DataGrid id="pledgesDg" 
				top="24" left="0" height="100%" width="100%"
				styleName="dashboardGrid"
				headerStyleName="dashboardGridHeader"
				headerHeight="17"
				rowCount="{presentationModel.itemsPerPage}"
				dataProvider="{presentationModel.latestPledges}">
				<mx:columns>
					<mx:DataGridColumn headerText="Contact"
						headerStyleName="firstDashboardHeaderElement" 
						width="70" 
						labelFunction="contactLabel" 
						sortCompareFunction="contactSort"/>
					<mx:DataGridColumn headerText="State"
						headerStyleName="dashboardHeaderElement"  
						width="30" 
						dataField="state" />
					<mx:DataGridColumn headerText="Fundraiser"
						headerStyleName="dashboardHeaderElement"
						width="92"
						labelFunction="fundraiserLabel"
						sortCompareFunction="fundraiserSort" />
					<mx:DataGridColumn headerText="Amount" 
						headerStyleName="dashboardHeaderElement"
						textAlign="right" 
						width="40" 
						labelFunction="amountLabel" 
						sortCompareFunction="amountSort" />
					<mx:DataGridColumn headerText="Event" 
						headerStyleName="dashboardHeaderElement" 
						width="40" 
						labelFunction="eventLabel" />
					<mx:DataGridColumn headerText="Date"
						headerStyleName="dashboardHeaderElement"
						width="90"
						labelFunction="timeLabel"
						sortCompareFunction="timeSort" />
					<mx:DataGridColumn width="22" sortable="false"
						itemRenderer="{new ClassFactory(PledgeRefundedInspectIcon)}">
					</mx:DataGridColumn>
				</mx:columns>
			</mx:DataGrid>
		</mx:Canvas>
		
		<mx:Canvas width="20%" height="100%" minWidth="200" id="activeUsersContainer" horizontalScrollPolicy="off" verticalScrollPolicy="off"
			enabled="{!presentationModel.activeUsersLoading}">
			<overview:DashboardHeader id="activeUsersHeader"
				top="0" left="0" width="{usersDg.width}" height="24" 
				styleName="dashboardHeader" 
				text="{presentationModel.activeUsers.length} user{presentationModel.activeUsers.length == 1 ? '' : 's'} online" />
			<mx:DataGrid id="usersDg" 
				top="24" left="0" width="100%"
				styleName="dashboardGrid"
				headerStyleName="dashboardGridHeader"
				headerHeight="17"
				rowCount="{presentationModel.itemsPerPage}"
				dataProvider="{presentationModel.activeUsers}">
				<mx:columns>
					<mx:DataGridColumn headerText="User"
						headerStyleName="firstDashboardHeaderElement" 
						width="62" 
						dataField="full_name" />
					<mx:DataGridColumn headerText="FID"
						headerStyleName="dashboardHeaderElement"
						width="50"
						labelFunction="FIDLabel" />
					<mx:DataGridColumn headerText="Logged in"
						headerStyleName="dashboardHeaderElement" 
						width="62" 
						labelFunction="loggedLabel" />
				</mx:columns>
			</mx:DataGrid>
		</mx:Canvas>
		
		<mx:Canvas id="eventReportContainer" height="100%" width="30%" minWidth="390" horizontalScrollPolicy="off" verticalScrollPolicy="off">
			<overview:DashboardHeader id="eventReportHeader"
				top="0" left="0" width="100%" height="24"
				styleName="dashboardHeader" text="event quick report" />
			<overview:EventSubHeader id="eventSubHeader" 
				top="24" left="0" width="100%" height="16" 
				styleName="eventSubHeader" 
				eventName="{presentationModel.eventName}" 
				eventDescription="{presentationModel.eventDescription}" />
			<overview:FundraisingChart id="chart" enabled="{!presentationModel.chartLoading}"
				top="40" styleName="fundraisingChart"
				width="100%" height="200" dataProvider="{presentationModel.chartData}"
				presentationModel="{presentationModel}" />
			<mx:Canvas y="260" height="75" styleName="dashboardInfoBox" clipContent="false" enabled="{!presentationModel.eventLoading}">
				<mx:Image source="{presentationModel.pledgeIcon}" left="-15" top="-15"/>
				<mx:Label x="40" y="10" text="Total Pledged Amount:"/>
				<mx:Label x="220" y="10" styleName="dashboardInfoBoxitem" text="{currencyFormat.format(presentationModel.selectedEvent.pledge_total)}"/>
				<mx:Label x="40" y="27" text="Total Pledges:"/>
				<mx:Label x="220" y="27" styleName="dashboardInfoBoxitem" text="{presentationModel.selectedEvent.p}"/>
				<mx:Label x="40" y="45" text="Total Contributed Amount:"/>
				<mx:Label x="220" y="45" styleName="dashboardInfoBoxitem" text="{currencyFormat.format(presentationModel.selectedEvent.contrib_total)}"/>
			</mx:Canvas>
			<mx:Canvas y="360" height="75" styleName="dashboardInfoBox" clipContent="false" enabled="{!presentationModel.eventLoading}">
				<mx:Image source="{presentationModel.invitationIcon}" left="-15" top="-15"/>
				<mx:Label x="40" y="10" text="Total Invitations:"/>
				<mx:Label x="220" y="10" styleName="dashboardInfoBoxitem" text="{presentationModel.selectedEvent.rsvp_total}"/>
				<mx:Label x="40" y="28" text="Accepted:"/>
				<mx:Label x="40" y="45" text="Declined:"/>
			</mx:Canvas>
			<mx:Canvas y="450" height="30" cornerRadius="10" styleName="dashboardSearchBox">
				<mx:Label x="10" y="6" styleName="dashboardSearchBoxText" text="Select new event to show"/>
				<en:LookupInput id="lookUpInput" x="150" y="3"
					itemRenderer="{new ClassFactory(EventLookupRenderer)}"
					searchDataProvider="{presentationModel.searchedEvents}"
					searchStart="presentationModel.eventSearch(event)"
					selectedDataChanged="selectEvent(event)"
					text="{lookUpInput.selectedData.source_code}"
					/>
			</mx:Canvas>
		</mx:Canvas>
		
	</mx:HDividedBox>
	
	<mx:CurrencyFormatter id="currencyFormat"
		currencySymbol="$"
		decimalSeparatorFrom="."
		decimalSeparatorTo="."
		precision="2"
		thousandsSeparatorFrom=","
		thousandsSeparatorTo=","
		useThousandsSeparator="true"
		/>
	<mx:DateFormatter id="dateFormat" formatString="MM/DD/YY" />
	<mx:DateFormatter id="timeFormat" formatString="LL:NN A" />	


	<mx:Script>
		<![CDATA[
			import com.enilsson.elephantadmin.views.common.PledgeRefundedInspectIcon;
			import com.enilsson.utils.EDateUtil;
			import com.enilsson.elephantadmin.events.main.SidEvent;
			import mx.utils.ObjectUtil;
			import com.enilsson.elephantadmin.views.modules.dashboard.renderers.EventLookupRenderer;
			import com.enilsson.elephantadmin.views.modules.dashboard.model.DashboardModel;
			import com.enilsson.controls.LookupInput;

			override protected function init():void
			{
				super.init();
				presentationModel.init();
			}

			private const ONE_DAY:int = 1000 * 60 * 60 * 24;

			[Bindable] public var presentationModel : DashboardModel;
			
			private function contactLabel(item:Object, column:DataGridColumn):String
			{
				return item.fname + " " + item.lname;
			}
			
			private function contactSort(itemA:Object, itemB:Object):int
			{
				return ObjectUtil.stringCompare(itemA.lname, itemB.lname, true)
			}
			
			private function fundraiserLabel(item:Object, column:DataGridColumn):String
			{
				return item.user_id.fname + " " + item.user_id.lname + " (" +item.user_id._fid + ")";
			}
			
			private function fundraiserSort(itemA:Object, itemB:Object):int
			{
				return ObjectUtil.stringCompare(itemA.user_id.lname, itemB.user_id.lname, true)
			}
			
			private function amountLabel(item:Object, column:DataGridColumn):String
			{
				return currencyFormat.format(item.pledge_amount);
			}

			private function amountSort(itemA:Object, itemB:Object):int
			{
				return ObjectUtil.numericCompare(itemA.pledge_amount, itemB.pledge_amount);
			}

			private function timeLabel(item:Object, column:DataGridColumn):String
			{
				var todayDate:Date = new Date();
				
				// Set todayDate's time to midnight local time
				todayDate.setHours(0,0,0);
				var datetime:Date = EDateUtil.timestampToLocalDate( item.created_on ); 
				
				// If the time is between midnight today and yesterday show 'yesterday' or the date
				if( datetime.getTime() < todayDate.getTime())
				{
					if(todayDate.getTime() - datetime.getTime() < ONE_DAY)
						return "Yesterday " + timeFormat.format(datetime);
					else
						return dateFormat.format(datetime) + " " + timeFormat.format(datetime);
				}
				else // Else show 'today'
					return "Today " + timeFormat.format(datetime);
			}
			
			private function timeSort(itemA:Object, itemB:Object):int
			{
				return ObjectUtil.numericCompare(itemA.created_on, itemB.created_on);
			}

			private function selectEvent(event:Event):void
			{
				presentationModel.selectedEvent = event.currentTarget.selectedData;
			}

			private function eventLabel(item:Object, column:DataGridColumn):String
			{
				return item.event_id.source_code;
			}

			private function FIDLabel(item:Object, column:DataGridColumn):String
			{
				return "FUND" + item.user_id;
			}

			private function loggedLabel(item:Object, column:DataGridColumn):String
			{
				return timeFormat.format( EDateUtil.timestampToLocalDate( item.last_login ) );
			}
		]]>
	</mx:Script>
	
</common:LabeledContainer>
<?xml version="1.0" encoding="utf-8"?>
<common:LabeledContainer
	xmlns:mx="http://www.adobe.com/2006/mxml" 
	xmlns:common="com.enilsson.elephantadmin.views.common.*" 
	xmlns:popups="com.enilsson.elephantadmin.views.modules.paypal_transactions.popups.*"
	xmlns:ns="com.enilsson.elephantadmin.views.modules.paypal_transactions.*"
	label="{_model.viewStateNames.getItemAt(moduleID)}">
	
	<mx:HBox horizontalGap="10" width="100%" height="100%">
		<common:ModuleGrid id="moduleGrid"
			height="100%" width="100%"
			dataProvider="{_model.paypal_transactions.records}"
			searchComboList="{_model.paypal_transactions.searchBoxCombo}"
			listItemClick="listClickHandler()" 
			searchStart="searchStart(event)"
			showIndexBar="false"
			indexSearch="indexSearchStart(event)"
			clearSearch="resetSearch()" 
			newPage="newPageAction(event)"
			showDateFields="true"
			columns="{columns}"
			fromDateChange="fromDateChange(event)"
			toDateChange="toDateChange(event)"
			selectedIndex="{_model.paypal_transactions.selectedIndex}" 
			selectedPage="{_model.paypal_transactions.currPage / _model.itemsPerPage}" 
			itemsPerPage="{_model.itemsPerPage}" 
			itemsTotal="{_model.paypal_transactions.totalRecords}" />
		<ns:PaypalTransactions_Detail id="transactionDetail"
			dataProvider="{_model.paypal_transactions.details}"
			width="350" height="100%"
			showDetails="showSuccessDetails.message = event.currentTarget.response" />
	</mx:HBox>
	
	<popups:ShowTransactionDetails 
		id="showSuccessDetails" 
		title="{transactionDetail.title}"
		type="successPanel" />	

	<mx:CurrencyFormatter id="currencyFormat"
		currencySymbol="$"
		decimalSeparatorFrom="."
		decimalSeparatorTo="."
		precision="2"
		rounding="nearest"
		thousandsSeparatorFrom=","
		thousandsSeparatorTo=","
		useThousandsSeparator="true" />
	<mx:DateFormatter id="dateFormat" formatString="MM/DD/YYYY LL:NNA" />

	<mx:Array id="columns">
		<mx:DataGridColumn headerText="Name" labelFunction="nameLabel" sortCompareFunction="nameSort" width="50"/>
		<mx:DataGridColumn headerText="Transaction ID" dataField="transactionid" width="80"/>
		<mx:DataGridColumn headerText="Amount" labelFunction="amountLabel" sortCompareFunction="numberSort" width="50"/>
		<mx:DataGridColumn headerText="Date" dataField="created_on" labelFunction="date_labelFunc" sortCompareFunction="timeSort" width="100"/>
	</mx:Array>

	<mx:Script>
		<![CDATA[
			import com.enilsson.elephantadmin.vo.SidVO;
			import com.enilsson.elephantadmin.events.modules.PaypalTransactionsEvent;
			import mx.formatters.DateFormatter;
			import mx.utils.ObjectUtil;
			import mx.collections.ArrayCollection;

			import com.enilsson.elephantadmin.models.EAModelLocator;
			import com.enilsson.elephantadmin.vo.RecordsVO;
			import com.enilsson.elephantadmin.vo.RecordVO;
			import com.enilsson.elephantadmin.vo.SearchVO;
			
			import org.osflash.thunderbolt.Logger;
			
			[Bindable] private var _model:EAModelLocator = EAModelLocator.getInstance();

			override protected function init():void
			{
				super.init();

				// get default list
				resetSearch();
				
				// reset the data changed flag
				_model.dataChanged = false;
				
				// grab any SID data if present
				var sid:SidVO = _model.sid
			
				if(sid)
				{
					Logger.info( 'PayPal SID', ObjectUtil.toString( sid.data ) );
					
					if(sid.table_name == 'paypal_transactions')
					{
						_model.paypal_transactions.details = sid.data;
						_model.paypal_transactions.sidRecord = true;
						_model.sid = null;
					}
					else
						_model.paypal_transactions.sidRecord = false;
				}
				else
					_model.paypal_transactions.sidRecord = false;
				
			}
						
			private function searchStart(event:Event):void 
			{
				if(moduleGrid.searchTerm != "")
				{
					moduleGrid.clearSearch.visible = true;

					var searchField:String = moduleGrid.searchOption.data;

					var whereObj:Object;
					if(RecordsVO(_model.paypal_transactions.lastQuery.params.recordsVO).where)
					{
						whereObj = RecordsVO(_model.paypal_transactions.lastQuery.params.recordsVO).where;
						var whereArray:Array = String(whereObj.statement).split(" AND ");
						if( whereArray.indexOf("(1)") == -1)	// if condition (1) not exist add to the where statement
							whereArray.push("(1)");
						whereObj['statement'] = whereArray.join(" AND ");
					} else {
						whereObj = new Object();
						whereObj['statement'] = '(1)';
					}

					whereObj[1] = { 
						'what' : searchField,
						'val' : "%"+moduleGrid.searchTerm+"%",
						'op' : 'LIKE'
					};
	
					new PaypalTransactionsEvent( 
						PaypalTransactionsEvent.PAYPAL_RECORDS, { 
							'recordsVO' : new RecordsVO(
								'paypal_transactions(pledge_id(contact_id))',
								whereObj, 
								'paypal_transactions.created_on DESC', 
								_model.paypal_transactions.currPage, 
								_model.itemsPerPage, 
								'P' 
							) 
						} 
					).dispatch();
				}
			}
			
			private function indexSearchStart(event:Event):void 
			{
				moduleGrid.clearSearch.visible = true;
				var whereObj:Object;
				if(RecordsVO(_model.paypal_transactions.lastQuery.params.recordsVO).where)
				{
					whereObj = RecordsVO(_model.paypal_transactions.lastQuery.params.recordsVO).where;
					var whereArray:Array = String(whereObj.statement).split(" AND ");
					if( whereArray.indexOf("(1)") == -1)	// if condition (1) not exist add to the where statement
						whereArray.push("(1)");
					whereObj['statement'] = whereArray.join(" AND ");
				} 
				else 
				{
					whereObj = new Object();
					whereObj['statement'] = '(1)';
				}

				whereObj[1] = { 
					'what' : 'paypal_transactions.pledge_id',
					'val' : moduleGrid.indexBar.searchLetter+"%",
					'op' : 'LIKE'
					};
				new PaypalTransactionsEvent( 
					PaypalTransactionsEvent.PAYPAL_RECORDS, { 
						'recordsVO' : new RecordsVO( 
							'paypal_transactions(pledge_id(contact_id))',
							whereObj, 
							'paypal_transactions.created_on DESC', 
							_model.paypal_transactions.currPage, 
							_model.itemsPerPage, 
							'P' 
						) 
					} 
				).dispatch();
			}
			
			private function resetSearch():void 
			{
				moduleGrid.clearSearch.visible = false;
				moduleGrid.clearDateRange();
				_model.paypal_transactions.currPage = 0;
				new PaypalTransactionsEvent( 
					PaypalTransactionsEvent.PAYPAL_RECORDS, { 
						'recordsVO' : new RecordsVO( 
							'paypal_transactions(pledge_id(contact_id))',
							null, 
							'paypal_transactions.created_on DESC', 
							_model.paypal_transactions.currPage, 
							_model.itemsPerPage, 
							'P' 
						) 
					} 
				).dispatch();
			}
			
			private function newPageAction(event:Event):void 
			{
				_model.paypal_transactions.currPage = moduleGrid.selectedPage * _model.itemsPerPage;
				switch(_model.paypal_transactions.lastQuery.type){
					case PaypalTransactionsEvent.PAYPAL_RECORDS:
						RecordsVO(_model.paypal_transactions.lastQuery.params.recordsVO).iFrom = _model.paypal_transactions.currPage;
						_model.paypal_transactions.lastQuery.dispatch();
 						break;
				}
			}

			private function fromDateChange(event:Event):void 
			{
				moduleGrid.clearSearch.visible = true;

				switch(_model.paypal_transactions.lastQuery.type)
				{
					case PaypalTransactionsEvent.PAYPAL_RECORDS:
						var whereObj:Object
						// if where object exits, keep (1) which is the "LIKE" statement 
						if(RecordsVO(_model.paypal_transactions.lastQuery.params.recordsVO).where)
						{
							whereObj = RecordsVO(_model.paypal_transactions.lastQuery.params.recordsVO).where
							var whereArray:Array = String(whereObj.statement).split(" AND ");
								if( whereArray.indexOf("(2)") == -1)	// if condition (1) not exist add to the where statement
							whereArray.push("(2)");
							whereObj['statement'] = whereArray.join(" AND ");
						}
						else
						{
							whereObj = new Object();
							whereObj['statement'] = '(2)';
						}

						whereObj[2] = { 
							'what' : 'paypal_transactions.created_on',
							'op' : '>',
							'val' : moduleGrid.fromDate.time / 1000 //start of the date range
						};
						RecordsVO(_model.paypal_transactions.lastQuery.params.recordsVO).where = whereObj;
						_model.paypal_transactions.lastQuery.dispatch();
 						break;
				}
			}

			private function toDateChange(event:Event):void 
			{
				moduleGrid.clearSearch.visible = true;

				switch(_model.paypal_transactions.lastQuery.type){
					case PaypalTransactionsEvent.PAYPAL_RECORDS:
						var whereObj:Object
						// if where object exits, keep (1) which is the "LIKE" statement 
						if(RecordsVO(_model.paypal_transactions.lastQuery.params.recordsVO).where)
						{
							whereObj = RecordsVO(_model.paypal_transactions.lastQuery.params.recordsVO).where
							var whereArray:Array = String(whereObj.statement).split(" AND ");
								if( whereArray.indexOf("(3)") == -1)	// if condition (3) not exist add to the where statement
							whereArray.push("(3)");
							whereObj['statement'] = whereArray.join(" AND ");
						}
						else
						{
							whereObj = new Object();
							whereObj['statement'] = '(3)';
						}

						whereObj[3] = { 
							'what' : 'paypal_transactions.created_on',
							'op' : '<',
							'val' : moduleGrid.toDate.time / 1000 + 24*60*60 // end of the date range
						};
						RecordsVO(_model.paypal_transactions.lastQuery.params.recordsVO).where = whereObj;
						_model.paypal_transactions.lastQuery.dispatch();
 						break;
				}
			}

			private function listClickHandler():void 
			{
				_model.paypal_transactions.details = moduleGrid.clickedItem;
			}

			private function date_labelFunc(item:Object, column:DataGridColumn):String 
			{
				return dateFormat.format( new Date( item[column.dataField] * 1000 ) );
			}

			private function amountLabel(item:Object, column:DataGridColumn):String
			{
				return currencyFormat.format(item.amount);
			}

			private function nameLabel(item:Object, column:DataGridColumn):String
			{
				return item.pledge_id.fname + " " +item.pledge_id.lname;
			}

			private function nameSort(itemA:Object, itemB:Object):int
			{
				return ObjectUtil.stringCompare(itemA.pledge_id.lname, itemB.pledge_id.lname);
			}

			private function numberSort(itemA:Object, itemB:Object):int
			{
				return ObjectUtil.numericCompare(itemA.amount, itemB.amount);
			}

			private function timeSort(itemA:Object, itemB:Object):int
			{
				return ObjectUtil.numericCompare(itemA.created_on, itemB.created_on);
			}

		]]>
	</mx:Script>
</common:LabeledContainer>
<?xml version="1.0" encoding="utf-8"?>
<mx:DataGrid width="100%" height="100%" 
	dragEnabled="true" dropEnabled="true"
	xmlns:mx="http://www.adobe.com/2006/mxml" 
	xmlns:common="com.enilsson.elephantadmin.views.common.*"
	allowMultipleSelection="true">
	
	<mx:columns>
		<mx:DataGridColumn width="22" sortable="false" >
			<mx:itemRenderer>
				<mx:Component>
					<mx:HBox horizontalAlign="center">
						<mx:Button useHandCursor="true" buttonMode="true"
							styleName="deleteRecord"
							click="new BatchListEvent(BatchListEvent.REMOVE_CHECKS_FROM_NEW_BATCH, [ data ]).dispatch()"
							toolTip="Remove this check" />
						<mx:Script>
							<![CDATA[
								import com.enilsson.elephantadmin.events.modules.batch.BatchListEvent;
							]]>
						</mx:Script>
					</mx:HBox>
				</mx:Component>
			</mx:itemRenderer>
		</mx:DataGridColumn>
		<common:SortColumn id="nameCol"
			labelFunction="{fullNameLabelFunction}"
			headerText="Name on Account"
			sortCompareFunction="{fullNameSortCompare}"
			remoteSortField="checks.full_name"/>
		<common:SortColumn id="amountCol"
			labelFunction="{amountLabelFunction}"
			sortCompareFunction="{amountSortCompare}"
			headerText="Check amount"
			textAlign="right"
			remoteSortField="checks.amount"/>
		<common:SortColumn id="contactCol"
			labelFunction="{contactNameLabelFunction}"
			sortCompareFunction="{contactNameSortCompare}"
			headerText="Name of contact"
			remoteSortField="checks__pledge_id.lname"/>
		<common:SortColumn id="pledgeAmountCol"
			labelFunction="{pledgeAmountLabelFunction}"
			sortCompareFunction="{pledgeAmountSortCompare}"
			headerText="Pledge amount"
			textAlign="right"
			remoteSortField="checks__pledge_id.pledge_amount"/>
		<common:SortColumn id="addressCol"
			labelFunction="{addressLabelFunction}"
			sortCompareFunction="{addressSortCompare}"
			headerText="Address"
			remoteSortField="checks__pledge_id.address1"/>
		<common:SortColumn id="cityCol"
			labelFunction="{cityLabelFunction}"
			sortCompareFunction="{citySortCompare}"
			headerText="City"
			remoteSortField="checks__pledge_id.city"/>
		<common:SortColumn id="stateCol"
			labelFunction="{stateLabelFunction}"
			sortCompareFunction="{stateSortCompare}"
			headerText="State"
			remoteSortField="checks__pledge_id.state"/>
		<common:SortColumn id="zipCol"
			labelFunction="{zipLabelFunction}"
			sortCompareFunction="{zipSortCompare}"
			headerText="Zip"
			remoteSortField="checks__pledge_id.zip"/>
		<common:SortColumn id="pledgeDateCol"
			labelFunction="{pledgeDateLabelFunction}"
			sortCompareFunction="{pledgeDateSortCompare}"
			headerText="Pledge Date"
			remoteSortField="checks__pledge_id.pledge_date"/>
	</mx:columns>

	<mx:DateFormatter id="df" formatString="MM/DD/YYYY" />
	<mx:CurrencyFormatter id="cf" currencySymbol="$" precision="2" />
	<mx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.core.FlexSprite;
			import com.enilsson.elephantadmin.events.modules.batch.BatchListEvent;
			import mx.managers.DragManager;
			import mx.core.DragSource;
			import com.enilsson.elephantadmin.views.modules.batch.renderers.CheckWrapper;
			import mx.events.DragEvent;
			import mx.controls.dataGridClasses.DataGridColumn;
			import com.enilsson.utils.EDateUtil;
			import mx.utils.ObjectUtil;
			
			private var errorHighlights : FlexSprite;
			
			override public function set dataProvider(value:Object):void {
				super.dataProvider = value;
				drawErrorHighlights();				
			}
			
			private function drawErrorHighlights() : void {
				
				var items 	: Array = listContent.listItems;							
				var info 	: Array = listContent.rowInfo;
				var actualRow : int = verticalScrollPosition;
				var errorColor : Number = 0xFF0000;
				
				
				for ( var i:int = 0; i < items.length; i++ ) {
					var item : Object = items[i];
					if(item && item.errorString && String(item.errorString).length > 0) {
						
						// add a sprite for the errors if it doesn't exist yet.
						if(!errorHighlights) {
							errorHighlights = new FlexSprite();
							errorHighlights.name = "errorHighlights";
							addChild( errorHighlights );
						}						
						
						drawRowBackground( errorHighlights, i, info[i].y, info[i].height, errorColor, actualRow);
					}
				}
			}

			override protected function dragDropHandler(event:DragEvent):void
			{
				// extract the dragged items from the dragSource and dispatch as an event
				var items:Array = event.dragSource.dataForFormat("items") as Array;
				new BatchListEvent(BatchListEvent.ADD_CHECKS_TO_NEW_BATCH, items).dispatch();
				
				// replace the event with empty dragSource so dragging will end normally but do nothing
				event.dragSource = new DragSource();
				super.dragDropHandler(event);
			}

			private function amountLabelFunction( item : Object, column : DataGridColumn ) : String {
				return cf.format(item.amount);
			}
			private function amountSortCompare( a : Object, b : Object ) : int {
				return ObjectUtil.numericCompare( a.amount, b.amount);
			}

			private function pledgeAmountLabelFunction( item : Object, column : DataGridColumn ) : String {
				return cf.format(item.pledge_id.pledge_amount);
			}
			private function pledgeAmountSortCompare( a : Object, b : Object ) : int {
				return ObjectUtil.numericCompare( a.pledge_id.pledge_amount, b.pledge_id.pledge_amount);
			}

			private function fullNameLabelFunction( item : Object, column : DataGridColumn ) : String {
				return item.full_name;
			}
			private function fullNameSortCompare( a : Object, b : Object ) : int {
				return ObjectUtil.stringCompare( a.full_name, b.full_name);
			}

			private function contactNameLabelFunction( item : Object, column : DataGridColumn ) : String {
				return item.pledge_id.fname + " " + item.pledge_id.lname;
			}
			private function contactNameSortCompare( a : Object, b : Object ) : int {
				return ObjectUtil.stringCompare( a.pledge_id.lname, b.pledge_id.lname);
			}

			private function addressLabelFunction( item : Object, column : DataGridColumn ) : String {
				return item.pledge_id.address1;
			}
			private function addressSortCompare( a : Object, b : Object ) : int {
				return ObjectUtil.stringCompare( a.pledge_id.address1, b.pledge_id.address1);
			}

			private function stateLabelFunction( item : Object, column : DataGridColumn ) : String {
				return item.pledge_id.state;
			}
			private function stateSortCompare( a : Object, b : Object ) : int {
				return ObjectUtil.stringCompare( a.pledge_id.state, b.pledge_id.state);
			}

			private function zipLabelFunction( item : Object, column : DataGridColumn ) : String {
				return item.pledge_id.zip;
			}
			private function zipSortCompare( a : Object, b : Object ) : int {
				return ObjectUtil.numericCompare( a.pledge_id.zip, b.pledge_id.zip);
			}

			private function cityLabelFunction( item : Object, column : DataGridColumn ) : String {
				return item.pledge_id.city;
			}
			private function citySortCompare( a : Object, b : Object ) : int {
				return ObjectUtil.stringCompare( a.pledge_id.city, b.pledge_id.city);
			}

			private function pledgeDateLabelFunction( item : Object, column : DataGridColumn ) : String {
				return df.format(EDateUtil.timestampToLocalDate(item.pledge_id.pledge_date));
			}
			private function pledgeDateSortCompare( a : Object, b : Object ) : int {
				return ObjectUtil.numericCompare( a.pledge_id.pledge_date, b.pledge_id.pledge_date);
			}
		]]>
	</mx:Script>
</mx:DataGrid>

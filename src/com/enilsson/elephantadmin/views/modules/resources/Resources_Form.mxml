<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas 
	xmlns:mx="http://www.adobe.com/2006/mxml"
	xmlns:struktorForm="com.enilsson.utils.struktorForm.*" 
	xmlns:common="com.enilsson.elephantadmin.views.common.*" 
	xmlns:graphics="com.enilsson.graphics.*">
	
	<mx:Metadata>
		[Event(name="upsertRecord", type="flash.events.Event")]
		[Event(name="deleteRecord", type="flash.events.Event")]
		[Event(name="downloadFile", type="flash.events.Event")]
	</mx:Metadata>
	
	<mx:Script>
		<![CDATA[
			import com.enilsson.elephantadmin.vo.ErrorVO;
			import com.enilsson.controls.StackableFormItem;
			import mx.controls.TextInput;
			import mx.containers.HBox;
			import caurina.transitions.Tweener;
			import mx.events.ListEvent;
			import mx.controls.ComboBox;
			import mx.utils.ObjectUtil;
			import org.osflash.thunderbolt.Logger;
			import com.enilsson.elephantadmin.vo.RecordVO;
			import com.enilsson.elephantadmin.models.EAModelLocator;
			
			[Bindable] private var _model:EAModelLocator = EAModelLocator.getInstance();

			/**
			 * Set the theme color of the component
			 */
			[Bindable] private var _themeColor:uint = 0xCCCCCC;
			public function set themeColor(value:uint):void
			{
				_themeColor = value;
			}
			
			/**
			 * Get the variables from the form
			 */
			public function get formVariables():Object
			{
				return moduleForm.formVariables;
			}
			
			/**
			 * Get the status of the form
			 */
			public function get isValid():Boolean
			{
				 _fileType = moduleForm.getField('filetype') as ComboBox
				if(_fileType.selectedItem.value == "")
					return false;
				if(_model.resources.fileChanged)
					if(_model.resources.fileRef.size > _model.resources.fileMaxSize * 1024 * 1024)
						return false;

				return moduleForm.isValid;
			}
			
			[Bindable] private var _showProgress:Boolean = false;
			public function set showProgress(value:Boolean):void
			{
				_showProgress = value;
			}
			
			public function set progress(value:uint):void
			{
				fileProgress.setProgress(value, 100);
				fileProgress.label = 'uploading file...' + value.toString() + '%';
			}
			
			/**
			 * Watch for the form to be complete and attach event handlers to the links
			 */
			private var _fileLink:StackableFormItem;
			private var _hyperLink:StackableFormItem;
			private var _fileType:ComboBox;
			
			private function showHideLinks(event:Event):void
			{
				_model.resources.fileChanged = false;
				// get the file input and apply some behaviours
				var fl:TextInput = moduleForm.getField('link') as TextInput;
				_fileLink = fl.parent.parent as StackableFormItem;
				_fileLink.addEventListener(MouseEvent.CLICK, function(e:MouseEvent):void {
					if( !_fileType.selectedItem ) return;

					var fileTypes:String = "*." + _fileType.selectedItem.value
					fileTypes = fileTypes.replace( /,/g ,";*.");
					
					var allTypes:Array = new Array( new FileFilter("Allowed Types", fileTypes) );
					_model.resources.fileRef.addEventListener(Event.SELECT, function(e:Event):void{
						if(_model.resources.fileRef.size > _model.resources.fileMaxSize * 1024 * 1024)
						{
							_model.errorVO = new ErrorVO("The file cannot be larger than "+_model.resources.fileMaxSize+"MB","errorBox", true);
						}
						else
						{
							fl.text = _model.resources.fileRef.name;
							formVariables['filesize'] = _model.resources.fileRef.size;
							_model.resources.fileChanged = true;
						}
					});
					_model.resources.fileRef.browse(allTypes);
				});				
				
				// get the hyperlink field
				var hl:TextInput = moduleForm.getField('hyperlink') as TextInput;
				_hyperLink = hl.parent as StackableFormItem;
				
				// get the filetype combo and apply some behaviours
				_fileType = moduleForm.getField('filetype') as ComboBox;
				_fileType.addEventListener(ListEvent.CHANGE, function(e:ListEvent):void {
					switchLinkVisibility( e.currentTarget.selectedItem.value )
				});
				
				// set the file/hyperlink enabled accordingly
				if(_fileType.selectedItem)
				{
					if(_fileType.selectedItem.value)
						switchLinkVisibility( _fileType.selectedItem.value );
				}
				else
					switchLinkVisibility( 'nothing' );
			}
			
			/**
			 * Switch between file link or hyper link depending on the file type
			 */
			private function switchLinkVisibility( action:String ):void
			{
				switch(action)
				{
					case 'html' :
						_fileLink.enabled = false;
						_hyperLink.enabled = true;
						downloadButton.enabled = false;
					break;
					case 'nothing' :
						_fileLink.enabled = false;
						_hyperLink.enabled = false;
						downloadButton.enabled = false;
					break;
					default :
						_fileLink.enabled = true;
						_hyperLink.enabled = false;
						downloadButton.enabled = true;
					break;
				}
			}
		]]>
	</mx:Script>

	<mx:Style>
		.resourcesForm {
			labelWidth:75;
			formInputWidth:225;
			formInputStyleName:'userFormInput';
			formItemStyleName:'userFormLabel';
			requiredLabelStyleName:'userFormLabel';
		}
		.userFormInput {
			color:#333333;
			fontSize:14;	
		}
		.userFormLabel {
			fontSize:10;
			color:#333333;	
		}
		.formActivityText {
			color:#333333;
			fontSize:8;
			fontWeight:'normal';	
		}
	</mx:Style>
	
	<mx:VBox verticalGap="0" backgroundColor="#CCCCCC">
		<struktorForm:StruktorForm id="moduleForm"
			styleName="resourcesForm"
			width="{width}" 
			height="100%" 
			layoutProvider="{_model.struktorLayout.resources}" 
			dataProvider="{_model.resources.formRecord}" 
			stackFormItems="true" 
			selectedFields="{['title','description','publish','filetype','link','hyperlink']}" 
			dataChange="_model.dataChanged = true" 
			formBuildComplete="_model.dataChanged = false; showHideLinks(event)"
			/>
		<mx:VBox id="fileBrowser" width="100%"
			height="{height - moduleForm.height - footer.height}" 
			paddingLeft="15" paddingRight="15">
			<mx:Button id="downloadButton"
				label="View File"
				click="dispatchEvent( new Event('downloadFile') )"/>	
		</mx:VBox>
		<mx:Canvas id="footer" 
			width="100%" height="28" styleName="controlBar">
			<mx:LinkButton 
				label="DELETE" fontSize="10" color="#ED1C24" visible="{!_model.resources.addingRecord}" 
				verticalCenter="0" left="10"
				click="dispatchEvent( new Event('deleteRecord') )"
				 />	
			<common:CMSSubmitBtn 
				label="{((_model.resources.addingRecord) ? 'SAVE' : 'UPDATE')}"
				toolTip="{moduleForm.isValid ? 'This form is ready to submit' : 'Please correctly fill in all form fields'}" 
				enabled="{moduleForm.isValid}"
				verticalCenter="0" right="10"
				click="dispatchEvent( new Event('upsertRecord') )" />
		</mx:Canvas>
	</mx:VBox>

	<mx:Canvas id="formProcessing"
		width="100%" height="100%"
		visible="{_model.news.formProcessing}"
		showEffect="fadeIn" hideEffect="fadeOut"
		backgroundColor="#ededed"
		alpha="0.75"
		>
		<graphics:ActivityIndicator 
			id="formProcessingActivity"
			width="110" height="110" 
			horizontalCenter="0" verticalCenter="0"
			alpha="1"
			boxFillColors="[0x999999, 0x999999]" 
			boxCornerRadius="2" 
			textAlpha="1" 
			textMessage="form processing"  
			textStyleName="formActivityText"
			/>
	</mx:Canvas>
	
	<mx:Canvas id="fileProgressBox"
		width="100%" height="100%"
		visible="{_showProgress}"
		showEffect="fadeIn" hideEffect="fadeOut"
		backgroundColor="#ededed"
		alpha="0.75"
		>
		<mx:ProgressBar id="fileProgress" 
			label="uploading file..." 
			minimum="0" 
			maximum="100"
            direction="right" 
            mode="manual"
			horizontalCenter="0" 
			verticalCenter="0" />
	</mx:Canvas>
	
</mx:Canvas>
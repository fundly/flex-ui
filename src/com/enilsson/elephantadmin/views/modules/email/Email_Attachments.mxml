<?xml version="1.0" encoding="utf-8"?>
<common:LabeledContainer
	xmlns:mx="http://www.adobe.com/2006/mxml" 
	xmlns:common="com.enilsson.elephantadmin.views.common.*" 
	xmlns:email="com.enilsson.elephantadmin.views.modules.email.*" 
	verticalScrollPolicy="off" horizontalScrollPolicy="off"
	label="{_model.viewStateNames.getItemAt(moduleID)}">
	
	<mx:HDividedBox horizontalGap="10" width="100%" height="100%">
		<common:ModuleList id="emailList" 
			height="100%"
			width="100%"
			dataProvider="{_model.email_attachments.records}"
			searchComboList="{_model.email_attachments.searchBoxCombo}"
			itemRenderer="com.enilsson.elephantadmin.views.modules.email.Email_Attachments_ModuleList"
			listItemClick="listClickHandler()" 
			searchStart="searchStart(event)" 
			indexSearch="indexSearchStart(event)"
			clearSearch="clearSearch()" 
			newPage="newPageAction(event)" 
			selectedPage="{_model.email_attachments.currPage / _model.itemsPerPage}" 
			selectedIndex="{_model.email_attachments.selectedIndex}" 
			itemsPerPage="{_model.itemsPerPage}" 
			itemsTotal="{_model.email_attachments.totalRecords}"
			/>

		<email:Email_Attachments_Form id="email_form"
			width="255" minWidth="255" maxWidth="255"
			height="100%"
			upsertRecord="upsertRecord(event)"
			deleteRecord="deleteRecord(event)"
			downloadFile="download(event)"
			 />
			
		<mx:VBox width="350" minWidth="300" maxWidth="350" height="100%">
			<mx:HBox horizontalAlign="right" width="100%" horizontalScrollPolicy="off"
				height="25">
				<mx:Button id="addItemBtn" 
					label="ADD ITEM" 
					click="addClickHandler(event)" 
					icon="{Icons.ADD}" 
					width="100" height="25" 
					styleName="actionsList" />
				<mx:Button id="exportBtn" 
					label="EXPORT" 
					click="exportClickHandler(event)" 
					icon="{Icons.EXPORT}" 
					width="100" height="25" 
					styleName="actionsList" />
			</mx:HBox>
			<email:Email_Attachments_Options id="email_options"
				width="100%" height="100%"/>
		</mx:VBox>
	</mx:HDividedBox>	
	
	
	<mx:Script>
		<![CDATA[
			import com.enilsson.elephantadmin.models.Icons;
			import flash.net.navigateToURL;
			import mx.rpc.events.ResultEvent;
			import mx.events.CloseEvent;
			import mx.controls.Alert;
			import com.enilsson.utils.eNilssonUtils;
			import com.enilsson.elephantadmin.events.main.S3Event;
			import mx.events.ResourceEvent;
			import com.enilsson.elephantadmin.vo.RecordVO;
			import org.osflash.thunderbolt.Logger;
			import mx.utils.ObjectUtil;
			import com.enilsson.elephantadmin.vo.RecordsVO;
			import com.enilsson.elephantadmin.vo.SearchVO;
			import com.enilsson.elephantadmin.events.modules.EmailEvent;
			import mx.collections.ArrayCollection;
			import com.enilsson.elephantadmin.models.EAModelLocator;
			import com.enilsson.graphics.enDropShadows;
			
			[Bindable] private var _model:EAModelLocator = EAModelLocator.getInstance();
			
			override protected function init():void
			{
				super.init();

				// get default list
				clearSearch();
				// reset the data changed flag
				_model.dataChanged = false;
			}
			
			/**
			 * Handle the search request
			 */

			private function searchStart(event:Event):void
			{
				if(emailList.searchTerm != ""){
				emailList.clearSearch.visible = true;

					if(emailList.searchOption.data == 0)
					{				
						new EmailEvent(
							EmailEvent.EMAIL_ATTACHMENTS_SEARCH,  {
								'searchVO' : new SearchVO(
									'email_attachments',
									emailList.searchTerm,
									null,
									0,
									_model.itemsPerPage
								)
							}
						).dispatch();
					}
					else
					{
						var searchField:String = emailList.searchOption.data;
	
						var whereObj:Object =  new Object();
							whereObj['statement'] = '(1)';
							whereObj[1] = { 
								'what' : searchField,
								'val' : "%"+emailList.searchTerm+"%",
								'op' : 'LIKE'
							};
		
						new EmailEvent( 
							EmailEvent.EMAIL_ATTACHMENTS_RECORDS, { 
								'recordsVO' : new RecordsVO( 
									'email_attachments(attachment_id<filename>)', 
									whereObj, 
									'email_attachments.title ASC', 
									_model.email_attachments.currPage, 
									_model.itemsPerPage, 
									'P' 
								) 
							} 
						).dispatch();
					}
				}
			}

			private function indexSearchStart(event:Event):void
			{
				emailList.clearSearch.visible = true;
				var whereObj:Object =  new Object();
					whereObj['statement'] = '(1)';
					whereObj[1] = { 
						'what' : 'email_attachments.title',
						'val' : emailList.indexBar.searchLetter+"%",
						'op' : 'LIKE'
					};
				new EmailEvent( 
					EmailEvent.EMAIL_ATTACHMENTS_RECORDS, { 
						'recordsVO' : new RecordsVO( 
							'email_attachments(attachment_id<filename>)', 
							whereObj, 
							'email_attachments.title ASC', 
							_model.email_attachments.currPage, 
							_model.itemsPerPage, 
							'P' 
						) 
					} 
				).dispatch();
			}

			/**
			 * Run a new data event when the clear search event is run
			 */
			private function clearSearch():void
			{
				emailList.clearSearch.visible = false;
				_model.email_attachments.currPage = 0;
				new EmailEvent( 
					EmailEvent.EMAIL_ATTACHMENTS_RECORDS, { 
						'recordsVO' : new RecordsVO( 
							'email_attachments(attachment_id<filename>)', 
							null, 
							'email_attachments.id DESC', 
							_model.email_attachments.currPage, 
							_model.itemsPerPage, 
							'P' 
						) 
					} 
				).dispatch();
			}
			
			/**
			 * Run a new data event when the pagination buttons are clicked
			 */
			private function newPageAction(event:Event):void
			{
				_model.email_attachments.currPage = emailList.selectedPage * _model.itemsPerPage;
				switch(_model.email_attachments.lastQuery.type){
					case EmailEvent.EMAIL_ATTACHMENTS_RECORDS:
						RecordsVO(_model.email_attachments.lastQuery.params.recordsVO).iFrom = _model.email_attachments.currPage;
						_model.email_attachments.lastQuery.dispatch();
 						break;
					
					case EmailEvent.EMAIL_ATTACHMENTS_SEARCH:
						SearchVO(_model.email_attachments.lastQuery.params.searchVO).iFrom = _model.email_attachments.currPage;
						_model.email_attachments.lastQuery.dispatch();
						break;
				}							
			}			
			
			/**
			 * Run an action when the list items are clicked
			 */
			private function listClickHandler():void
			{
				_model.email_attachments.selectedIndex = emailList.selectedIndex;
				_model.email_attachments.formRecord = emailList.clickedItem;
				_model.email_attachments.addingRecord = false;
			}
			
			/**
			 * Handle the action list clicks
			 */
			private function addClickHandler(event:Event):void
			{
				_model.email_attachments.formRecord = new Object();
				_model.email_attachments.fileRef = new FileReference();
				_model.email_attachments.addingRecord = true;
				email_form.filenameLabel.text = "";
			}

			private function exportClickHandler(event:Event):void
			{
				var params:Object = new Object();
				params.limit = emailList.itemsTotal;
				
				new EmailEvent( 
					EmailEvent.EMAIL_ATTACHMENTS_EXPORT, {
						'recordVO' :  new RecordVO (
							'email_attachments',
							0,
							params
						)
					}
				).dispatch();
			}
			
			/**
			 * Run the upsert event to record the data in the form
			 */
			private function upsertRecord(event:Event):void
			{
				if( email_form.isValid === false) return;

/* 				if(_model.debug)
				{
					Logger.info('Form Record', _model.email_attachments.formRecord);
					Logger.info('FormVariables', email_form.formVariables);
				}
 */				
				// if the file is new then upload
				if( _model.email_attachments.fileChanged == true )
					upload();
				// if the file is different from the existing one then upload the new file
				else
					executeUpsert();
			}
	
			/**
			 * Handle the actual upsert action
			 */
			private function executeUpsert():void
			{
				// set the form variables and assign the appropriate RLAC
				var fv:Object = email_form.formVariables;
				fv['mod_e_read'] = email_options.email_access.visibilityType == 'all' ? 1 : 0;
				fv['mod_g_read'] = email_options.email_access.visibilityType == 'group' ? 1 : 0;
				fv['mod_g_write'] = email_options.email_access.visibilityType == 'group' ? 1 : 0;
				fv['mod_group_id'] = email_options.email_access.visibilityType == 'group' ? email_options.email_access.groupID : 0;

				if(_model.debug) Logger.info('Attachment Form Variables', ObjectUtil.toString(fv));

				new EmailEvent( 
					EmailEvent.EMAIL_ATTACHMENTS_UPSERT, {
						'recordVO' :  new RecordVO (
							'email_attachments',
							0,
							fv
						)
					}
				).dispatch();
			}
			
			/**
			 * Upload the file listed to DB
			 */			
			private function upload():void
			{
				// make sure there are no spaces in the filename
//				_model.email_attachments.fileRef.name = eNilssonUtils.niceFileName(_model.email_attachments.fileRef.name);
				
				
				var phpSessID:String = _model.session.data.php_session_id;
				var gURL:String = _model.gatewayURL.match(/key=(.*)/)[0].toString().replace("key=","");
				
				// create the URLRequest
				var request:URLRequest = new URLRequest();
				request.url = _model.gatewayBaseURL+'upload_attachment.php?PHPSESSID=' + phpSessID + '&key=' + gURL;
				if(_model.email_attachments.formRecord.attachment_id)
					request.url += '&id=' + _model.email_attachments.formRecord.attachment_id.id;
				request.method = URLRequestMethod.POST;
				
				if(_model.debug) Logger.info('Request URL', request.url);
			    
			    // start the upload process
			    _model.email_attachments.fileRef.addEventListener(Event.OPEN, function(e:Event):void {
			    	if(_model.debug) Logger.info('Open Upload', ObjectUtil.toString(e.currentTarget));
			    	email_form.showProgress = true;
			    });
			    
			    // capture the data completion
			    _model.email_attachments.fileRef.addEventListener(DataEvent.UPLOAD_COMPLETE_DATA, function(e:DataEvent):void {
			    	if(_model.debug) Logger.info('Complete Data', ObjectUtil.toString(e));
			    	email_form.showProgress = false;
			    	if(isNaN(int(e.data)))
			    	{
			    		Logger.info('Error', ObjectUtil.toString(e));
			    	}
			    	else
			    	{
			    		email_form.formVariables.attachment_id = e.data;
				    	executeUpsert();
			    	}
			    });
			    
			    // register the HTTP failure
			    _model.email_attachments.fileRef.addEventListener(HTTPStatusEvent.HTTP_STATUS, function(e:HTTPStatusEvent):void{
			    	if(_model.debug) Logger.info('HTTP Status', ObjectUtil.toString(e));
			    });
			    
			    // handle an IO error
			    _model.email_attachments.fileRef.addEventListener(IOErrorEvent.IO_ERROR, function(e:IOErrorEvent):void {
			    	if(_model.debug) Logger.info('IOError', ObjectUtil.toString(e));
			    	email_form.showProgress = false;
			    });				    
			    
			    // measure the progress of the upload
			    _model.email_attachments.fileRef.addEventListener(ProgressEvent.PROGRESS, function(e:ProgressEvent):void {
			    	var numPerc:int = Math.round((Number(e.bytesLoaded) / Number(e.bytesTotal)) * 100);
			    	email_form.progress = numPerc;
			    });
			    
			    // handle the completion of the upload
				_model.email_attachments.fileRef.addEventListener(Event.COMPLETE, function(e:Event):void {
			    	if(_model.debug) Logger.info('Complete', ObjectUtil.toString(e));
			    	email_form.showProgress = false;
			    	_model.email_attachments.fileRef = new FileReference();
			    });

                _model.email_attachments.fileRef.upload(request, 'Filedata', false);
			}


			/**
			 * Download the file listed from DB
			 */			
			private function download(event:Event):void
			{
				var phpSessID:String = _model.session.data.php_session_id;
				var gURL:String = _model.gatewayURL.match(/key=(.*)/)[0].toString().replace("key=","");
				
				// create the URLRequest
				var request:URLRequest = new URLRequest();
				request.url = _model.gatewayBaseURL+'view_attachment.php?PHPSESSID=' + phpSessID + '&key=' + gURL + "&id=" + _model.email_attachments.formRecord.attachment_id.id + "&refresh=" + new Date().getTime();
				request.method = URLRequestMethod.GET;
				
				if(_model.debug) Logger.info('Request URL', request.url);
				navigateToURL(request,"_parent");

			}

			/**
			 * Run the delete event
			 */
			private function deleteRecord(event:Event):void
			{
				if (emailList.clickedItem == null) {
					return;
				}
				
				if(_model.debug) Logger.info('Deleting Attachment', emailList.clickedItem.id);

				var confirmBox:Alert = Alert.show('Are you sure you want to delete this item?', 'Delete', Alert.YES | Alert.NO,this,function(eventObj:CloseEvent):void {
					if (eventObj.detail==Alert.YES) 
					{
						new EmailEvent( 
							EmailEvent.EMAIL_ATTACHMENTS_DELETE, {
								'recordVO' :  new RecordVO (
									'email_attachments',
									emailList.clickedItem.id
								)
							}
						).dispatch();
					}
				},null,Alert.NO); 
				confirmBox.width = 330;
			}
						
		]]>
	</mx:Script>

</common:LabeledContainer>
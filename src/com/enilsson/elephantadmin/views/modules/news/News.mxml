<?xml version="1.0" encoding="utf-8"?>
<common:LabeledContainer
	xmlns:mx="http://www.adobe.com/2006/mxml" 
	xmlns:common="com.enilsson.elephantadmin.views.common.*" 
	xmlns:news="com.enilsson.elephantadmin.views.modules.news.*"
	verticalScrollPolicy="off" horizontalScrollPolicy="off"
	label="{_model.viewStateNames.getItemAt(moduleID)}"
	>
	
	<mx:Script>
		<![CDATA[
			import com.enilsson.elephantadmin.models.Icons;
			import mx.events.CloseEvent;
			import mx.controls.Alert;
			import com.enilsson.elephantadmin.vo.RecordVO;
			import org.osflash.thunderbolt.Logger;
			import mx.utils.ObjectUtil;
			import com.enilsson.elephantadmin.vo.RecordsVO;
			import com.enilsson.elephantadmin.vo.SearchVO;
			import com.enilsson.elephantadmin.events.modules.NewsEvent;
			import mx.collections.ArrayCollection;
			import com.enilsson.elephantadmin.models.EAModelLocator;
			import com.enilsson.graphics.enDropShadows;

			[Bindable] private var _model:EAModelLocator = EAModelLocator.getInstance();

			override protected function init():void
			{
				super.init();

				// get default list
				clearSearch();
				// reset the data changed flag
				_model.dataChanged = false;
			}

			private function searchStart(event:Event):void
			{
				if(newsList.searchTerm != ""){
				newsList.clearSearch.visible = true;

					if(newsList.searchOption.data == 0)
					{				
						new NewsEvent(
							NewsEvent.NEWS_SEARCH,  {
								'searchVO' : new SearchVO(
									'news',
									newsList.searchTerm,
									null,
									0,
									_model.itemsPerPage
								)
							}
						).dispatch();
					}
					else
					{
						var searchField:String = newsList.searchOption.data;

						var whereObj:Object =  new Object();
							whereObj['statement'] = '(1)';
							whereObj[1] = { 
								'what' : searchField,
								'val' : "%"+newsList.searchTerm+"%",
								'op' : 'LIKE'
							};
		
						new NewsEvent( 
							NewsEvent.NEWS_RECORDS, { 
								'recordsVO' : new RecordsVO( 
									'news', 
									whereObj, 
									'news.publish_date DESC', 
									_model.news.currPage, 
									_model.itemsPerPage, 
									'P' 
								) 
							} 
						).dispatch();
					}
				}
			}

			private function indexSearchStart(event:Event):void
			{
				newsList.clearSearch.visible = true;
				var whereObj:Object =  new Object();
					whereObj['statement'] = '(1)';
					whereObj[1] = { 
						'what' : 'news.title',
						'val' : newsList.indexBar.searchLetter+"%",
						'op' : 'LIKE'
					};
				new NewsEvent( 
					NewsEvent.NEWS_RECORDS, { 
						'recordsVO' : new RecordsVO( 
							'news', 
							whereObj, 
							'news.publish_date DESC', 
							_model.news.currPage, 
							_model.itemsPerPage, 
							'P' 
						) 
					} 
				).dispatch();
			}
			
			/**
			 * Run a new data event when the clear search event is run
			 */
			private function clearSearch():void
			{
				newsList.clearSearch.visible = false;
				_model.news.currPage = 0;
				new NewsEvent( 
					NewsEvent.NEWS_RECORDS, { 
						'recordsVO' : new RecordsVO( 
							'news', 
							null, 
							'news.publish_date DESC', 
							_model.news.currPage, 
							_model.itemsPerPage, 
							'P' 
						) 
					} 
				).dispatch();
			}

			private function newPageAction(event:Event):void
			{
				_model.news.currPage = newsList.selectedPage * _model.itemsPerPage;
				switch(_model.news.lastQuery.type){
					case NewsEvent.NEWS_RECORDS:
						RecordsVO(_model.news.lastQuery.params.recordsVO).iFrom = _model.news.currPage;
						_model.news.lastQuery.dispatch();
 						break;
					
					case NewsEvent.NEWS_SEARCH:
						SearchVO(_model.news.lastQuery.params.searchVO).iFrom = _model.news.currPage;
						_model.news.lastQuery.dispatch();
						break;
				}
			}
			
			/**
			 * Run an action when the list items are clicked
			 */
			private function listClickHandler():void
			{
				_model.news.selectedIndex = newsList.selectedIndex;
				_model.news.formRecord = newsList.clickedItem;
			}
			
			/**
			 * Handle the action list clicks
			 */
			private function addClickHandler(event:Event):void
			{
				_model.news.formRecord = new Object();
			}

			private function exportClickHandler(event:Event):void
			{
				var params:Object = new Object();
				params.limit = newsList.itemsTotal;
				
				new NewsEvent( 
					NewsEvent.NEWS_EXPORT, {
						'recordVO' :  new RecordVO (
							'news',
							0,
							params
						)
					}
				).dispatch();
			}

			/**
			 * Run the upsert event to record the data in the form
			 */
			private function upsertRecord(event:Event):void
			{
				if( news_form.isValid === false) return;

				// set the form variables and assign the appropriate RLAC
				var fv:Object = news_form.formVariables;
				fv['mod_e_read'] = news_options.news_access.visibilityType == 'all' ? 1 : 0;
				fv['mod_g_read'] = news_options.news_access.visibilityType == 'group' ? 1 : 0;
				fv['mod_g_write'] = news_options.news_access.visibilityType == 'group' ? 1 : 0;
				fv['mod_group_id'] = news_options.news_access.visibilityType == 'group' ? news_options.news_access.groupID : 0;
				
				if(_model.debug) Logger.info('News Form Variables', ObjectUtil.toString(fv));

				new NewsEvent( 
					NewsEvent.NEWS_UPSERT, {
						'recordVO' :  new RecordVO (
							'news',
							0,
							fv
						)
					}
				).dispatch();
			}

			/**
			 * Run the delete event
			 */
			private function deleteRecord(event:Event):void
			{
				if (newsList.clickedItem == null) {
					return;
				}
				
				if(_model.debug) Logger.info('Deleting News', newsList.clickedItem.id);

				var confirmBox:Alert = Alert.show('Are you sure you want to delete this item?', 'Delete', Alert.YES | Alert.NO,this,function(eventObj:CloseEvent):void {
					if (eventObj.detail==Alert.YES) 
					{
						new NewsEvent( 
							NewsEvent.NEWS_DELETE, {
								'recordVO' :  new RecordVO (
									'news',
									newsList.clickedItem.id
								)
							}
						).dispatch();
					}
				},null,Alert.NO); 
				confirmBox.width = 330;
			}
		]]>
	</mx:Script>
	
	<mx:HDividedBox horizontalGap="10" width="100%" height="100%">
		
		<common:ModuleList id="newsList" 
			height="100%"
			width="100%"
			dataProvider="{_model.news.records}"
			searchComboList="{_model.news.searchBoxCombo}"
			itemRenderer="com.enilsson.elephantadmin.views.modules.news.News_ModuleList"
			listItemClick="listClickHandler()" 
			searchStart="searchStart(event)"
			indexSearch="indexSearchStart(event)"
			clearSearch="clearSearch()" 
			newPage="newPageAction(event)" 
			selectedIndex="{_model.news.selectedIndex}" 
			selectedPage="{_model.news.currPage / _model.itemsPerPage}" 
			itemsPerPage="{_model.itemsPerPage}" 
			itemsTotal="{_model.news.totalRecords}"
			/>
		
		<news:News_Form id="news_form"
			width="350"
			minWidth="350"
			maxWidth="350"
			height="100%"
			upsertRecord="upsertRecord(event)"  deleteRecord="deleteRecord(event)"/>

		<mx:VBox width="350" minWidth="300" maxWidth="350" height="100%">
			<mx:HBox horizontalAlign="right" width="100%" horizontalScrollPolicy="off"
				height="25">
				<mx:Button id="addItemBtn" 
					label="ADD ITEM" 
					click="addClickHandler(event)" 
					icon="{Icons.ADD}" 
					width="100" height="25" 
					styleName="actionsList"/>
				<mx:Button id="exportBtn" 
					label="EXPORT" 
					click="exportClickHandler(event)" 
					icon="{Icons.EXPORT}" 
					width="100" height="25" 
					styleName="actionsList"/>
			</mx:HBox>
			<news:News_Options id="news_options"
				width="100%" height="100%"/>
		</mx:VBox>
	</mx:HDividedBox>

</common:LabeledContainer>
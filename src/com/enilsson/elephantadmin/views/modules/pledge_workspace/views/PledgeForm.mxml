<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas 
	xmlns:mx="http://www.adobe.com/2006/mxml"
	xmlns:struktorForm="com.enilsson.utils.struktorForm.*"
	xmlns:views="com.enilsson.elephantadmin.views.modules.pledge_workspace.views.*"
	xmlns:controls="com.enilsson.controls.*"	
	show="init()"
	hide="TooltipUtil.hideTooltip()"
	height="100%" width="100%" 
	verticalScrollPolicy="off">	
	
	<mx:ViewStack id="addLabels" 
		includeInLayout="false" visible="false">
		<mx:Canvas label="Credit Card" />
		<mx:Canvas label="Check" />
		<mx:Canvas label="No contribution details" />
	</mx:ViewStack>
	
	<mx:Canvas id="pledgeInfoContainer" 
		left="0" top="0" bottom="5" 
		width="50%" maxHeight="240"
		horizontalScrollPolicy="off">
		<struktorForm:StruktorForm id="pledgeInfo"
			paddingTop="0" paddingBottom="0"
			right="{_pledgeInfoRight}"
			styleName="processingForm"
			layoutProvider="{presentationModel.pledgeLayout}"
			dataProvider="{presentationModel.initialPledgeData}"
			isValidChanged="setIsValid()" 
			validateOnKeyPress="true"
			formBuildComplete="formBuildCompleteAction(event)" 
			selectedGroups="{[2]}" 
			groupLabels="false" />
	</mx:Canvas>
		
	<mx:VBox styleName="transactionsBox" 
		width="305" top="0" right="10" bottom="5" 
		horizontalAlign="center" 
		horizontalScrollPolicy="off">
		
		<mx:ViewStack id="transactionVStack" 
			selectedIndex="{presentationModel.transVStack}"
			change="vstackChangeHandler(event)"
			width="100%" height="200">
			<!-- 0 -->
			<mx:Canvas label="Credit Card"
				width="100%" height="100%"
				showEffect="fadeIn" hideEffect="fadeOut"
				horizontalScrollPolicy="off">
				<mx:ViewStack id="ccBillingVStack"
					selectedIndex="{presentationModel.ccVStack}"
					change="billingVStackChangeHandler(event)"
					width="330" height="100%"
					top="0" horizontalCenter="-8">
					<struktorForm:StruktorForm id="ccForm" 
						styleName="processingForm" 
						showEffect="fadeIn" hideEffect="fadeOut"
						show="lastField = ccForm.lastField"
						layoutProvider="{presentationModel.transactionLayout}"
						isValidChanged="setIsValid()" 
						validateOnKeyPress="true"
						clearForm="{presentationModel.clearPaymentForms}" 
						formBuildComplete="formBuildCompleteAction(event)"			
						selectedGroups="{[1]}" 
						groupLabels="false" />
					<mx:Canvas horizontalScrollPolicy="off"
						show="lastField = billingForm.lastField"
						showEffect="fadeIn" hideEffect="fadeOut">
						<mx:Text fontSize="9" width="90%" horizontalCenter="20"
							text="Billing details for credit card if different from contact details" />
						<struktorForm:StruktorForm id="billingForm" 
							styleName="processingForm" 
							top="25"
							layoutProvider="{presentationModel.transactionLayout}"
							dataProvider="{presentationModel.initialBillingDetails}"
							formBuildComplete="formBuildCompleteAction(event)"
							isValidChanged="setIsValid()"
							validateOnKeyPress="true"
							selectedGroups="{[2]}" 
							groupLabels="false" />	
					</mx:Canvas>						
				</mx:ViewStack>
				<mx:HBox bottom="5" horizontalCenter="0" 
					horizontalGap="2"
					verticalAlign="middle">
					<mx:LinkButton height="15" fontSize="9"
						tabEnabled="false"
						click="presentationModel.ccVStack = presentationModel.ccVStack == 0 ? 1 : 0"
						label="{presentationModel.ccVStack == 0 ? 
							'add separate billing address' : 
							'back to credit card details'}" />
					<mx:VRule height="12"
						visible="{presentationModel.ccVStack == 1}"
						includeInLayout="{presentationModel.ccVStack == 1}" />
					<mx:LinkButton height="15" fontSize="9"
						visible="{presentationModel.ccVStack == 1}"
						includeInLayout="{presentationModel.ccVStack == 1}"
						label="clear billing address"
						tabEnabled="false"
						toolTip="Remove the billing address details and use the contact details for the transaction information"
						click="presentationModel.clearBillingData()" />											
				</mx:HBox>
			</mx:Canvas>
			
			<!-- 1 -->
			<struktorForm:StruktorForm id="checkForm" 
				styleName="processingForm"
				label="Check" 
				selectedGroups="{[1]}" groupLabels="false"
				show="lastField = checkForm.lastField"
				showEffect="fadeIn" hideEffect="fadeOut"			
				width="100%" height="200" maxHeight="200" 
				clearForm="{presentationModel.clearPaymentForms}"
				layoutProvider="{presentationModel.checkLayout}"
				isValidChanged="setIsValid()" 
				validateOnKeyPress="true"
				formBuildComplete="formBuildCompleteAction(event)" />
			
			<!--2-->
			<mx:Canvas
				horizontalScrollPolicy="off"
				width="100%"
				showEffect="fadeIn" hideEffect="fadeOut"
				show="lastField = noContribForm.lastField">
				<mx:Text top="5" right="5" left="5" 
					styleName="labelStyleName" width="100%" selectable="false" 
					text="If you don't have specific credit card or check information for this donor, please choose an option to send him or her a reminder email that contains a donor form with instructions on how to fulfill this pledge." />
				<struktorForm:StruktorForm id="noContribForm"
					top="80" left="-8"
					styleName="processingForm"
					label="No contribution details"
					selectedGroups="{[1]}" groupLabels="false"
					width="100%" 
					clearForm="{presentationModel.clearPaymentForms}"
					layoutProvider="{presentationModel.checkLayout}"
					excludedFields="{['amount','full_name']}"
					isValidChanged="setIsValid()" 
					validateOnKeyPress="true"
					formBuildComplete="formBuildCompleteAction(event)" />	
			</mx:Canvas>
				
			<!-- 3 -->	
			<views:Contributions id="listOfPayments"
				label="List of Payments"
				presentationModel="{presentationModel}"
				showEffect="fadeIn" hideEffect="fadeOut" />
				
			<!-- 4 -->
			<mx:Canvas horizontalScrollPolicy="off" verticalScrollPolicy="off">
				<struktorForm:StruktorForm id="inKindForm"
					styleName="processingForm"
					label="In-Kind"
					show="lastField = inKindForm.lastField"
					showEffect="fadeIn" hideEffect="fadeOut"			
					width="100%" height="200" maxHeight="200"
					top="10" 
					clearForm="{presentationModel.clearPaymentForms}"
					layoutProvider="{presentationModel.contribMiscLayout}"
					isValidChanged="setIsValid()" 
					validateOnKeyPress="true"
					formBuildComplete="formBuildCompleteAction(event)" />
			</mx:Canvas>
			
				
			<!-- 5 -->
			<mx:Canvas horizontalScrollPolicy="off" verticalScrollPolicy="off">
				<struktorForm:StruktorForm id="cashForm"
					styleName="processingForm"
					label="Cash"
					show="lastField = cashForm.lastField"
					showEffect="fadeIn" hideEffect="fadeOut"			
					width="100%" height="200" maxHeight="200"
					top="10" 
					clearForm="{presentationModel.clearPaymentForms}"
					layoutProvider="{presentationModel.contribMiscLayout}"
					isValidChanged="setIsValid()" 
					validateOnKeyPress="true"
					formBuildComplete="formBuildCompleteAction(event)" />
			</mx:Canvas>
				
		</mx:ViewStack>
		
		<mx:LinkBar id="transactionLinkBar" 
			styleName="transactionLinkBar" 
			linkButtonStyleName="transactionLinkButton"
			dataProvider="{addLabels}"
			visible="{presentationModel.action != PledgeWorkspaceModel.EDIT}"
			includeInLayout="{presentationModel.action != PledgeWorkspaceModel.EDIT}"			 
			itemClick="transactionLinkBarClickHandler(event)" 
			tabEnabled="false" />
		
		<mx:LinkButton styleName="transactionLinkButton"
			label="List of Payments"
			visible="{presentationModel.action == PledgeWorkspaceModel.EDIT}" 
			includeInLayout="{presentationModel.action == PledgeWorkspaceModel.EDIT}"
			click="presentationModel.transVStack = PledgeWorkspaceModel.LIST_CONTRIBS_VIEW"
			enabled="{presentationModel.transVStack != PledgeWorkspaceModel.LIST_CONTRIBS_VIEW}"
			tabEnabled="false" />
	
	</mx:VBox>
	
	
	<controls:InfoBtn visible="{transactionVStack.selectedChild == listOfPayments}" 
		right="20" top="210" 
		infoTipTitle="Please Note"
		text="Existing transactions can not be edited. Only one transaction (credit card, check, in-kind or cash) can be added per update. To add another transaction please update the pledge another time." />


	<mx:Fade id="fadeIn" alphaTo="1" duration="300" />
	<mx:Fade id="fadeOut" alphaTo="0" duration="300" />
	
	
	<!-- Send the pledge form variables back to the VO setter -->
	<mx:Binding source="pledgeInfo.formVariables" destination="presentationModel.pledgeData" />
	<mx:Binding source="ccForm.formVariables" destination="presentationModel.transactionData" />
	<mx:Binding source="checkForm.formVariables" destination="presentationModel.checkData" />
	<mx:Binding source="billingForm.formVariables" destination="presentationModel.billingData" />
	<mx:Binding source="noContribForm.formVariables" destination="presentationModel.noContribData" />
	<mx:Binding source="inKindForm.formVariables" destination="presentationModel.inKindData" />
	<mx:Binding source="cashForm.formVariables" destination="presentationModel.cashData" />

	<!-- List all the errors on each of the forms, so the popup can show what is wrong on the form -->
	<mx:Binding source="pledgeInfo.invalidFields" destination="presentationModel.pledgeErrors" />
	<mx:Binding source="ccForm.invalidFields" destination="presentationModel.ccErrors" />
	<mx:Binding source="checkForm.invalidFields" destination="presentationModel.checkErrors" />
	<mx:Binding source="billingForm.invalidFields" destination="presentationModel.billingErrors" />
	<mx:Binding source="noContribForm.invalidFields" destination="presentationModel.noContribErrors" />
	<mx:Binding source="inKindForm.invalidFields" destination="presentationModel.inKindErrors" />
	<mx:Binding source="cashForm.invalidFields" destination="presentationModel.cashErrors" />	

	<!-- List all the fields each of the forms -->
	<mx:Binding source="pledgeInfo.fieldNames" destination="presentationModel.pledgeFields" />
	<mx:Binding source="ccForm.fieldNames" destination="presentationModel.ccFields" />
	<mx:Binding source="checkForm.fieldNames" destination="presentationModel.checkFields" />
	<mx:Binding source="billingForm.fieldNames" destination="presentationModel.billingFields" />
	<mx:Binding source="noContribForm.fieldNames" destination="presentationModel.noContribFields" />
	<mx:Binding source="inKindForm.fieldNames" destination="presentationModel.inKindFields" />
	<mx:Binding source="cashForm.fieldNames" destination="presentationModel.cashFields" />	
	

	<mx:Metadata>
		[Event(name="isValidChanged", type="flash.events.Event")]
	</mx:Metadata>
	
	<mx:Script>
		<![CDATA[
			import com.enilsson.validators.SelectionNumericValidator;
			import mx.validators.NumberValidator;
			import com.enilsson.common.utils.TooltipUtil;
			import mx.core.UIComponent;
			import mx.managers.ToolTipManager;
			import mx.core.IToolTip;
			import com.enilsson.elephantadmin.views.modules.pledge_workspace.events.PWEvent;
			import com.enilsson.elephantadmin.views.modules.pledge_workspace.model.PledgeWorkspaceModel;
			import mx.containers.FormItem;
			import mx.events.IndexChangedEvent;
			import com.enilsson.utils.eNilssonUtils;
			import mx.events.ItemClickEvent;
			import mx.events.FlexEvent;
			import com.enilsson.controls.LookupInput;
			import mx.collections.ArrayCollection;
			import mx.binding.utils.BindingUtils;
			import com.enilsson.controls.AutoCompleteSearch;
			import mx.controls.DateField;
			import mx.controls.ComboBox;
			import mx.controls.TextInput;
			import mx.utils.ObjectUtil;
			import org.osflash.thunderbolt.Logger;
			import com.enilsson.elephantadmin.views.modules.pledge_workspace.renderers.*;
			
			[Bindable] public var presentationModel:PledgeWorkspaceModel;
			[Bindable] private var _ccInfo:Boolean = true;
			
			private var firstField:*;
			private var lastField:*;
			
			/**
			 * property to determine if this part of the form is valid
			 */
			public function setIsValid():void
			{
				// if the form has not been built yet, set the validation to false
				if( pledgeInfo.numChildren == 0 || !ccForm || !checkForm || !noContribForm || !inKindForm )
				{
					_isValid = presentationModel.pledgeInfoValid = false;
					return;
				}
				
				// validate against the transaction requested
				switch(presentationModel.transVStack)
				{
					case PledgeWorkspaceModel.CC_VIEW :
						if ( presentationModel.billingData != null )
							_isValid = pledgeInfo.isValid && ccForm.isValid && billingForm.isValid;
						else
							_isValid = pledgeInfo.isValid && ccForm.isValid;
					break;
					case PledgeWorkspaceModel.CHECK_VIEW :
						_isValid = pledgeInfo.isValid && checkForm.isValid;
					break;
					case PledgeWorkspaceModel.NO_CONTRIB_VIEW: 
						_isValid = pledgeInfo.isValid && noContribForm.isValid;
					break;
					case PledgeWorkspaceModel.LIST_CONTRIBS_VIEW :
						_isValid = pledgeInfo.isValid;
					break;
					case PledgeWorkspaceModel.IN_KIND_VIEW:
						_isValid = pledgeInfo.isValid && inKindForm.isValid;
					break;
					case PledgeWorkspaceModel.CASH_VIEW:
						_isValid = pledgeInfo.isValid && cashForm.isValid;
					break;
				}			
				
				presentationModel.pledgeInfoValid = _isValid;
				presentationModel.workspaceValid = _isValid;
				
				dispatchEvent( new Event('isValidChanged') );
			}
			private var _isValid:Boolean = false;
			

			/**
			 * Run some actions on show
			 */
			private function init():void
			{
				if(presentationModel.debug) Logger.info('TransVStack', presentationModel.transVStack);

				if(lastField && presentationModel.tabBackward)
				{
					lastField.setFocus();
					presentationModel.tabBackward = false;
				}
				else if(presentationModel.vindex >= presentationModel.prevVIndex) 
					if(firstField) firstField.setFocus();
				
				// validate the form if this is an edit
				if(presentationModel.action == PledgeWorkspaceModel.EDIT)
				{
					if(presentationModel.debug) Logger.info('Pledge Info - Init', pledgeInfo.isValid);
					setIsValid();
				}
				else {
					transactionLinkBar.selectedIndex = presentationModel.transVStack;
				}
			}

			/**
			 * List of actions to be done once the Struktor forms have completed building
			 */		
			private function formBuildCompleteAction(event:Event):void
			{
				if(presentationModel.debug) Logger.info( 'Form Build Complete', presentationModel.action );
				
				var field:*;	
				
				switch(event.currentTarget)
				{
					case pledgeInfo :
										
						// assign some behaviour to the amount, so it prepopulates the cc & check forms
						var amnt:TextInput = pledgeInfo.getField('pledge_amount') as TextInput;
						amnt.addEventListener(FocusEvent.FOCUS_OUT, function(e:FocusEvent):void { 
							presentationModel.pledgeAmount = e.currentTarget.text;
						});						
						
						// grab the fid ac input and apply its parameters
						var fid:LookupInput = pledgeInfo.getField('tr_users_id') as LookupInput;
						fid.debugMode = presentationModel.debug;
						fid.itemRenderer = new ClassFactory(FID_Item);
						// add the search lookup action and attach it to a data binding
						fid.addEventListener('searchStart', searchStartHandler);
						BindingUtils.bindProperty(fid, 'searchDataProvider', presentationModel, 'fidSearch');	
						// add the label search function and appropriate databindings
						fid.addEventListener('labelSearch', labelSearchHandler);
						fid.addEventListener('labelChanged', labelChangedHandler);	
						presentationModel.tr_usersLabel = fid.label;
						BindingUtils.bindProperty(fid, 'label', presentationModel, 'tr_usersLabel');
						presentationModel.tr_usersValue = fid.dataValue;
						BindingUtils.bindProperty(fid, 'dataValue', presentationModel, 'tr_usersValue');
						// if this an edit, this field needs to be locked
						fid.enabled = presentationModel.action != PledgeWorkspaceModel.EDIT;						
						
						// check for the first field and an event listener so the user can move between tabs with the keyboard
						firstField = pledgeInfo.firstField;
						firstField.addEventListener(FocusEvent.KEY_FOCUS_CHANGE, function(evt:FocusEvent):void {
							if (evt.shiftKey && evt.keyCode == 9) 
							{
								evt.preventDefault();
								presentationModel.prevVIndex = presentationModel.vindex;
								presentationModel.vindex--;
								presentationModel.tabBackward = true;
							}
						});
						// grab the source code ac input and apply its parameters
						var formField:LookupInput = pledgeInfo.getField('event_id') as LookupInput;
						formField.debugMode = presentationModel.debug;
						formField.itemRenderer = new ClassFactory(SourceCode_Item);
						// add the search lookup action and attach it to a data binding
						formField.addEventListener('searchStart', searchStartHandler);	
						BindingUtils.bindProperty(formField, 'searchDataProvider', presentationModel, 'sourceCodeSearch');						
						// add the label search function and appropriate databindings
						formField.addEventListener('labelSearch', labelSearchHandler);	
						formField.addEventListener('labelChanged', labelChangedHandler);	
						presentationModel.eventsLabel = formField.label;
						BindingUtils.bindProperty(formField, 'label', presentationModel, 'eventsLabel');
						presentationModel.eventsValue = formField.dataValue;
						BindingUtils.bindProperty(formField, 'dataValue', presentationModel, 'eventsValue');
						// if this an edit, this field needs to be locked
						formField.enabled = presentationModel.action != PledgeWorkspaceModel.EDIT;	
						
						var dateField:* = pledgeInfo.getField('pledge_date');
						dateField.enabled = presentationModel.action != PledgeWorkspaceModel.EDIT;				
						
						// validate the form if this is an edit
						if(presentationModel.action == PledgeWorkspaceModel.EDIT)
							if(presentationModel.debug) Logger.info('Pledge Info - edit', pledgeInfo.isValid);
							setIsValid();
							
						// send the data to the binding
						presentationModel.pledgeData = pledgeInfo.formVariables;
					break;
					
					case billingForm :
						lastField = event.currentTarget.lastField;
						addLastFieldListeners( lastField );
					break;
					
					case ccForm :
					case cashForm :
					case inKindForm :
						lastField = event.currentTarget.lastField;						
 						addLastFieldListeners( lastField );
 
						field = event.currentTarget.getField('amount') as TextInput;
 						BindingUtils.bindProperty(field, 'text', presentationModel, 'pledgeAmount');
 						
 						// create an amount validator for CC contributions whose minValue is based on the minValue of the
 						// pledge_amount validator.
 						var vArr : Array = pledgeInfo.getFieldValidators('pledge_amount', 'selection_numeric');
 						
 						if(vArr && vArr.length > 0)
						{ 						 						
	 						var pledgeAmountVal		: SelectionNumericValidator = vArr[0] as SelectionNumericValidator;
	 						
	 						vArr = ccForm.getFieldValidators('amount', 'numeric');
	 						var amountVal : NumberValidator = vArr[0] as NumberValidator;
	 						
	 						BindingUtils.bindProperty( amountVal, 'minValue', pledgeAmountVal, 'minValue');
	 						BindingUtils.bindSetter( 
	 							function( val : String ) : void {
	 								var amountLabel			: String = ccForm.getFieldLayout('amount').label;
	 								var pledgeAmountLabel	: String = pledgeInfo.getFieldLayout('pledge_amount').label;
	 								var pledgeAmountMinErr	: String = pledgeAmountVal.lowerThanMinError;
	 								amountVal.lowerThanMinError = pledgeAmountMinErr.replace( pledgeAmountLabel, amountLabel );
	 							}, pledgeAmountVal, 'lowerThanMinError' );
	 					}
					break;
					
					case checkForm :
						field = event.currentTarget.getField('amount') as TextInput;
 						BindingUtils.bindProperty(field, 'text', presentationModel, 'pledgeAmount');
 						
 						addCheckFormListeners( event.currentTarget as StruktorForm );
					break;
					
					case noContribForm :
						addCheckFormListeners( event.currentTarget as StruktorForm );						
					break;
				}
				
			}
			
			private function addCheckFormListeners( form : StruktorForm ) : void {
				var sendByField : UIComponent = form.getField('form_send') as UIComponent;
				var emailField : UIComponent = form.getField('email') as UIComponent;
				
				sendByField.addEventListener( FocusEvent.KEY_FOCUS_CHANGE, function( event : FocusEvent ) : void {
					if( ! emailField.parent.visible )
						handleKeyFocusChange( event );
				});
				sendByField.addEventListener( FocusEvent.MOUSE_FOCUS_CHANGE, function( event : FocusEvent ) : void {
					if( ! emailField.parent.visible )
						handleMouseFocusChange( event );
				});	
				
				addLastFieldListeners( emailField );
				BindingUtils.bindProperty(emailField, 'text', presentationModel, 'contactEmail');
			}
			
			private function addLastFieldListeners( field : IEventDispatcher ) : void {
				if(!field) return;
				field.addEventListener( FocusEvent.KEY_FOCUS_CHANGE, handleKeyFocusChange );
				field.addEventListener( FocusEvent.MOUSE_FOCUS_CHANGE, handleMouseFocusChange );
			} 
			
			private function handleKeyFocusChange( event : FocusEvent ) : void {
				
				if ( event.keyCode == Keyboard.TAB ) {
					if( !event.shiftKey ) { 
						event.preventDefault();
						event.stopImmediatePropagation();			
						if(_isValid) {
							if ( presentationModel.numTabs > 2 && presentationModel.action != PledgeWorkspaceModel.EDIT ) {
								presentationModel.showErrorList = false;
								presentationModel.prevVIndex = presentationModel.vindex;
								presentationModel.vindex++;
							}
							else if ( presentationModel.workspaceValid )
								presentationModel.setSubmitFocus = true;
						}
						else {
							presentationModel.showErrorList = ! presentationModel.showErrorList;
						}
					}	
					else {
						presentationModel.showErrorList = false;
					}
				}
			}
			
			private function handleMouseFocusChange( event : FocusEvent ) : void {
				if(presentationModel.showErrorList)
					presentationModel.showErrorList = false;
			}
			
			
			/**
			 * Handle the searches for the LookupInput fields
			 */
			private function searchStartHandler(event:Event):void
			{
				if(presentationModel.debug) Logger.info ('search start', event.currentTarget.dataValue, event.currentTarget.label);
				
				var table:String = event.currentTarget.id == 'tr_users_id' ? 'tr_users_details' : 'events';
				
				new PWEvent ( 
					PWEvent.LOOKUP_INPUT_SEARCH,
					presentationModel,
				 	{ 
				 		'table' : table, 
				 		'searchTerm' : event.currentTarget.searchTerm, 
				 		'searchCount' : 200 
				 	} 
				).dispatch();
			}
			
			/**
			 * Handle any label searches that are needed for the LookupInputs
			 */
			private function labelSearchHandler(event:Event):void
			{
				if(presentationModel.debug) Logger.info ('perform label search', event.currentTarget.dataValue, event.currentTarget.label);
				
				var table:String = event.currentTarget.id == 'tr_users_id' ? 'tr_users_details' : 'events';
				
				new PWEvent (
					PWEvent.GET_LABEL,
					presentationModel,
					{ 'table' : table, 'id' : event.currentTarget.dataValue } 
				).dispatch();
			}
			
			/**
			 * Run some processes after a new label has been entered
			 */
			private function labelChangedHandler(event:Event):void
			{
				setIsValid();
			}
			
			
			/**
			 * Handle the clicks of the linkbar in the transaction form
			 */
			private function transactionLinkBarClickHandler(event:ItemClickEvent):void
			{
				if(presentationModel.debug) Logger.info('Edit Click', event.label, event.index, presentationModel.action);
				
				TooltipUtil.hideTooltip();
				
				switch(presentationModel.action)	
				{	
					case PledgeWorkspaceModel.ADD_NEW :
					case PledgeWorkspaceModel.ADD_EXISTING :
					case PledgeWorkspaceModel.ADD_SHARED :	
						presentationModel.transVStack = event.index;
						
						if(presentationModel.debug) Logger.info('Edit Click', presentationModel.transVStack);
						
						switch(event.index)	
						{
							case PledgeWorkspaceModel.CC_VIEW:
								lastField = ccForm.lastField;
							break;
							case PledgeWorkspaceModel.CHECK_VIEW:
								lastField = checkForm.lastField;
							break;
							case PledgeWorkspaceModel.NO_CONTRIB_VIEW:
								lastField = noContribForm.lastField;
							break;
						}
					break;
					default :
					case PledgeWorkspaceModel.EDIT :
						presentationModel.transVStack = PledgeWorkspaceModel.LIST_CONTRIBS_VIEW;
					break;
				}
			}
			
			/**
			 * Handle the viewstack change and verify the forms
			 */
			private function vstackChangeHandler(event:IndexChangedEvent):void
			{
				setIsValid();
				TooltipUtil.hideTooltip();
				
				var firstField : UIComponent;
				
				switch(event.newIndex)
				{
					case PledgeWorkspaceModel.CC_VIEW :
						presentationModel.transactionData = ccForm.formVariables;
						firstField = ccForm.firstField as UIComponent;
					break;
					case PledgeWorkspaceModel.CHECK_VIEW :
						presentationModel.checkData = checkForm.formVariables;
						firstField = checkForm.firstField as UIComponent;
					break;
					case PledgeWorkspaceModel.NO_CONTRIB_VIEW :
						presentationModel.transactionData = null;
						presentationModel.checkData = null;
						firstField = noContribForm.firstField as UIComponent;
					break;
					case PledgeWorkspaceModel.IN_KIND_VIEW:
						presentationModel.inKindData = inKindForm.formVariables;
						firstField = inKindForm.firstField as UIComponent;
					break;
					case PledgeWorkspaceModel.CASH_VIEW:
						presentationModel.cashData = cashForm.formVariables;
						firstField = cashForm.firstField as UIComponent;
					break;
				}
				
				if( firstField != null ) {
					firstField.setFocus();
				}
			}
			
			
			/**
			 * Handle the cc details/billing viewstack change and verify the forms
			 */
			private function billingVStackChangeHandler( event : IndexChangedEvent ) : void {
				
				setIsValid();
				TooltipUtil.hideTooltip();
				
				switch( event.newIndex ) {
					case PledgeWorkspaceModel.CC_DETAILS_VIEW:
						UIComponent(ccForm.firstField).setFocus();
					break;
					case PledgeWorkspaceModel.BILLING_DETAILS_VIEW: 
						UIComponent(billingForm.firstField).setFocus();
					break;
				}
			}
			
			override protected function updateDisplayList(w:Number, h:Number):void {
				super.updateDisplayList( w, h );
				
				_pledgeInfoRight = pledgeInfoContainer.verticalScrollBar ? pledgeInfoContainer.verticalScrollBar.width : 0;
			}
			
			[Bindable] private var _pledgeInfoRight : Number;
		]]>
	</mx:Script>
	
</mx:Canvas>
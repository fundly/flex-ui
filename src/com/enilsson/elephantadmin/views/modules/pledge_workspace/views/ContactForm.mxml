<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas 
	xmlns:mx="http://www.adobe.com/2006/mxml"
	xmlns:struktorForm="com.enilsson.utils.struktorForm.*"
	xmlns:graphics="com.enilsson.graphics.*"
	show="init()"
	hide="hideAction()"
	width="100%" 
	verticalScrollPolicy="off" 
	horizontalScrollPolicy="off">

	<struktorForm:StruktorForm id="contactDetails" 
		styleName="processingForm"
		width="100%" maxHeight="240" 
		left="0" top="6"
		selectedGroups="{[1]}" 
		layoutProvider="{presentationModel.pledgeLayout}"
		dataProvider="{presentationModel.initialContactData}"
		debugMode="false" validateOnKeyPress="false" 
		numColumns="2"
		isValidChanged="this.isValid = true;" 
		formBuildComplete="formBuildCompleteAction(event)"			
		groupLabels="false" />

	<mx:Binding source="contactDetails.formVariables" destination="presentationModel.contactData" />
	<mx:Binding source="contactDetails.fieldNames" destination="presentationModel.contactsFields" />
	<mx:Binding source="contactDetails.invalidFields" destination="presentationModel.contactsErrors" />
	
	<mx:Metadata>
		[Event(name="isValidChanged", type="flash.events.Event")]
	</mx:Metadata>
	
	<mx:Script>
		<![CDATA[
			import mx.controls.TextInput;
			import com.enilsson.elephantadmin.views.modules.pledge_workspace.model.PledgeWorkspaceModel;
			import com.enilsson.elephantadmin.events.session.PingEvent;
			import mx.managers.ToolTipManager;
			import mx.core.IToolTip;
			import mx.utils.ObjectUtil;
			import org.osflash.thunderbolt.Logger;
			
			[Bindable] public var presentationModel:PledgeWorkspaceModel;
			[Bindable] private var _isValid:Boolean = false;
			
			private var firstField:*;	
			private var lastField:*;		
		
			/**
			 * Public functions to announce that this tab is valid (or not)
			 */
			public function set isValid(value:Boolean):void
			{
				if(contactDetails.numChildren == 0)
				{
					presentationModel.contactDetailsValid = false;
					return;
				}
				
				_isValid = contactDetails.isValid;				
				presentationModel.contactDetailsValid = _isValid;
				presentationModel.workspaceValid = _isValid;
				
				if(presentationModel.debug) Logger.info('ContactDetails Status', _isValid);
				
				dispatchEvent( new Event('isValidChanged') );
			}
			
			[Bindable(event="isValidChanged")]
			public function get isValid():Boolean
			{
				return _isValid;
			}
						
			/**
			 * Initialisation routine
			 */
			private function init():void
			{
				// ping the server to make sure that all is well
				new PingEvent().dispatch();

 				if(presentationModel.vindex >= presentationModel.prevVIndex)
					firstField.setFocus();
				else 
				{
					if(presentationModel.tabBackward)
					{
						lastField.setFocus();
						presentationModel.tabBackward = false;
					}
				}
			}
			
			/**
			 * Hide any error tips when the form is hidden (ie the user moves to a new tab)
			 */
			private function hideAction():void
			{
				var curTT:IToolTip = ToolTipManager.currentToolTip;
				
				if(curTT)
					ToolTipManager.destroyToolTip(curTT);
			}
		
			/**
			 * Complete some actions once the Struktor forms complete building
			 */
			private function formBuildCompleteAction(event:Event):void
			{
				if(presentationModel.debug) Logger.info('Contact Details: Form Build Complete');

				// get the first field in the form
				firstField = contactDetails.firstField;
				
				// get the last field in the form
				lastField = contactDetails.lastField;
				
				// assign an event handler to the last field to cope with tabbing to the next page						
				lastField.addEventListener(FocusEvent.KEY_FOCUS_CHANGE, function(evt:FocusEvent):void {
					if (!evt.shiftKey && evt.keyCode == 9) {
						presentationModel.vindex++;
						evt.preventDefault();
					}
				});	
															
				// validate the form if the action is edit
				if(presentationModel.action == PledgeWorkspaceModel.EDIT)
					isValid = true;
				
				// send the form variables to the model to begin the process
				presentationModel.contactData = contactDetails.formVariables;
				
				// capture the email address so it can be assigned to the check form
				var email:TextInput = contactDetails.getField('email') as TextInput;
				email.addEventListener(FocusEvent.FOCUS_OUT, function(e:FocusEvent):void { 
					presentationModel.contactEmail = e.currentTarget.text;
				});						
			}

		]]>
	</mx:Script>
				
</mx:Canvas>
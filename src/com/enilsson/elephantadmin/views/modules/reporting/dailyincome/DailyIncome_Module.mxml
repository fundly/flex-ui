<?xml version="1.0" encoding="utf-8"?>
<module:ReportModule xmlns:module="com.enilsson.elephantadmin.views.modules.reporting.base.*"
	xmlns:mx="http://www.adobe.com/2006/mxml" 
	layout="absolute"
	width="100%" height="100%"
	xmlns:reporting="com.enilsson.elephantadmin.views.modules.reporting.dailyincome.*" 
	xmlns:components="modules.components.*" 	
	clipContent="true"
	verticalGap="0"
	paddingTop="0" paddingBottom="0" 
	horizontalScrollPolicy="on"
	verticalScrollPolicy="off"
	creationComplete="init()" xmlns:overview="com.enilsson.elephanttrakker.events.modules.overview.*">

	<!-- Define custom colors for use as fills in the AreaChart control. -->
	<mx:SolidColor id="sc1" color="0x7fCEFF" alpha="1"/>
	<mx:SolidColor id="sc2" color="0xDC0C16" alpha="1"/>
	<mx:SolidColor id="sc3" color="purple" alpha="1"/>
	
	<!-- Define custom Strokes. -->
	<mx:Stroke id = "s1" color="blue" weight="2"/>
	<mx:Stroke id = "s2" color="red" weight="2"/>
	<mx:Stroke id = "s3" color="green" weight="2"/>
	<mx:Stroke id = "s4" color="0xEF8125" weight="2"/>

	<mx:HBox width="100%" height="100%">
		<mx:VBox id="summary" horizontalAlign="center" backgroundColor="#CCCCCC" width="350" height="100%" cornerRadius="5" borderStyle="solid">
			<mx:HBox width="100%" styleName="controlBar" paddingLeft="3" paddingTop="3" paddingRight="3" paddingBottom="3" horizontalGap="5" verticalAlign="middle">
					<mx:FormItem label="Day:">
						<mx:DateField id="selectedDay" width="100" color="#000000" formatString="MM/DD/YYYY"
							selectedDate="{_presentationModel.summaryDate}" 
							change="_presentationModel.summaryDate = event.target.selectedDate;"
							textAlign="center" enabled="{!dataLoading}" />
					</mx:FormItem>
				<mx:Spacer width="100%" />
				<mx:Button width="80" label="Export" color="#000000"
						visible="false" enabled="false" toolTip="Feature coming soon" />
						<!-- TODO: export disabled until it is implemented in php -->
			</mx:HBox>

			<mx:Form width="100%" height="100%" paddingTop="0">
				<mx:Text width="100%" textAlign="center" text="Daily report of {dateFormatter.format(_presentationModel.summaryDate)}" fontSize="20" horizontalCenter="0"/>
				<mx:Label width="100%" textAlign="center" text="Today" fontSize="15" horizontalCenter="0"/>
				<mx:FormItem fontWeight="bold" label="Pledged:">
					<mx:Text text="{currencyFormatter.format(_presentationModel.summaryRecord.getItemAt(1).pledge)}" />
				</mx:FormItem>
				<mx:FormItem label="Credit Card:">
					<mx:Text text="{currencyFormatter.format(_presentationModel.summaryRecord.getItemAt(1).credit)}" />
				</mx:FormItem>
				<mx:FormItem label="Check:">
					<mx:Text text="{currencyFormatter.format(_presentationModel.summaryRecord.getItemAt(1).check)}" />
				</mx:FormItem>
				<mx:FormItem label="PayPal:">
					<mx:Text text="{currencyFormatter.format(_presentationModel.summaryRecord.getItemAt(1).paypal)}" />
				</mx:FormItem>
				<mx:FormItem fontWeight="bold" label="Today's Contribution:">
					<mx:Text text="{currencyFormatter.format(_presentationModel.summaryRecord.getItemAt(1).totalContrib)}" />
				</mx:FormItem>
				<mx:HRule width="100%"/>
				<mx:Label width="100%" textAlign="center" text="Total" fontSize="15" horizontalCenter="0"/>
				<mx:FormItem fontWeight="bold" label="Total Pledged:">
					<mx:Text text="{currencyFormatter.format(_presentationModel.summaryRecord.getItemAt(0).pledge)}" />
				</mx:FormItem>
				<mx:FormItem label="Credit Card:">
					<mx:Text text="{currencyFormatter.format(_presentationModel.summaryRecord.getItemAt(0).credit)}" />
				</mx:FormItem>
				<mx:FormItem label="Check:">
					<mx:Text text="{currencyFormatter.format(_presentationModel.summaryRecord.getItemAt(0).check)}" />
				</mx:FormItem>
				<mx:FormItem label="PayPal:">
					<mx:Text text="{currencyFormatter.format(_presentationModel.summaryRecord.getItemAt(0).paypal)}" />
				</mx:FormItem>
				<mx:FormItem fontWeight="bold" label="Total Contribution:">
					<mx:Text text="{currencyFormatter.format(_presentationModel.summaryRecord.getItemAt(0).totalContrib)}" />
				</mx:FormItem>
				<mx:FormItem fontWeight="bold" label="Total Expenditure:" direction="horizontal">
					<mx:TextInput id="expenditure" text="{_presentationModel.summaryRecord.getItemAt(1).expenditure}" width="100" restrict="0-9." maxChars="12" enabled="{!dataLoading}"/>
					<mx:Button label="Save" click="addExpenditure()" enabled="{!dataLoading}" />
				</mx:FormItem>
				<mx:FormItem fontWeight="bold" label="Cash on hand">
					<mx:Text text="{currencyFormatter.format(_presentationModel.summaryRecord.getItemAt(0).cash)}"/>
				</mx:FormItem>
			</mx:Form>
		</mx:VBox>

		<mx:VBox id="graph" width="100%" height="100%" cornerRadius="5" borderStyle="solid">
			<mx:HBox width="100%" styleName="controlBar" paddingLeft="3" paddingTop="3" paddingRight="3" paddingBottom="3" horizontalGap="5" verticalAlign="middle">
				<mx:HBox horizontalGap="2" verticalGap="2">
					<mx:FormItem label="Chart:">
						<mx:ComboBox width="150" color="#000000" dataProvider="{_presentationModel.chartFilter}" id="chartCombo" enabled="{!dataLoading}" change="_presentationModel.selectedChartIndex = chartCombo.selectedIndex"/>
					</mx:FormItem>
				</mx:HBox>
				<mx:Box direction="{this.width &gt; 950 ? 'horizontal' : 'vertical'}" horizontalGap="2" verticalGap="2" horizontalAlign="right">
	 				<mx:FormItem label="from:">
						<mx:DateField id="range_start" width="100" color="#000000" formatString="MM/DD/YYYY" selectedDate="{_presentationModel.startDate}" change="_presentationModel.startDate = event.target.selectedDate" textAlign="center" enabled="{!dataLoading &amp;&amp; !_presentationModel.searching}" />
					</mx:FormItem>
					<mx:FormItem label="to:">
						<mx:DateField id="range_end" width="100" color="#000000" formatString="MM/DD/YYYY" selectedDate="{_presentationModel.endDate}" change="_presentationModel.endDate = event.target.selectedDate" textAlign="center" enabled="{!dataLoading &amp;&amp; !_presentationModel.searching}" />
					</mx:FormItem>
				</mx:Box>
				<mx:Spacer width="100%" />
				<mx:HBox horizontalAlign="center" horizontalGap="2" verticalGap="2"
					verticalAlign="middle" verticalCenter="0">
					<mx:Text id="recordsDesc"
						htmlText="{_presentationModel.recordsHtmlText}"
						fontSize="10"
						color="#FFFFFF"	/>
					<mx:Button width="80" label="Generate" color="#000000"
							click="_presentationModel.generateGraph()"
							enabled="{!dataLoading}" />
				</mx:HBox>
			</mx:HBox>

			<mx:ViewStack width="100%" height="100%" selectedIndex="{_presentationModel.selectedChartIndex}" creationPolicy="all">
				<mx:VBox color="#333333" width="100%" height="100%" >
					<mx:AreaChart id="totalChart" height="100%" width="100%" itemClick="_presentationModel.chartDateClick(event); drawChartOverlays()"
						paddingLeft="5" paddingRight="5" valueCommit="drawChartOverlays();" dataTipFunction="totalTip"
						showDataTips="true" dataProvider="{_presentationModel.totalGraphData}">
						<mx:annotationElements>
							<mx:CartesianDataCanvas id="chartOverlay1" />
						</mx:annotationElements>
						<mx:horizontalAxisRenderers>
							<mx:AxisRenderer labelRenderer="com.enilsson.elephantadmin.views.modules.reporting.base.ModuleAxisLabelRenderer"
								canDropLabels="true" axis="{totalTimeAxis}"/>
						</mx:horizontalAxisRenderers>
						<mx:verticalAxisRenderers>
							<mx:AxisRenderer labelRenderer="com.enilsson.elephantadmin.views.modules.reporting.base.ModuleAxisLabelRenderer"
								canDropLabels="true" axis="{totalAmountAxis}"/>
						</mx:verticalAxisRenderers>
						<mx:horizontalAxis>
							<mx:DateTimeAxis id="totalTimeAxis" title="Date" displayLocalTime="true" alignLabelsToUnits="true" parseFunction="dateParse" labelFunction="dateLabel"/>
						</mx:horizontalAxis>
						<mx:verticalAxis>
							<mx:LinearAxis id="totalAmountAxis" title="Amount" labelFunction="moneyLabel"/>
						</mx:verticalAxis>
						<mx:series>
							<mx:LineSeries showDataEffect="{slideIn}" xField="date" yField="pledge" form="segment" displayName="Pledged" lineStroke="{s4}"/>
							<mx:AreaSet type="stacked">
								<mx:AreaSeries showDataEffect="{slideIn}" xField="date" yField="check" form="segment" displayName="Check"  areaFill="{sc2}"/>
								<mx:AreaSeries showDataEffect="{slideIn}" xField="date" yField="credit" form="segment" displayName="Credit Card" areaFill="{sc1}"/>
								<mx:AreaSeries showDataEffect="{slideIn}" xField="date" yField="paypal" form="segment" displayName="PayPal" areaFill="{sc3}"/>
							</mx:AreaSet>
						</mx:series>
					</mx:AreaChart>
					<mx:Legend dataProvider="{totalChart}" direction="horizontal"/>
				</mx:VBox>
				<mx:VBox width="100%" height="100%" >
					<mx:AreaChart id="incomeChart" height="100%" width="100%" itemClick="_presentationModel.chartDateClick(event); drawChartOverlays()"
						paddingLeft="5" paddingRight="5" type="stacked" dataTipFunction="incomeTip"
						showDataTips="true" dataProvider="{_presentationModel.incomeGraphData}">
						<mx:annotationElements>
							<mx:CartesianDataCanvas id="chartOverlay2" />
						</mx:annotationElements>
						<mx:horizontalAxisRenderers>
							<mx:AxisRenderer labelRenderer="com.enilsson.elephantadmin.views.modules.reporting.base.ModuleAxisLabelRenderer"
								canDropLabels="true" axis="{incomeTimeAxis}"/>
						</mx:horizontalAxisRenderers>
						<mx:verticalAxisRenderers>
							<mx:AxisRenderer labelRenderer="com.enilsson.elephantadmin.views.modules.reporting.base.ModuleAxisLabelRenderer"
								canDropLabels="true" axis="{incomeAmountAxis}"/>
						</mx:verticalAxisRenderers>
						<mx:horizontalAxis>
							<mx:DateTimeAxis id="incomeTimeAxis" title="Date" displayLocalTime="true" alignLabelsToUnits="true" parseFunction="dateParse" labelFunction="dateLabel"/>
						</mx:horizontalAxis>
						<mx:verticalAxis>
							<mx:LinearAxis id="incomeAmountAxis" title="Amount" labelFunction="moneyLabel" />
						</mx:verticalAxis>
						<mx:series>
							<mx:AreaSeries showDataEffect="{slideIn}" xField="date" yField="check" form="segment" displayName="Check"  areaFill="{sc2}"/>
							<mx:AreaSeries showDataEffect="{slideIn}" xField="date" yField="credit" form="segment" displayName="Credit Card" areaFill="{sc1}"/>
							<mx:AreaSeries showDataEffect="{slideIn}" xField="date" yField="paypal" form="segment" displayName="PayPal" areaFill="{sc3}"/>
						</mx:series>
					</mx:AreaChart>
					<mx:Legend dataProvider="{incomeChart}" direction="horizontal"/>
				</mx:VBox>
				<mx:VBox color="#333333" width="100%" height="100%" >
					<mx:AreaChart id="expChart" height="100%" width="100%" itemClick="_presentationModel.chartDateClick(event); drawChartOverlays()"
						paddingLeft="5" paddingRight="5" dataTipFunction="totalTip"
						showDataTips="true" dataProvider="{_presentationModel.totalGraphData}">
						<mx:annotationElements>
							<mx:CartesianDataCanvas id="chartOverlay3" />
						</mx:annotationElements>
						<mx:horizontalAxisRenderers>
							<mx:AxisRenderer labelRenderer="com.enilsson.elephantadmin.views.modules.reporting.base.ModuleAxisLabelRenderer"
								canDropLabels="true" axis="{expTimeAxis}"/>
						</mx:horizontalAxisRenderers>
						<mx:verticalAxisRenderers>
							<mx:AxisRenderer labelRenderer="com.enilsson.elephantadmin.views.modules.reporting.base.ModuleAxisLabelRenderer"
								canDropLabels="true" axis="{expAmountAxis}"/>
						</mx:verticalAxisRenderers>
						<mx:horizontalAxis>
							<mx:DateTimeAxis id="expTimeAxis" title="Date" displayLocalTime="true" alignLabelsToUnits="true" parseFunction="dateParse" labelFunction="dateLabel"/>
						</mx:horizontalAxis>
						<mx:verticalAxis>
							<mx:LinearAxis id="expAmountAxis" title="Amount" labelFunction="moneyLabel" />
						</mx:verticalAxis>
						<mx:series>
							<mx:LineSeries showDataEffect="{slideIn}" xField="date" yField="pledge" form="segment" displayName="Pledged" lineStroke="{s4}"/>
							<mx:AreaSet type="stacked">
								<mx:AreaSeries showDataEffect="{slideIn}" xField="date" yField="expenditure" form="segment" displayName="Expenditure" areaFill="{sc2}"/>
								<mx:AreaSeries showDataEffect="{slideIn}" xField="date" yField="cash" form="segment" displayName="Cash on Hand" areaFill="{sc1}"/>
							</mx:AreaSet>
						</mx:series>
					</mx:AreaChart>
					<mx:Legend dataProvider="{expChart}" direction="horizontal"/>
				</mx:VBox>
			</mx:ViewStack>
		</mx:VBox>
	</mx:HBox>

	<mx:SeriesSlide id="slideIn" duration="600" direction="up"/>

	<mx:CurrencyFormatter id="currencyFormatter" precision="2" currencySymbol="$" useNegativeSign="false" />
	<mx:CurrencyFormatter id="chartCurrencyFormatter" precision="2" currencySymbol="$" useNegativeSign="false" />
	<mx:DateFormatter id="dateFormatter"/>
	<mx:NumberValidator id="numberValidator" source="{expenditure}" property="text"/>

	<mx:Script>
		<![CDATA[
			import com.enilsson.elephantadmin.views.modules.reporting.base.ReportModuleModel;
			import mx.binding.utils.ChangeWatcher;
			import mx.charts.LineChart;
			import mx.charts.ChartItem;
			import mx.charts.series.items.AreaSeriesItem;
			import mx.charts.series.items.LineSeriesItem;
			import mx.charts.chartClasses.CartesianTransform;
			import mx.charts.DateTimeAxis;
			import mx.charts.series.LineSeries;
			import mx.charts.chartClasses.DataTransform;
			import mx.charts.HitData;
			import mx.charts.series.AreaSeries;
			import mx.charts.chartClasses.Series;
			import mx.binding.utils.BindingUtils;
			import mx.charts.LinearAxis;
			import mx.charts.events.ChartItemEvent;
			import mx.core.UITextField;
			import mx.controls.Alert;
			import mx.charts.chartClasses.IAxis;
			import mx.collections.ArrayCollection;
			import com.enilsson.elephantadmin.views.common.IndexBar;
			import mx.core.UIComponent;
			import mx.containers.Canvas;
			import com.enilsson.utils.EDateUtil;
			import mx.utils.ObjectUtil;
			import com.enilsson.elephantadmin.views.modules.reporting.dailyincome.model.DailyIncomeModel;
			import mx.events.DataGridEvent;
			import mx.validators.NumberValidator;
		
			[Bindable]
			override public function get presentationModel() : ReportModuleModel { return _presentationModel; }
			override public function set presentationModel( val : ReportModuleModel ) : void {
				
				if( !val || val == _presentationModel ) return;
								
				super.presentationModel = val;
				
				_presentationModel = val as DailyIncomeModel;
				_presentationModel.init();
				
				if(!_summaryDateWatcher)
					BindingUtils.bindSetter(summaryDateChanged, _presentationModel, 'summaryDate');
				else
					_summaryDateWatcher.reset( _presentationModel );				
			}
			[Bindable] private var _presentationModel : DailyIncomeModel;
			private var _summaryDateWatcher : ChangeWatcher;
			
			private function init():void
			{
				presentationModel = new DailyIncomeModel();
				drawChartOverlays();
			}
			

			private function addExpenditure():void
			{
				if(numberValidator.validate() && Number(expenditure.text) > 0)
				{
					if(_presentationModel.summaryRecord[0].expenditure > Number(expenditure.text))
						Alert.show("You have entered an amount that is less than the previous total", "Error");
					else
						_presentationModel.addExpenditure(Number(expenditure.text));
				}
				else
					Alert.show("You have entered an invalid amount", "Error");
			}

			public function dateParse(timestamp:int):Date { 
				return EDateUtil.timestampToLocalDate(timestamp);
			}

			private function dateLabel(labelValue:Date, previousValue:Date, axis:IAxis):String
			{
				dateFormatter.formatString = "MM/DD/YYYY";
				return dateFormatter.format(labelValue);
			}

			private function moneyLabel(labelValue:Number, previousValue:Number, axis:IAxis):String
			{
				return chartCurrencyFormatter.format(labelValue / 1000) + "K";
			}

			private function totalTip(hd:HitData):String
			{
				var dt:String = "";
				var this_series:Object = hd.element;
				var dataTransform:DataTransform = this_series.dataTransform;
				var vertical_axis:LinearAxis = LinearAxis(dataTransform.getAxis(CartesianTransform.VERTICAL_AXIS));
				var horizontal_axis:DateTimeAxis = DateTimeAxis(dataTransform.getAxis(CartesianTransform.HORIZONTAL_AXIS));
				
				var n:String = this_series.displayName;
				if (n && n != "")
					dt += "<b>" + n + "</b> on ";
				
				var xName:String = horizontal_axis.displayName;
				if (xName != "")
					dt += "<i>" + xName+ ":</i> ";
				
				var xValue:Object = horizontal_axis.formatForScreen(Object(hd.chartItem).xValue);
				dt += xValue + "\n";
				
				var yName:String = vertical_axis.displayName;
				if (yName != "")
					dt += "<i>" + yName + ":</i> ";
				
				if(this_series is LineSeries)
				{
					var yValue:Object = currencyFormatter.format(LineSeriesItem(hd.chartItem).yValue);
					var fulfilPercentage:String = ( Math.round(hd.item.totalContrib / hd.item.pledge * 10000) / 100 )+ "%";
					dt += yValue + "\n";
					dt += fulfilPercentage + " fulfilled";
				}
				else
				{
					var amount:String = currencyFormatter.format(
						hd.item[AreaSeries(this_series).yField]
					);
					var totalAmount:String = currencyFormatter.format(
						hd.item.totalContrib
					);
					var contribPercentage:String = ( Math.round(hd.item[AreaSeries(this_series).yField] / hd.item.totalContrib * 10000) / 100 )+ "%";
					
					dt += "Amount: " + amount + "\n";
					
					dt += "Total: " + totalAmount + "\n";
					dt += contribPercentage + " of Total Contributions";
				}
				
				return dt;
			}

			private function incomeTip(hd:HitData):String
			{
				var dt:String = "";
				var this_series:Object = hd.element;
				var dataTransform:DataTransform = this_series.dataTransform;
				var vertical_axis:LinearAxis = LinearAxis(dataTransform.getAxis(CartesianTransform.VERTICAL_AXIS));
				var horizontal_axis:DateTimeAxis = DateTimeAxis(dataTransform.getAxis(CartesianTransform.HORIZONTAL_AXIS));
				
				var n:String = this_series.displayName;
				if (n && n != "")
					dt += "<b>" + n + "</b> on ";
				
				var xName:String = horizontal_axis.displayName;
				if (xName != "")
					dt += "<i>" + xName+ ":</i> ";
				
				var xValue:Object = horizontal_axis.formatForScreen(Object(hd.chartItem).xValue);
				dt += xValue + "\n";
				
				var yName:String = vertical_axis.displayName;
				if (yName != "")
					dt += "<i>" + yName + ":</i> ";
				
				var amount:String = currencyFormatter.format(
					hd.item[AreaSeries(this_series).yField]
				);
				var totalAmount:String = currencyFormatter.format(
					hd.item.totalContrib
				);
				var contribPercentage:String = ( Math.round(hd.item[AreaSeries(this_series).yField] / hd.item.totalContrib * 10000) / 100 )+ "%";
				
				dt += "Amount: " + amount + "\n";
				
				dt += "Total: " + totalAmount + "\n";
				dt += contribPercentage + " of Total Contributions";
				
				return dt;
			}

			private function summaryDateChanged(object:Object):void
			{
				drawChartOverlays();
			}

			private function drawChartOverlays():void
			{
				chartOverlay1.clear();
				chartOverlay1.lineStyle(2,0,0.5);
				chartOverlay1.beginFill(0);
				chartOverlay1.moveTo(EDateUtil.localDateToTimestamp(_presentationModel.summaryDate), 0);
				chartOverlay1.lineTo(EDateUtil.localDateToTimestamp(_presentationModel.summaryDate), LinearAxis(totalChart.verticalAxis).maximum);

				chartOverlay2.clear();
				chartOverlay2.lineStyle(2,0,0.5);
				chartOverlay2.beginFill(0);
				chartOverlay2.moveTo(EDateUtil.localDateToTimestamp(_presentationModel.summaryDate), 0);
				chartOverlay2.lineTo(EDateUtil.localDateToTimestamp(_presentationModel.summaryDate), LinearAxis(incomeChart.verticalAxis).maximum);

				chartOverlay3.clear();
				chartOverlay3.lineStyle(2,0,0.5);
				chartOverlay3.beginFill(0);
				chartOverlay3.moveTo(EDateUtil.localDateToTimestamp(_presentationModel.summaryDate), 0);
				chartOverlay3.lineTo(EDateUtil.localDateToTimestamp(_presentationModel.summaryDate), LinearAxis(expChart.verticalAxis).maximum);
			}
		]]>
	</mx:Script>

</module:ReportModule>
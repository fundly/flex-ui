<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas clipContent="false"
	xmlns:mx="http://www.adobe.com/2006/mxml"
	horizontalScrollPolicy="off" verticalScrollPolicy="off">
	
	<mx:AreaChart id="myFundRaising"
		styleName="fundraisingChart"
		dataProvider="{presentationModel.chart.chartData}"
		show="addGoalLine()" 
		height="{this.height - 30}" 
		width="{this.width}" top="5"
        showDataTips="true"
        dataTipFunction="chartDataTips"
        >
        <mx:horizontalAxis>
            <mx:CategoryAxis categoryField="label" />
        </mx:horizontalAxis>
		<mx:verticalAxis>
        	<mx:LinearAxis labelFunction="linearAxis_labelFunc" />
    	</mx:verticalAxis>
        <mx:series>
            <mx:AreaSeries yField="cPledge" form="segment" displayName="Pledges" showDataEffect="slideIn">
            	<mx:areaFill>
            		<mx:LinearGradient angle="0">
            			<mx:GradientEntry color="#ffde47" ratio="0"  />
            			<mx:GradientEntry color="#ff3f00" ratio="1" />
            		</mx:LinearGradient>
            	</mx:areaFill>
            </mx:AreaSeries>
            <mx:AreaSeries yField="cReceived" form="segment" displayName="Donations" showDataEffect="slideIn">
            	<mx:areaFill>
            		<mx:LinearGradient angle="180">
            		    <mx:GradientEntry color="#77be30" ratio="0" />
            			<mx:GradientEntry color="#cef47d" ratio="1"  />
            		</mx:LinearGradient>
            	</mx:areaFill>
            </mx:AreaSeries>
        </mx:series>
    </mx:AreaChart>
    
    <mx:Legend id="chartLegend" visible="false"
    	styleName="chartLegend"
    	bottom="0" right="30">
        <mx:LegendItem label="Pledges">
        	<mx:fill>
				<mx:LinearGradient angle="270">
					<mx:GradientEntry color="#ffde47" ratio="0" />
					<mx:GradientEntry color="#ff3f00" ratio="1"  />
				</mx:LinearGradient>
           	</mx:fill>
           	<mx:stroke>
            	<mx:Stroke color="0xCCCCCC" weight="1"/>
           	</mx:stroke>
        </mx:LegendItem>
        <mx:LegendItem label="Contributions">
        	<mx:fill>
				<mx:LinearGradient angle="90">
					<mx:GradientEntry color="#77be30" ratio="0" />
					<mx:GradientEntry color="#cef47d" ratio="1"  />
				</mx:LinearGradient>
           	</mx:fill>
           	<mx:stroke>
            	<mx:Stroke color="0xCCCCCC" weight="1"/>
           	</mx:stroke>
        </mx:LegendItem>
        <mx:LegendItem label="My Fundraising Goal">
        	<mx:fill>
           		<mx:SolidColor color="0x870095"/>
           	</mx:fill>
           	<mx:stroke>
            	<mx:Stroke color="0xCCCCCC" weight="2"/>
           	</mx:stroke>
     	</mx:LegendItem>
	</mx:Legend>

<!--	<mx:HSlider id="chartRange" 
		thumbCount="2" snapInterval="1" minimum="0"
		change="sliderChangeHandler()" 
		labels="{[presentationModel.chart.firstLabel, presentationModel.chart.lastLabel]}"
		values="{[presentationModel.chart.startMonth, presentationModel.chart.endMonth]}" 
		maximum="{presentationModel.chart.fundraising.length -1}"
		width="25%" bottom="-20" left="40" 
		showTrackHighlight="true"
		dataTipFormatFunction="chartRangeDataTip" showDataTip="true" 
		labelStyleName="rangeLabelStyle" labelOffset="25"/>
	<mx:Text text="Drag sliders to set month range" 
		styleName="sliderText" 
		bottom="-2" left="{chartRange.x + chartRange.width + 10}" />
-->
	
	<mx:SeriesSlide id="slideIn" duration="600" direction="up"/>
	<mx:CurrencyFormatter id="cF" precision="2" currencySymbol="$" useNegativeSign="false" />

	<mx:Script>
		<![CDATA[
			import mx.charts.chartClasses.IAxis;
			import mx.utils.ObjectUtil;
			import mx.managers.PopUpManager;
			import com.enilsson.elephanttrakker.utils.AppUtils;
			import org.osflash.thunderbolt.Logger;
			import mx.charts.chartClasses.CartesianDataCanvas;
			import mx.collections.ArrayCollection;
			import mx.charts.HitData;
			import mx.charts.events.ChartItemEvent;
			import com.enilsson.elephantadmin.models.EAModelLocator;
			import com.enilsson.elephantadmin.views.modules.reporting.host_committee.model.HostCommitteeModel;

			[Bindable] public var presentationModel : HostCommitteeModel;
			
			private var goalLine:CartesianDataCanvas = new CartesianDataCanvas();

			public function set dataProvider(data:ArrayCollection):void
			{
				_dataProvider = data;
				addGoalLine();
			}
			[Bindable] private var _dataProvider:ArrayCollection;

			/**
			 * Reset the chart data when the slider changes, but only if there is session data available
			 */
/* 			private function sliderChangeHandler():void
			{
				if(_dataProvider.length > 0)
					gateChartData(chartRange.values);
			}
 */
			/**
			 * Limit the chart data according to what is set in the slider
			 */
/* 			private function gateChartData(months:Array):void
			{
				var startMonth:Number = months[0];
				var endMonth:Number = months[1];
				var numMonths:Number = presentationModel.chart.fundraising.length;
				var chartData:ArrayCollection = new ArrayCollection();
				for(var i:Number = 0; i<numMonths; i++){
					if(i > startMonth - 1 && i < endMonth + 1){
						chartData.addItem(presentationModel.chart.fundraising[i]);						
					}
				}
				
				presentationModel.chart.chartData = chartData;
				
				addGoalLine();
				
				presentationModel.chart.startMonth = startMonth;
				presentationModel.chart.endMonth = endMonth;
			}
 */
			/**
			 * Add the goal line to the chart
			 */
			public function addGoalLine():void
			{
			    if(presentationModel.eventSelectedIndex != -1)
			    {
				// check to see if the fundraising data has been returned yet	
				if (!presentationModel.chart.fundraising)  {
					this.callLater(addGoalLine);
					return;
				}

				    goalLine.includeInRanges = true;
				    goalLine.toolTip = "Fundraising Goal: " + cF.format(presentationModel.eventFilter[presentationModel.eventSelectedIndex].fundraising_goal);		        
				    goalLine.clear();
				    goalLine.lineStyle(
				    	3, 
				        0x870095,
				        1, 
				        true, 
				        LineScaleMode.NORMAL, 
				        CapsStyle.ROUND, 
				        JointStyle.MITER, 
				        2
				    );
				    
	 			    var start:String = _dataProvider[0].label;
				    var end:String = _dataProvider[_dataProvider.length -1].label;
				    
					    goalLine.moveTo(start, presentationModel.eventFilter[presentationModel.eventSelectedIndex].fundraising_goal);
					    goalLine.lineTo(end, presentationModel.eventFilter[presentationModel.eventSelectedIndex].fundraising_goal);
				}
				    
				    myFundRaising.annotationElements = [goalLine];
			}
			
			/**
			 * Build the datatips for the chart data
			 */
			private function chartDataTips(hitData:HitData):String
			{
				var seriesName:String = AreaSeries(hitData.element).displayName;
				var dt:String = '';
				
				dt += '<b><font face="Lucida Grande">' + seriesName + '</font></b><br>';
				dt += '<font face="Lucida Grande">Month</font><font face="Lucida Grande">: ' + hitData.item.label + '</font><br>';
				dt += '<font face="Lucida Grande">Donors</font><font face="Lucida Grande">: ' + hitData.item.Donors + '</font><br>';
				
				if(seriesName == 'Pledges')
					dt += '<font face="Lucida Grande">Pledged</font><font face="Lucida Grande">: $' + hitData.item.Pledge + '</font><br>';
				else
					dt += '<font face="Lucida Grande">Contributed</font><font face="Lucida Grande">: $' + hitData.item.Received + '</font><br>';
								
				return dt;	        	
			}
			
			/**
			 * Set the slider datatip
			 */
			private function chartRangeDataTip(sliderItem:Number):String
			{
				return presentationModel.chart.fundraising[sliderItem].label;
			}	
			

			/**
			 * Format the linear axis labels
			 */
			private function linearAxis_labelFunc(item:Object, prevValue:Object, axis:IAxis):String 
			{
				if(presentationModel)
				{
	                if(presentationModel.chart.chartData.length == 0)
	                {
		                if( item > 1000 )
		                	return '$' + item.toString().substr(0, -3) + 'K';
		                else
		                    return cF.format(item);
	                }
	                else
	                {                
		                var totalPledged:Number = presentationModel.chart.chartData[presentationModel.chart.chartData.length -1].cPledge;
		                
		                if(totalPledged > 10000)
			            { 
			                if( item > 1000 )
			                	return '$' + item.toString().substr(0, -3) + 'K';
			                else
			                    return cF.format(item);
			            }
			            else
			              return cF.format(item);
	                }
	   			}
	   			else
	   				return String(item);
            }

		]]>
	</mx:Script>	
		
</mx:Canvas>
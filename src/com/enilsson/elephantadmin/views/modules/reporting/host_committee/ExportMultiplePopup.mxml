<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas 
	xmlns:mx="http://www.adobe.com/2006/mxml"
	clipContent="true"
	verticalScrollPolicy="off" horizontalScrollPolicy="off"
	xmlns:graphics="com.enilsson.graphics.*" 
	xmlns:common="com.enilsson.elephantadmin.views.common.*"
	width="670" 
	height="400">

	<mx:Canvas left="0" top="10" 
		styleName="popupContent" 
		verticalScrollPolicy="off" horizontalScrollPolicy="off"
		filters="{[com.enilsson.graphics.enDropShadows.standardDS()]}" 
		width="{this.width-10}" height="{this.height-10}">
		<mx:VBox verticalGap="0" 
			width="{width-40}" height="{height-40}"
			backgroundColor="#FFFFFF" 
			top="15" left="15" 
			fontSize="11">
			<mx:Canvas backgroundColor="#999999"
				width="100%" height="37">
				<mx:Text id="supportDesc" 
					fontSize="18" 
					width="100%"
					filters="{[com.enilsson.graphics.enDropShadows.textDS(0x333333)]}"
					text="Export multiple Event Host Committee Reports" 
					verticalCenter="0" left="5" />
			</mx:Canvas>
			<mx:HBox width="100%" styleName="controlBar" paddingLeft="3" paddingTop="3" paddingRight="3" paddingBottom="3" horizontalGap="5" verticalAlign="middle">
				<mx:FormItem label="Export reports of events between">
					<mx:DateField id="range_start" width="100" color="#000000" formatString="MM/DD/YYYY" selectedDate="{startDate}" change="startDate = event.target.selectedDate" textAlign="center" />
				</mx:FormItem>
				<mx:FormItem label="and">
					<mx:DateField id="range_end" width="100" color="#000000" formatString="MM/DD/YYYY" selectedDate="{endDate}" change="endDate = event.target.selectedDate" textAlign="center" />
				</mx:FormItem>
				<mx:Spacer width="100%" />
				<mx:Button width="80" label="Export" click="export()" color="#000000" />
			</mx:HBox>
			<mx:DataGrid id="eventsGrid" width="100%" height="100%" editable="true">
				<mx:columns>
					<mx:DataGridColumn width="50" dataField="selected" editorDataField="selected" rendererIsEditor="true" headerText="Select" sortable="false" editable="true" itemRenderer="mx.controls.CheckBox" textAlign="center"/>
					<mx:DataGridColumn editable="false" dataField="name" headerText="Event Name"/>
					<mx:DataGridColumn width="80" editable="false" dataField="source_code" headerText="Source Code" />
					<mx:DataGridColumn width="60" editable="false" dataField="date_time" headerText="Date" labelFunction="dateLabel"/>
					<mx:DataGridColumn width="100" editable="false" dataField="fundraising_goal" headerText="Event Goal" labelFunction="moneyLabel"/>
				</mx:columns>
			</mx:DataGrid>
			
		</mx:VBox>
		
	</mx:Canvas>
	
	<graphics:enCloseBtn top="0" right="0" size="20" click="closeComponent()" />

	<mx:Fade id="fadeIn" alphaTo="1" duration="300" />
	<mx:Fade id="fadeOut" alphaTo="0" duration="300" />
	<mx:CurrencyFormatter id="currencyFormatter" precision="2" currencySymbol="$" useNegativeSign="false" />
	<mx:DateFormatter id="dateFormatter" />

	<mx:Metadata>
		[Event(name="export", type="")]
	</mx:Metadata>

	<mx:Script>
		<![CDATA[
			import mx.controls.Alert;
			import com.enilsson.elephantadmin.views.modules.reporting.host_committee.events.ExportEvent;
			import mx.controls.CheckBox;
			import mx.collections.Sort;
			import mx.collections.SortField;
			import com.enilsson.utils.EDateUtil;
			import mx.collections.ArrayCollection;
			import mx.managers.PopUpManager;

			public function set startDate(value:Date):void
			{
				_startDate = value;
				dateRangeChanged();
			}
			private var _startDate:Date = new Date(new Date().getFullYear(),new Date().getMonth(),new Date().getDate() - 7);
			[Bindable] public function get startDate():Date
			{
				return _startDate;
			}
			public function set endDate(value:Date):void
			{
				_endDate = value;
				dateRangeChanged();
			}
			private var _endDate:Date = new Date(new Date().getFullYear(),new Date().getMonth(),new Date().getDate());
			[Bindable] public function get endDate():Date
			{
				return _endDate;
			}

			[Bindable] private var filteredEventsCol:ArrayCollection;
			
			[Bindable] public function get dataProvider():ArrayCollection
			{
				return _dataProvider;
			}
			private var _dataProvider:ArrayCollection;
			public function set dataProvider(value:ArrayCollection):void
			{
				_dataProvider = value;
				dateRangeChanged();
			}

			private function dateRangeChanged():void
			{
				filteredEventsCol = new ArrayCollection();
				var startTimestamp:int = EDateUtil.dateToTimestamp(startDate);
				var endTimestamp:int = EDateUtil.dateToTimestamp(endDate) + 84600;

				for each(var item:Object in _dataProvider)
				{
					if(item.date_time >= startTimestamp && item.date_time < endTimestamp)
					{
						item.selected = true;
						filteredEventsCol.addItem(item);
					}
				}

				var dataSortField:SortField = new SortField();
				dataSortField.name = "date_time";
				dataSortField.numeric = true;
				var numericDataSort:Sort = new Sort();
				numericDataSort.fields = [dataSortField];

				filteredEventsCol.sort = numericDataSort;
				filteredEventsCol.refresh();

				eventsGrid.dataProvider = filteredEventsCol;
			}

			private function dateLabel(item:Object, column:DataGridColumn):String 
			{
				dateFormatter.formatString = "MM/DD/YY"
				return dateFormatter.format(EDateUtil.dateFromTimestamp(item[column.dataField]));
			}

			private function moneyLabel(item:Object, column:DataGridColumn):String {
				return currencyFormatter.format(item[column.dataField]);
			} 

			private function export():void
			{
				var exportEventIDs:Array = [];
				for each(var item:Object in filteredEventsCol)
				{
					if(item.selected == true)
						exportEventIDs.push(item.id);
				}
				if(exportEventIDs.length > 0)
					dispatchEvent(new ExportEvent(ExportEvent.EXPORT_IDS, exportEventIDs));
				else
					Alert.show("There are no events to export!","Error");
			}

			private function closeComponent():void
			{
				dispatchEvent(new Event(Event.CLOSE));
			}

		]]>
	</mx:Script>

</mx:Canvas>
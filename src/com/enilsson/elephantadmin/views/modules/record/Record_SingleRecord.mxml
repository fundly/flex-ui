<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas verticalScrollBarStyleName="smallScrollBar"
	xmlns:mx="http://www.adobe.com/2006/mxml"
	xmlns:struktorForm="com.enilsson.utils.struktorForm.*"
	xmlns:common="com.enilsson.elephantadmin.views.common.*">
	
	<mx:Script>
		<![CDATA[
			import com.enilsson.utils.EDateUtil;
			import mx.events.ItemClickEvent;
			import mx.utils.ObjectUtil;
			import com.enilsson.utils.eNilssonUtils;
			import org.osflash.thunderbolt.Logger;
			import mx.controls.dataGridClasses.DataGridColumn;
			import mx.controls.DataGrid;
			import com.enilsson.containers.WindowShade;
			import com.enilsson.elephantadmin.models.EAModelLocator;
			
			[Bindable] private var _model:EAModelLocator = EAModelLocator.getInstance();

			/**
			 * Call the function to build the datagrid content
			 */
			public function buildTables():void
			{
				var table_name:String = _model.record.layout.table_name;
				
				//Logger.info('Struktor Layout', ObjectUtil.toString(_model.struktorLayout));
				
				tables.removeAllChildren();
				
				for(var fieldname:String in _model.record.tree) 
				{					
					if(_model.record.tree[fieldname] == null) continue;
					
					if ((fieldname == "created_by") || (fieldname == "modified_by"))
						//if(_model.debug) Logger.info(fieldname);
					{}
					else 
					{ 
						if (!(_model.record.tree[fieldname] is String)) 
						{
							Logger.info('Field Name', fieldname);
							
							// build the tables with foreign_keys listed in this table
							for(var fk:String in _model.record.layout.foreign_keys) 	
								if (fk == fieldname)
									buildDataGrid(_model.struktorLayout[_model.record.layout.foreign_keys[fk].table],fieldname);
							
							// build the tables that have foreign keys point to this table
							if (_model.struktorLayout.hasOwnProperty(fieldname))
								buildDataGrid(_model.struktorLayout[fieldname]);
						}
					}
				}
			}
			
			/**
			 * Build the datagrid header rows and columns from the layout file
			 */
			private function buildDataGrid(table_data:Object, fk:String = null):void
			{
				if(!table_data.hasOwnProperty('title')) return;
				
				var box:WindowShade = new WindowShade();
				box.styleName = 'tblWindowShade';
				box.percentWidth = 100;
				 	
				box.label = table_data.title;
				
				var dg:DataGrid = new DataGrid();
				dg.id = table_data.table + "DG";
				dg.percentWidth = 100;
				dg.styleName = 'greyGrid';
				 
				var cols:Array = dg.columns;
			
				var actionCol:DataGridColumn = new DataGridColumn();
				actionCol.headerText = '';
				actionCol.width = 18;
				actionCol.dataField = 'sid';
				actionCol.itemRenderer = new tableActionRenderer();
				cols.push(actionCol);
				
				var fields:Object = table_data.fields;
				
				for(var i:String in fields)
				{
					if(fields[i].in_sql)
					{
						var dgCol:DataGridColumn = new DataGridColumn();
						dgCol.headerText = fields[i].label;
						dgCol.minWidth = 40;
						switch(fields[i].type){
							case 'date' :
								dgCol.dataField = fields[i].fieldname + '_plain';
							break;
							default :
								dgCol.dataField = fields[i].fieldname;
							break;
						}			
						cols.push(dgCol);
					}		
				}
				
				dg.columns = cols;	

				eNilssonUtils.parseAMFDataForDG(((fk != null) ? _model.record.tree[fk] : _model.record.tree[table_data.table]), dg);
				
				dg.rowCount = dg.dataProvider.length;
				
				box.addChild(dg);
				
				tables.addChild(box);
			}
			
			private function openCloseTables(e:ItemClickEvent):void
			{
				var action:Boolean = e.item.action;
				
				for(var i:int=0; i<tables.numChildren; i++){
					var child:* = tables.getChildAt(i);
					if(child is WindowShade){	
						child.opened = action;
					}
				}
			}
			
			/**
			 * Label function to show the date in the correct format
			 */
			private function date_labelFunc(item:Number):String 
			{
		  		return df.format( EDateUtil.timestampToLocalDate( item ) );
			} 			
		]]>
	</mx:Script>
	
	<mx:DateFormatter id="df" formatString="MM/DD/YY L:NN A" />
	
	<mx:HBox top="0" left="0"
		width="100%" height="31" 
		styleName="singleRecordHeader">
		<mx:Image source="{_model.record.icon}" height="31" />
		<mx:Text text="{_model.record.layout.title} Record - SID: {_model.record.sid}" />
	</mx:HBox>

	<mx:TabNavigator creationPolicy="all"
		top="4" 
		tabOffset="-15" horizontalAlign="right" 
		width="100%" height="100%">
		<mx:VBox width="100%" label="CURRENT" horizontalAlign="center" verticalGap="0">
			<mx:Canvas styleName="recordOwners" width="90%" height="20">
				<mx:Text text="Created By: {_model.record.tree.created_by} ({date_labelFunc(_model.record.tree.created_on)})"
					verticalCenter="0" left="10" />
				<mx:Text text="Modified By: {_model.record.tree.modified_by} ({date_labelFunc(_model.record.tree.modified_on)})"
					verticalCenter="0" right="10" />
			</mx:Canvas>
			<mx:Spacer height="17" />
			<struktorForm:StruktorForm id="recordForm"
				styleName="processingForm"
				dataProvider="{_model.record.tree}"
				layoutProvider="{_model.record.layout}" 
				numColumns="2" 
				height="390" maxHeight="390" width="96%" 
				debugMode="true"
				formBuildComplete="buildTables()"
				/>
			<mx:HBox styleName="footerBtnBox"
				width="100%" height="31">
				<common:RestrictedCMSSubmitBtn
					label="UPDATE"
					toolTip="{recordForm.isValid ? 'This form is ready to submit' : 'Please correctly fill in all form fields'}" 
					enabled="{recordForm.isValid}"
					 />
			</mx:HBox>
		</mx:VBox>
		
		<mx:VBox label="ASSOCIATED"
			width="100%" height="100%" >
			<mx:Canvas width="100%">
				<mx:LinkBar linkButtonStyleName="openCloseBtns"
					right="10" 
					itemClick="openCloseTables(event)">
					<mx:dataProvider>
						<mx:Array>
							<mx:Object label="Open All" action="true" />
							<mx:Object label="Close All" action="false" />
						</mx:Array>
					</mx:dataProvider>
				</mx:LinkBar>
			</mx:Canvas>
			<mx:VBox id="tables" width="100%" verticalGap="10" />			
		</mx:VBox>
		
	</mx:TabNavigator>
	
</mx:Canvas>
<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas 
	xmlns:mx="http://www.adobe.com/2006/mxml" 
	xmlns:graphics="com.enilsson.graphics.*" 
	xmlns:common="com.enilsson.elephantadmin.views.common.*"
	xmlns:struktorForm="com.enilsson.utils.struktorForm.*">
	
	<mx:Canvas left="0" top="10" 
		styleName="popupContent" 
		verticalScrollPolicy="off" horizontalScrollPolicy="off"
		filters="{[com.enilsson.graphics.enDropShadows.standardDS()]}" 
		width="{this.width-10}" height="{this.height-10}">
		
		<mx:VBox width="{width - 30}" height="{height - 30}"
			top="10" left="10"
			verticalGap="0">
			
			<mx:Text text="Add a refund to this pledge" styleName="refundTitle" />
			
			<mx:HBox styleName="refundDesc" verticalAlign="middle">
				<mx:Text text="Pledge Amount: {cf.format(presentationModel.selectedRecord.pledge_amount)}" />
				<mx:VRule height="10" />
				<mx:Text text="Contributed Amount: {cf.format(presentationModel.selectedRecord.contrib_total)}" />
			</mx:HBox>
			
			<mx:Spacer height="10" />
			
			<mx:TabNavigator id="refundMethods"
				styleName="optionsTabNav"
				tabOffset="-15" horizontalAlign="right" tabWidth="65"
				width="{width - 30}" height="100%">			
				<mx:VBox label="Check" horizontalAlign="center" styleName="refundText">
					<mx:Text width="90%" 
						htmlText="This will add a refund to the desired amount as a check contribution from the campaign to the donor. Please note you can not exceed the current contributed amount of &lt;b&gt;{cf.format(presentationModel.selectedRecord.contrib_total)}&lt;/b&gt;." />
					<struktorForm:StruktorForm id="refundCheckForm"
						styleName="processingForm"
						layoutProvider="{presentationModel.checkLayout}"
						selectedFields="{['amount','full_name','entry_date','check_num','comments']}"
						formBuildComplete="handleFormBuildComplete(event)">
					</struktorForm:StruktorForm>
				</mx:VBox>
			</mx:TabNavigator>
			
			<mx:Spacer height="10" />
			
			<mx:HBox width="100%" horizontalAlign="center">
				<common:RestrictedCreateBtn id="refundSubmit"
					label="SUBMIT"
					enabled="{ (refundMethods.selectedIndex == 0 ? refundCheckForm.isValid : false) }"
					toolTip="{refundSubmit.enabled ? 'This form is ready to submit!' : 'Please enter all required fields!'}"
					click="handleSubmitClick(event)" />				
			</mx:HBox>
			
		</mx:VBox>

	</mx:Canvas>
	<graphics:enCloseBtn top="0" right="0" size="20" click="closeComponent()" />

	<common:ErrorMsgBox id="errorBox"
		verticalCenter="0" horizontalCenter="0" 
		params="{presentationModel.refundError}" />

	<mx:CurrencyFormatter id="cf" 
		currencySymbol="$"
		precision="2" />

	<mx:states>
		<mx:State name="fundTypeSelection">
			<mx:AddChild relativeTo="{refundCheckForm}">
				<mx:FormItem label="Fund Type" paddingLeft="20">
					<mx:ComboBox id="fundTypeCb"
						dataProvider="{presentationModel.fundTypeInput.dataProvider}"
						selectedItem="{presentationModel.fundTypeInput.selectedItem}"
						change="handleFundTypeChange(event)" />						
				</mx:FormItem>
			</mx:AddChild>
		</mx:State>
	</mx:states>

	<mx:Style>
		.refundTitle {
			fontSize: 16;
			fontWeight: bold;	
		}
		.refundDesc {
			fontSize: 10;
		}		
		.refundText {
			fontSize: 10;
			color: #333333;
		}				
		.refundMethods {
			backgroundColor: #FFFFFF;	
		}
	</mx:Style>


	<mx:Script>
		<![CDATA[
			import mx.controls.ComboBox;
			import mx.containers.FormItem;
			import com.enilsson.elephantadmin.views.modules.pledges.model.PledgesModel;
			import com.enilsson.elephantadmin.views.modules.users.model.UsersModel;
			import mx.utils.ObjectUtil;
			import mx.managers.PopUpManager;
			import mx.controls.CheckBox;
			import mx.containers.HBox;
			import mx.controls.Text;
			import mx.collections.ArrayCollection;
			import org.osflash.thunderbolt.Logger;
			import com.enilsson.elephantadmin.models.EAModelLocator;

			[Bindable] public var presentationModel:PledgesModel;
			
			private function handleFundTypeChange( event : Event ) : void {
				if( event.currentTarget.selectedIndex < 0 )
					event.currentTarget.selectedIndex = 0;
			}
			
			private function handleFormBuildComplete(event : Event ) : void {
				// if the pledge has split contributions, add the fund type selection for the refund.
				if(presentationModel.noSplitContributions == false)
					this.currentState = "fundTypeSelection";				
			}
			
			private function handleSubmitClick( event : Event ) : void {
				var fundType : String;
				
				if(fundTypeCb)
					fundType = fundTypeCb.selectedLabel;
				
				presentationModel.addCheckRefund( refundCheckForm.formVariables, fundType );
			}
			
			private function closeComponent():void
			{
				PopUpManager.removePopUp(this);
			}
				
		]]>
	</mx:Script>

</mx:Canvas>	
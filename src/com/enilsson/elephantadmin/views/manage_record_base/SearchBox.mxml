<?xml version="1.0" encoding="utf-8"?>
<mx:VBox 
	xmlns:mx="http://www.adobe.com/2006/mxml" 
	xmlns:graphics="com.enilsson.graphics.*" 
	xmlns:common="com.enilsson.elephantadmin.views.common.*" 
	xmlns:controls="com.enilsson.controls.*"
	verticalGap="0">
	
	<mx:Canvas id="header" 
		styleName="searchBarBackground"
		width="100%" height="32">
		<mx:Text id="recordsDesc"
			htmlText="{presentationModel.recordsText}"
			verticalCenter="0" left="5" 
			fontSize="10"
			color="#FFFFFF" />
		<graphics:enCloseBtn id="clearSearch" 
			visible="{presentationModel.showClearSearchBtn}" 
			toolTip="Clear Browse" 
			click="presentationModel.clearSearch()" 
			verticalCenter="0" right="65"
			size="20" dropShadow="false" />
		<common:ListGridToggle right="6" verticalCenter="0" 
			stateChange="searchListViewStack.selectedIndex = event.currentTarget.showState == ListGridToggle.LIST ? 0 : 1;" />
	</mx:Canvas>
	
	<mx:ViewStack id="searchListViewStack"
		selectedIndex="0" creationPolicy="all"
		width="100%" height="100%">
		<mx:HBox id="indexList" 
			width="100%" height="100%" 
			horizontalGap="0">
			<mx:List id="moduleList"
				width="100%" height="100%" 
				dataProvider="{presentationModel.records}" 
				itemRenderer="{presentationModel.config.searchListItemRenderer}"
				selectedIndex="{presentationModel.searchListSelectedIndex}"
				variableRowHeight="true" 
				alternatingItemColors="[#e0e0e0, #e7e7e7]"
				borderStyle="none"
				change="presentationModel.searchListSelectedIndexChange(event)" />
			<common:IndexBar height="100%" 
				indexSearch="presentationModel.indexSearch( event.currentTarget.searchLetter )" />
		</mx:HBox>
		<mx:HBox id="indexGrid"
			width="100%" height="100%" 
			horizontalGap="0">
			<mx:DataGrid id="moduleDataGrid"
				width="100%" height="100%" 
				selectedIndex="{presentationModel.searchListSelectedIndex}"
				variableRowHeight="true" 
				alternatingItemColors="[#e0e0e0, #e7e7e7]"
				borderStyle="none"
				headerRelease="sortAction(event)"
				change="presentationModel.searchListSelectedIndexChange(event)" />
			<common:IndexBar height="100%" 
				indexSearch="presentationModel.indexSearch( event.currentTarget.searchLetter )" />
		</mx:HBox>		
	</mx:ViewStack>

		
	<mx:Canvas id="paginationBox"
		styleName="paginationBox" 
		height="0" width="100%"
		visible="{presentationModel.searchListItemsTotal &gt; presentationModel.itemsPerPage}"
		showEffect="slideUp" hideEffect="slideDown">
		
		<controls:Paginator id="paginator" 
			styleName="paginator" 
			rangeCount="4" 
			verticalCenter="0" horizontalCenter="0" 
			buttonHeight="18" 
			newPage="presentationModel.newPage( paginator.selectedIndex )" 
			itemsPerPage="{presentationModel.itemsPerPage}" 
			itemsTotal="{presentationModel.searchListItemsTotal}" />
		
	</mx:Canvas>
	
	<mx:Canvas id="footer" 
		styleName="searchBarBackground"
		width="100%" height="32">
		<common:ListSearchBox id="searchBox" 
			verticalCenter="0" left="5" 
			height="20" width="{width * 2/3}" 
			color="#333333" 
			dataProvider="{presentationModel.config.searchOptions}"
			searchStart="presentationModel.searchRecords( searchBox.searchBox.searchTerm, searchBox.searchOption )" 
			clearSearch="presentationModel.clearSearch()" />
		<common:RestrictedCreateBtn 
			id="addButton"
			verticalCenter="0" right="10"
			visible="{presentationModel.allowAddNewRecord}"
			label="{presentationModel.addNewRecordLabel}"
			click="this.dispatchEvent(new Event(ADD_RECORD))" />
	</mx:Canvas>

	<mx:Resize id="slideUp" heightTo="35" duration="1000" />
	<mx:Resize id="slideDown" heightTo="0" duration="1000" />	

	<mx:CurrencyFormatter id="cf" precision="2" />
	<mx:DateFormatter id="df" formatString="MM/DD/YY" />

	<mx:Metadata>
		[Event(name="addRecord", type="flash.events.Event")]
	</mx:Metadata>
	
	<mx:Binding source="presentationModel.records" destination="this.dataGridFields" />

	<mx:Script>
		<![CDATA[
			import com.enilsson.elephantadmin.views.common.PledgeRefundedDecorator;
			import com.enilsson.elephantadmin.views.common.ListGridToggle;
			import com.enilsson.utils.EDateUtil;
			import mx.events.DataGridEvent;
			import mx.utils.ObjectUtil;
			import mx.controls.dataGridClasses.DataGridColumn;
			import mx.collections.ArrayCollection;
			import com.enilsson.elephantadmin.views.manage_record_base.model.RecordModel;
			import org.osflash.thunderbolt.Logger;
			
			static public const ADD_RECORD:String = 'addRecord';
			
			[Bindable] public var presentationModel:RecordModel;
			
			private var sortOrder:String = '';
			private var sortActions:Object = { 'created_on' : 'DESC' };
			
			[Bindable] private var _itemRenderer:IFactory;
			public function set itemRenderer ( value:IFactory ):void
			{
				_itemRenderer = value;
			}
			
			public function get itemRenderer ( ):IFactory
			{
				return _itemRenderer;
			}
			
			public function set dataGridFields ( value:ArrayCollection ):void
			{
				// do nothing if some variables havent been set yet
				if( !presentationModel ) return;
				if( presentationModel.records.length == 0) return;
				
				// if the grid is already built simply assign the data provider
				if( moduleDataGrid.columnCount > 0)
				{
					moduleDataGrid.dataProvider = presentationModel.records;
					return;
				}
				
				var cols:Array = [];
				var dgCol:DataGridColumn;
				var f : Object;
				
				if( presentationModel.config.gridFields != null )
				{
					for ( var i:String in presentationModel.config.gridFields )
					{
						var field:String = presentationModel.config.gridFields[i];
						
						dgCol = new DataGridColumn();
						dgCol.dataField = field;
						
						f = presentationModel.fields[field];
						
						if( field == "pledgewarning" ) {
							dgCol.itemRenderer = new ClassFactory(PledgeRefundedDecorator);
							dgCol.width = 14;
							dgCol.resizable = false;
							dgCol.sortable = false;
						}
						
						if( f && f.hasOwnProperty('label') )
							dgCol.headerText = f.label;
						else
							dgCol.headerText = "";	
							
						if( f && f.hasOwnProperty('type') ) {					
							switch(f.type)
							{
								case 'utc_date' :
									dgCol.labelFunction = utcDateLabel;
								break;
								case 'date' :
									dgCol.labelFunction = dateLabel;
								break;
								case 'currency' :								
									dgCol.labelFunction = currencyLabel;
								break;
							}
						}
						cols.push(dgCol);
					}		
				}
				else
				{
					for each( f in presentationModel.fields )
					{
						if( !f.hasOwnProperty('in_sql') ) continue;
						if( f.in_sql != true ) continue;
						
						dgCol = new DataGridColumn();
						dgCol.headerText = f.label;
						dgCol.minWidth = 40;
						dgCol.dataField = f.fieldname;
						
						switch(f.type)
						{
							case 'utc_date' :
								dgCol.labelFunction = utcDateLabel;
							break;
							case 'date' :							
								dgCol.labelFunction = dateLabel;
							break;
							case 'currency' :
								dgCol.labelFunction = currencyLabel;
							break;
						}
						cols.push(dgCol);
					}		
				}

				moduleDataGrid.columns = cols;
				moduleDataGrid.dataProvider = presentationModel.records;
				
				// set the sort order
				sortOrder = presentationModel.table + '.created_on DESC';
				sortActions = { 'created_on' : 'DESC' };				
			}	
			
			private function utcDateLabel( item:Object, column:DataGridColumn ):String
			{
				return df.format( EDateUtil.timestampToLocalDate(item[column.dataField]) );
			}
			
			private function dateLabel(item:Object, column:DataGridColumn):String
			{
				return df.format( EDateUtil.timestampToLocalDate( item[column.dataField] ) );
			}
			
			private function currencyLabel(item:Object, column:DataGridColumn):String
			{
				return cf.format( item[column.dataField] );
			}
			
			private function sortAction( e:DataGridEvent ):void
			{
				if (presentationModel.dataLoading) {
					e.preventDefault();
					return;
				}
				
				var grid:DataGrid = e.currentTarget as DataGrid;
			 	
			 	if (presentationModel.searchListItemsTotal > presentationModel.itemsPerPage)
			 	{
				 	// stop the default sort action
				 	e.preventDefault();
				 	
				 	// get the fieldname
				 	var fieldName:String = e.dataField;
				 	var sort:String = '';
	
				 	// loop through and highlight the sorted column
				 	for ( var i:int=0; i< grid.columns.length; i++)
				 	{
				 		if(e.columnIndex == i)
				 			grid.columns[i].setStyle('backgroundColor','#ededed');
				 		else
				 			grid.columns[i].setStyle('backgroundColor','none');
				 	}
				 	
				 	// run the sort action, desc first or toggle the existing
				 	sortOrder = sortActions[fieldName];
			 		var direction:String = ((sortOrder) ? ((sortOrder == 'DESC') ? 'ASC' : 'DESC') : 'ASC');
			 		sortActions[fieldName] = direction;
			 		sortOrder = presentationModel.table + '.' + fieldName + ' ' + direction;

					presentationModel.searchListCurrPage = 0;
					presentationModel.sortRecords( sortOrder );						
			 	}	
			}						
		]]>
	</mx:Script>
	
</mx:VBox>
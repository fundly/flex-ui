<?xml version="1.0" encoding="utf-8"?>
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml"
	styleName="agreementPage"
	show="init()"
	horizontalScrollPolicy="off">

	<mx:Metadata>
		[Event(name="isValidChanged", type="flash.events.Event")]
	</mx:Metadata>
	
	<mx:Binding source="presentationModel.resetInitials" destination="resetInitials" />
	
	<mx:Script>
		<![CDATA[
			import mx.managers.ToolTipManager;
			import mx.core.IToolTip;
			import com.enilsson.elephanttrakker.views.modules.pledge_workspace.model.PledgeWorkspaceModel;
			import caurina.transitions.Tweener;
			import mx.events.ValidationResultEvent;
			import mx.validators.RegExpValidator;
			import mx.controls.TextInput;
			import mx.controls.Label;
			import mx.utils.ObjectUtil;
			import org.osflash.thunderbolt.Logger;
			import mx.containers.HBox;
			import mx.controls.Text;
			
			[Bindable] public var presentationModel:PledgeWorkspaceModel;
			[Bindable] private var _userInitials:String;
			[Bindable] private var _ua:XML;
			[Bindable] private var _isValid:Boolean = false;
			
			private var _iBoxes:Array;
			private var _currBox:String = 'lightBox';
			private var _formValidate:Array;
			
			/**
			 * Public functions to announce that the tab is valid or not
			 */
			public function set isValid(value:Boolean):void
			{
				_isValid = value;
				presentationModel.agreementValid = value;
				presentationModel.workspaceValid = value;

				if(presentationModel.debug) Logger.info('Agreement Valid', _isValid);				
				dispatchEvent( new Event('isValidChanged') );
			}	
			
			/**
			 * Notify listening components validation has been changing
			 */	
			[Bindable(event="isValidChanged")]  
			public function get isValid():Boolean
			{
				return _isValid;
			}
			
			/**
			 * Setter to reset the agreement between form entries
			 */
			public function set resetInitials( value:Boolean ):void
			{
				if( !value ) return;
				
				isValid = false;
				buildAgreement( 'reset initials' );
				presentationModel.resetInitials = !value;
			}
			
			/**
			 * Initialisation routine on show.
			 */
			private function init():void
			{
	  			// scroll the page to the top...
	  			this.verticalScrollPosition = 0;
	  			
	  			// set the form focus to the first box
	  			if(_iBoxes.length > 0) _iBoxes[0].box.setFocus();
	  								
	  			// if the form has already been built do nothing
				if(numChildren > 0) return;
				
				// build the form
				buildAgreement( 'init' );
			}
			
			/**
			 * Routine to build the agreement from the incoming data
			 */
			private function buildAgreement( event:String ):void
			{
				if(presentationModel.debug) Logger.info( 'Build Agreement', event );
				
				// set the component variables
				_userInitials = presentationModel.session.fname.substr(0,1).toLowerCase() + presentationModel.session.lname.substr(0,1).toLowerCase();
				_ua = presentationModel.options.workspace_agreement;
				_iBoxes = new Array();
				_formValidate = new Array();
				
				// clear the component
				this.removeAllChildren();
				
				// create the first text box and add it
				var descText:Text = new Text();
				descText.text = _ua.description;
				descText.percentWidth = 100;
				descText.styleName = 'agreementText';
				addChild(descText);
				
				// loop through each of the statements and create the text / initials box
				for ( var i:String in _ua.statements.statement)
				{
					var item:String = _ua.statements.statement[i];
					
					var hbox:HBox = new HBox();
					_currBox = _currBox == 'lightBox' ? 'darkBox' : 'lightBox';
					hbox.styleName = _currBox;				
					hbox.percentWidth = 100;
					addChild(hbox);
					
					var statement:Text = new Text();
					statement.text = item;
					statement.styleName = 'agreementText';
					statement.percentWidth = 100;
					hbox.addChild(statement);
					
					var hbox2:HBox = new HBox();
					hbox2.styleName = 'initialsHBox';
					hbox.addChild(hbox2);
					
					var label:Label = new Label();
					label.styleName = 'initialsLabel';
					label.text = 'Please initial';
					hbox2.addChild(label);
					
					var tInput:TextInput = new TextInput();
					tInput.id = 'q' + i;
					tInput.maxChars = 2;
					tInput.width = 25;
					tInput.styleName = 'struktorInput';
					hbox2.addChild(tInput);
					
					_iBoxes.push({ 'id' : tInput.id, 'box' : tInput });
				}
				
				// create the confirmation text and initials box
				var hbox3:HBox = new HBox();
				_currBox = _currBox == 'lightBox' ? 'darkBox' : 'lightBox';
				hbox3.styleName = _currBox;				
				hbox3.percentWidth = 100;
				addChild(hbox3);
				
				var confirmation:Text = new Text();
				confirmation.text = String(_ua.confirmation).replace('{fullname}', presentationModel.session.fullname);
				confirmation.styleName = 'confirmationText';
				confirmation.percentWidth = 100
				hbox3.addChild(confirmation);
				
				var hbox4:HBox = new HBox();
				hbox4.styleName = 'initialsHBox';
				hbox3.addChild(hbox4);
				
				var label2:Label = new Label();
				label2.styleName = 'initialsLabel';
				label2.text = 'Please initial';
				hbox4.addChild(label2);
				
				var tInput2:TextInput = new TextInput();
				tInput2.id = 'q' + _iBoxes.length;
				tInput2.maxChars = 2;
				tInput2.width = 25;
				tInput2.styleName = 'struktorInput';
				hbox4.addChild(tInput2);
				
				// run a keystroke event to validate the last initials box so the tabbing works
				tInput2.addEventListener(KeyboardEvent.KEY_UP, validateFields);
				
				_iBoxes.push({ 'id' : tInput2.id, 'box' : tInput2 });
				
				// loop through the boxes and apply a validator
				for each ( var input:Object in _iBoxes)
				{
					var reValidator:RegExpValidator = new RegExpValidator();
					reValidator.property = 'text';
					reValidator.source = input.box;
					reValidator.required = true;
					reValidator.requiredFieldError = "This field is required";
					reValidator.expression = _userInitials;
					reValidator.noMatchError = 'Please enter your initials correctly (' + _userInitials + ')';
					reValidator.flags = 'i';
					
	                _formValidate.push({ 'validator':reValidator });
	                
	                input.box.addEventListener(FocusEvent.FOCUS_OUT, validateFields);
	                input.box.addEventListener(FocusEvent.FOCUS_IN, scrollPage);

	                if (presentationModel.resetInitials)
					{
	                	input.box.text = '';
	                	input.box.errorString = null
	                }
	                
		  			if(presentationModel.action == PledgeWorkspaceModel.EDIT)
		  			{
		  				input.box.text = _userInitials;
		  			 	isValid = true;		  			 
		  			}
		  			
		  			if(input.id == 'q0')
		  			{
						input.box.addEventListener(FocusEvent.KEY_FOCUS_CHANGE, function(evt:FocusEvent):void {
							if (evt.shiftKey && evt.keyCode == 9) 
							{
								presentationModel.vindex--;
								presentationModel.tabBackward = true;
								evt.preventDefault();
							}
						});
		  			}
	  			 }
	  			 
	  			 if(presentationModel.debug) Logger.info('Build Initials', presentationModel.action);
			}

			/**
			 * Run a validation routine on the fields
			 */
			private function validateFields(e:Event=null):void
			{
				var flag:Boolean = true;
				for(var i:String in _formValidate)
				{
					var vResult:ValidationResultEvent = _formValidate[i].validator.validate(null, true);

					if (vResult.type==ValidationResultEvent.INVALID) 
						flag = false;

					if(vResult.type == ValidationResultEvent.VALID)
						_formValidate[i].validator.source.errorString = null;
				}
				isValid = flag;
			}

			/**
			 * Scroll the page to the required spot
			 */
			private function scrollPage(e:Event=null):void
			{
				if(e.currentTarget.id == 'q0') return;
				
				Tweener.addTween(this, { 
					verticalScrollPosition: this.verticalScrollPosition + 75, 
					time: 0.4, 
					transition: 'linear' 
				});
			}
		]]>
	</mx:Script>
	
</mx:VBox>
<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas 
	xmlns:mx="http://www.adobe.com/2006/mxml"
	xmlns:visual="org.un.cava.birdeye.ravis.graphLayout.visual.*"
	xmlns:vgraphControls="org.un.cava.birdeye.ravis.components.ui.controls.vgraphControls.*" 
	xmlns:ns="com.enilsson.elephanttrakker.views.modules.my_downline.*"
	horizontalScrollPolicy="off" verticalScrollPolicy="off"
	>

	<mx:Metadata>
		[Event(name="fullScreen", type="flash.events.Event")]		
		[Event(name="exitFullScreen", type="flash.events.Event")]				
	</mx:Metadata>
	
	<mx:Script>
		<![CDATA[
			import mx.managers.PopUpManager;
			import org.un.cava.birdeye.ravis.graphLayout.visual.edgeRenderers.BaseEdgeRenderer;
			import org.un.cava.birdeye.ravis.graphLayout.visual.edgeRenderers.OrthogonalEdgeRenderer;
			import mx.events.ListEvent;
			import org.un.cava.birdeye.ravis.graphLayout.layout.HierarchicalLayouter;
			import com.enilsson.elephanttrakker.events.modules.my_downline.GetDownlineEvent;
			import com.enilsson.elephanttrakker.events.session.PingEvent;
			import com.enilsson.elephanttrakker.models.ETModelLocator;
			
			import org.un.cava.birdeye.ravis.graphLayout.layout.ConcentricRadialLayouter;

			import mx.utils.ObjectUtil;
			import org.osflash.thunderbolt.Logger;

			[Bindable] private var _model:ETModelLocator = ETModelLocator.getInstance();

			public function redraw():void
			{
				changeChartLayout();
			}

			/**
			 * Change the chart based on the drop down choice
			 */
			private function changeChartLayout():void 
			{
				_showParents = false;
				
				var startRoot:*;
				try {
					 startRoot = _model.my_downline.graph.nodeByStringId(_model.session.user_id.toString()).vnode;
				}
				catch( e: Error ) {
					if(_model.debug) { Logger.error( "Couldn't read root node: " + e.getStackTrace() ); }
				}
				
				if(!startRoot) return;
				
				switch(controlsPanel.chartType)
				{
					case 'concentricRadial' :
						var crLayouter:ConcentricRadialLayouter = new ConcentricRadialLayouter(downlineChart);
									
						downlineChart.layouter = crLayouter;
						downlineChart.edgeRenderer = new BaseEdgeRenderer(downlineChart.edgeDrawGraphics);
					break;
					case 'hierarchicalTree' :
						var htLayouter:HierarchicalLayouter= new HierarchicalLayouter(downlineChart);
						htLayouter.siblingSpreadDistance = 20;
						htLayouter.autoFitEnabled = true;
						
						downlineChart.layouter = htLayouter;	
						var oer:OrthogonalEdgeRenderer = new OrthogonalEdgeRenderer(downlineChart.edgeDrawGraphics);
						oer.arrowLength = 6;	
						downlineChart.edgeRenderer = oer; 
					break;
				}
				
				downlineChart.maxVisibleDistance = controlsPanel.degreesSeperation;
				downlineChart.currentRootVNode = startRoot;
				downlineChart.draw();			
			}			
			
			
			/**
			 * Get and show the downline parents of the user
			 */
			[Bindable] private var _showParents:Boolean = false;
			private function showParents():void
			{				
				if(toggleParents.label == 'show my parents')
				{			
					if(!_model.my_downline.parentGraphShow)
					{
						new GetDownlineEvent(
							GetDownlineEvent.EVENT_GET_PARENTS,
							_model.session.user_id,
							10
						).dispatch();
					}
					_showParents = true;
				}
				else
					_showParents = false;
			}
			
			private function buildParentsChart():void
			{
				var startRoot:* = _model.my_downline.parentGraph.nodeByStringId(_model.session.user_id.toString()).vnode;
				
				var htLayouter:HierarchicalLayouter= new HierarchicalLayouter(parentChart);
				htLayouter.siblingSpreadDistance = 20;
				htLayouter.autoFitEnabled = true;
				htLayouter.orientation = HierarchicalLayouter.ORIENT_BOTTOM_UP;
						
				parentChart.layouter = htLayouter;
				var oer:OrthogonalEdgeRenderer = new OrthogonalEdgeRenderer(parentChart.edgeDrawGraphics);
				oer.arrowLength = 6;	
				parentChart.edgeRenderer = oer; 
				
				parentChart.maxVisibleDistance = controlsPanel.degreesSeperation;
				parentChart.currentRootVNode = startRoot;
				parentChart.draw();				
			}
			
			private function showEmailPopup ():void
			{
				var sClass:Class = EmailMyDownline as Class;	 	
				var sp:* = PopUpManager.createPopUp( _model.mainScreen, sClass, true );
				PopUpManager.centerPopUp(sp);
			}
		]]>
	</mx:Script>
	
	<mx:Fade id="fadeIn" alphaTo="1" duration="400" />
	<mx:Fade id="fadeOut" alphaTo="0" duration="400" />
	
	<mx:Canvas id="downlineContainer"
		top="0" horizontalCenter="0"
		width="1000" height="{height}" 
		visible="{!_showParents}"
		showEffect="{fadeIn}" hideEffect="{fadeOut}"
		backgroundColor="#f0f0f0" 
		clipContent="true" 
		horizontalScrollPolicy="off" 
		verticalScrollPolicy="off">
		<visual:VisualGraph id="downlineChart"
			width="100%" height="100%" 
			top="17" horizontalCenter="0" 
			visible="{_model.my_downline.graphShow}" 
			show="changeChartLayout()"
			graph="{_model.my_downline.graph}"  
			visibilityLimitActive="true"   
			itemRenderer="com.enilsson.elephanttrakker.views.modules.my_downline.basicNodeRenderer" 	
			edgeLabelRenderer="com.enilsson.elephanttrakker.views.modules.my_downline.basicEdgeLabelRenderer" />
		<mx:Text text="Your downline is currently empty" 
			fontSize="15"
			top="150" horizontalCenter="0" 
			visible="{_model.my_downline.isEmpty}" 
			selectable="false" />
	</mx:Canvas>
	
	<mx:Canvas id="parentsContainer"
		top="0" horizontalCenter="0"
		width="1000" height="{height}" 
		visible="{_showParents}"
		showEffect="{fadeIn}" hideEffect="{fadeOut}"
		backgroundColor="#f0f0f0" 
		clipContent="true" 
		horizontalScrollPolicy="off" 
		verticalScrollPolicy="off">
		<visual:VisualGraph id="parentChart"
			width="100%" height="100%"
			top="17" horizontalCenter="0" 
			visible="{_model.my_downline.parentGraphShow}" 
			show="buildParentsChart()"
			graph="{_model.my_downline.parentGraph}"  
			visibilityLimitActive="true"  
			itemRenderer="com.enilsson.elephanttrakker.views.modules.my_downline.parentNodeRenderer" 	
			/>
		<mx:VBox top="30" horizontalCenter="-255" width="100" 
			borderColor="#333333" borderStyle="solid" backgroundColor="#FFFFFF"
			styleName="edgeLabel">
			<mx:Text width="100%" 
				text="This graph shows what downlines you belong to" selectable="false" />
		</mx:VBox>
	</mx:Canvas>	
	
	<ns:MyDownline_ChartControls 
		id="controlsPanel" styleName="controlsPanel"
		height="60" width="{this.width}" y="-43" 
		vgraph="{downlineChart}" 
		changeChartLayout="changeChartLayout()"
		 />

	<mx:Button id="toggleParents" 
		styleName="zoomLabel" 
		height="15"
		label="{downlineContainer.visible ? 'show my parents' : 'show my downline'}"
		bottom="2" left="5"
		click="showParents()" />	
		
	<mx:Button styleName="zoomLabel" 
		height="15"
		label="email my downline"
		bottom="2" left="120"
		click="showEmailPopup()" />		
	
	<mx:Button styleName="zoomLabel" 
		height="15"
		label="reset graph"
		bottom="2" right="5"
		click="changeChartLayout()" />
	
</mx:Canvas>
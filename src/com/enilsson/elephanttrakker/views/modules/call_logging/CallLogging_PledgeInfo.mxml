<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas 
	xmlns:mx="http://www.adobe.com/2006/mxml"
	xmlns:struktorForm="com.enilsson.utils.struktorForm.*"
	xmlns:ns="com.enilsson.elephanttrakker.views.modules.call_logging.*" 
	xmlns:controls="com.enilsson.controls.*"	
	show="init()" 
	width="100%" verticalScrollPolicy="off">	
	
	<mx:ViewStack id="addLabels" includeInLayout="false" visible="false">
		<mx:Canvas label="Credit Card" />
		<mx:Canvas label="Check" />
	</mx:ViewStack>
	
	<struktorForm:StruktorForm id="pledgeInfo" styleName="processingForm"
		width="50%" maxHeight="240" 
		left="0" top="5"
		layoutProvider="{_model.struktorLayout.pledges}"
		dataProvider="{_model.call_logging.initialPledgeData}"
		isValidChanged="this.isValid = true" 
		validateOnKeyPress="false" 
		formBuildComplete="formBuildCompleteAction(event)" 
		selectedGroups="{[2]}" 
		groupLabels="false" />
		
	<mx:VBox styleName="transactionsBox" 
		width="305" height="235" 
		top="0" right="10" 
		horizontalAlign="center" 
		horizontalScrollPolicy="off">
		
		<mx:ViewStack id="transactionVStack" 
			selectedIndex="{_model.call_logging.transVStack}"
			change="vstackChangeHandler(event)"
			width="100%" height="200">
			
			<mx:Canvas label="Credit Card"
				width="100%" height="200"
				showEffect="fadeIn" hideEffect="fadeOut"
				horizontalScrollPolicy="off">
				<mx:ViewStack id="ccBillingVStack"
					selectedIndex="{_model.call_logging.ccVStack}"
					width="330" height="200"
					top="0" horizontalCenter="-8">
					<struktorForm:StruktorForm id="ccForm" 
						styleName="processingForm" 
						showEffect="fadeIn" hideEffect="fadeOut"
						layoutProvider="{_model.struktorLayout.transactions}"
						dataProvider="{_model.call_logging.ccData}"
						isValidChanged="this.isValid = true" 
						debugMode="false"
						formBuildComplete="formBuildCompleteAction(event)"			
						selectedGroups="{[1]}" 
						groupLabels="false" />
					<mx:Canvas horizontalScrollPolicy="off"
						showEffect="fadeIn" hideEffect="fadeOut">
						<mx:Text fontSize="9" width="90%" horizontalCenter="20"
							text="Billing details for credit card if different from contact details" />
						<struktorForm:StruktorForm id="billingForm" 
							styleName="processingForm" 
							top="25"
							layoutProvider="{_model.struktorLayout.transactions}"
							dataProvider="{_model.call_logging.initialBillingDetails}"
							isValidChanged="this.isValid = true" 
							debugMode="false"
							selectedGroups="{[2]}" 
							groupLabels="false" />	
					</mx:Canvas>						

				</mx:ViewStack>
				
				<mx:HBox bottom="5" horizontalCenter="0" 
					horizontalGap="2"
					verticalAlign="middle">
					<mx:LinkButton height="15" fontSize="9"
						tabEnabled="false"
						click="_model.call_logging.ccVStack = _model.call_logging.ccVStack == 0 ? 1 : 0"
						label="{_model.call_logging.ccVStack == 0 ? 
							'add separate billing address' : 
							'back to credit card details'}" />
					<mx:VRule height="12"
						visible="{_model.call_logging.ccVStack == 1}"
						includeInLayout="{_model.call_logging.ccVStack == 1}" />
					<mx:LinkButton height="15" fontSize="9"
						visible="{_model.call_logging.ccVStack == 1}"
						includeInLayout="{_model.call_logging.ccVStack == 1}"
						label="clear billing address"
						tabEnabled="false"
						toolTip="Remove the billing address details and use the contact details for the transaction information"
						click="_model.call_logging.clearBillingAddress()" />											
				</mx:HBox>

			</mx:Canvas>
				
			<struktorForm:StruktorForm id="checkForm" 
				styleName="processingForm"
				label="Check" 
				selectedGroups="{[1]}" groupLabels="false"
				showEffect="fadeIn" hideEffect="fadeOut"			
				width="100%" height="200" maxHeight="200" 
				debugMode="false"
				layoutProvider="{_model.struktorLayout.checks}"
				dataProvider="{_model.call_logging.checkData}"
				isValidChanged="this.isValid = true" 
				formBuildComplete="formBuildCompleteAction(event)" />
				
			<ns:CallLogging_PaymentsList id="listOfPayments"
				label="List of Payments"
				showEffect="fadeIn" hideEffect="fadeOut" />
		
		</mx:ViewStack>
		
		<mx:LinkBar id="transactionLinkBar" 
			styleName="transactionLinkBar" 
			dataProvider="{addLabels}"
			visible="{_model.call_logging.formAction == 'add'}" 
			includeInLayout="{_model.call_logging.formAction == 'add'}"			 
			itemClick="transactionLinkBarClickHandler(event)" 
			tabEnabled="false" />
		
		<mx:LinkButton styleName="transactionLinkButton"
			label="List of Payments"
			visible="{_model.call_logging.formAction == 'edit'}" 
			includeInLayout="{_model.call_logging.formAction == 'edit'}"
			click="_model.call_logging.transVStack = 2"
			enabled="{_model.call_logging.transVStack != 2}"
			tabEnabled="false" />
	
	</mx:VBox>
	
	<controls:InfoBtn visible="{transactionVStack.selectedIndex == 2}" 
		right="20" top="210" 
		infoTipTitle="Please Note"
		text="Existing transactions can not be edited. Only one transaction (credit card or check) can be added per update. To add another transaction please update the pledge another time." />


	<mx:Fade id="fadeIn" alphaTo="1" duration="300" />
	<mx:Fade id="fadeOut" alphaTo="0" duration="300" />
	
	
	<!-- Send the pledge form variables back to the VO setter -->
	<mx:Binding source="pledgeInfo.formVariables" destination="_model.call_logging.pledgeData" />
	
	<!-- Send the credit card and check form variables back to the VO setter -->
	<mx:Binding source="ccForm.formVariables" destination="_model.call_logging.addPayment" />
	<mx:Binding source="checkForm.formVariables" destination="_model.call_logging.addPayment" />
	<mx:Binding source="billingForm.formVariables" destination="_model.call_logging.addBillingAddress" />
	
	<!-- Store credit card and check form variables so they can be used to populate the VO when needed -->
	<mx:Binding source="ccForm.formVariables" destination="_model.call_logging.creditCardForm" />
	<mx:Binding source="checkForm.formVariables" destination="_model.call_logging.checkForm" />

	<!-- List all the errors on each of the forms, so the popup can show what is wrong on the form -->
	<mx:Binding source="pledgeInfo.invalidFields" destination="_model.call_logging.pledgeErrors" />
	<mx:Binding source="ccForm.invalidFields" destination="_model.call_logging.ccErrors" />
	<mx:Binding source="checkForm.invalidFields" destination="_model.call_logging.checkErrors" />
	<mx:Binding source="billingForm.invalidFields" destination="_model.call_logging.billingErrors" />	
	

	<mx:Metadata>
		[Event(name="isValidChanged", type="flash.events.Event")]
	</mx:Metadata>
	
	<mx:Script>
		<![CDATA[
			import mx.containers.FormItem;
			import mx.events.IndexChangedEvent;
			import com.enilsson.utils.eNilssonUtils;
			import com.enilsson.elephanttrakker.events.session.PingEvent;
			import mx.events.ItemClickEvent;
			import mx.events.FlexEvent;
			import com.enilsson.controls.LookupInput;
			import mx.collections.ArrayCollection;
			import mx.binding.utils.BindingUtils;
			import com.enilsson.elephanttrakker.events.modules.call_logging.*;
			import com.enilsson.controls.AutoCompleteSearch;
			import mx.core.IToolTip;
			import mx.controls.ToolTip;
			import mx.managers.ToolTipManager;
			import mx.controls.DateField;
			import mx.controls.ComboBox;
			import mx.controls.TextInput;
			import mx.utils.ObjectUtil;
			import org.osflash.thunderbolt.Logger;
			import com.enilsson.elephanttrakker.models.ETModelLocator;
			import mx.effects.easing.Bounce;
			import com.enilsson.elephanttrakker.views.modules.call_logging.renderers.*;
			
			[Bindable] private var _model:ETModelLocator = ETModelLocator.getInstance();
			[Bindable] private var _ccInfo:Boolean = true;
			[Bindable] private var _isValid:Boolean = false;
			
			private var firstField:*;
			private var lastField:*;
		
			/**
			 * Bindable property to determine if this part of the form is valid
			 */
			public function set isValid(value:Boolean):void
			{
				// if the form has not been built yet, set the validation to false
				if(pledgeInfo.numChildren == 0 || !ccForm || !checkForm)
				{
					_model.call_logging.pledgeInfoValid = false;
					return;
				}
				
				// validate against the transaction requested
				switch(_model.call_logging.transVStack)
				{
					case 0 :
						if ( _model.call_logging.vo.billing != null )
							_isValid = pledgeInfo.isValid && ccForm.isValid && billingForm.isValid;
						else
							_isValid = pledgeInfo.isValid && ccForm.isValid;
					break;
					case 1 :
						_isValid = pledgeInfo.isValid && checkForm.isValid;
					break;
					case 2 :
						_isValid = pledgeInfo.isValid;
					break;
				}					 
				
				_model.call_logging.pledgeInfoValid = _isValid;
				_model.call_logging.workspaceValid = _isValid;
				
				dispatchEvent( new Event('isValidChanged') );
			}
			
			[Bindable(event="isValidChanged")]
			public function get isValid():Boolean
			{
				return _isValid;
			}

			/**
			 * Run some actions on show
			 */
			private function init():void
			{
				if(_model.debug) Logger.info('TransVStack', _model.call_logging.transVStack);
				
				// ping the server to make sure that all is well
				new PingEvent().dispatch();
	
				if(_model.call_logging.vindex >= _model.call_logging.prevVIndex) {
					if(firstField)
						firstField.setFocus();
				}
				else 
				{
					if(_model.call_logging.tabBackward)
					{
						lastField.setFocus();
						_model.call_logging.tabBackward = false;
					}
				}
				
				transactionLinkBar.selectedIndex = _model.call_logging.transVStack == 1 ? 1 : 0;
				
				// validate the form if this is an edit
				if(_model.call_logging.formAction == 'edit')
					if(_model.debug) Logger.info('Pledge Info - Init', pledgeInfo.isValid);
						isValid = true;				
			}


			/**
			 * List of actions to be done once the Struktor forms have completed building
			 */		
			private function formBuildCompleteAction(event:Event):void
			{
				if(_model.debug) Logger.info('Form Build Complete');
				
				var field:*;	
				
				switch(event.currentTarget)
				{
					case pledgeInfo :
										
						// assign some behaviour to the amount, so it prepopulates the cc & check forms
						var amnt:TextInput = pledgeInfo.getField('pledge_amount') as TextInput;
						amnt.addEventListener(FocusEvent.FOCUS_OUT, function(e:FocusEvent):void { 
							_model.call_logging.pledgeAmount = e.currentTarget.text;
						});						
						
						// grab the fid ac input and apply its parameters
						var fid:LookupInput = pledgeInfo.getField('tr_users_id') as LookupInput;
						fid.debugMode = _model.debug;
						fid.itemRenderer = new ClassFactory(FID_Item);
						// add the search lookup action and attach it to a data binding
						fid.addEventListener('searchStart', searchStartHandler);
						BindingUtils.bindProperty(fid, 'searchDataProvider', _model.call_logging, 'fidSearch');	
						// add the label search function and appropriate databindings
						fid.addEventListener('labelSearch', labelSearchHandler);
						fid.addEventListener('labelChanged', labelChangedHandler);	
						_model.call_logging.tr_usersLabel = fid.label;
						BindingUtils.bindProperty(fid, 'label', _model.call_logging, 'tr_usersLabel');
						_model.call_logging.tr_usersValue = fid.dataValue;
						BindingUtils.bindProperty(fid, 'dataValue', _model.call_logging, 'tr_usersValue');
						// if this an edit, this field needs to be locked
						fid.enabled = _model.call_logging.formAction != 'edit';						
						
						// check for the first field and an event listener so the user can move between tabs with the keyboard
						firstField = pledgeInfo.firstField;
						firstField.addEventListener(FocusEvent.KEY_FOCUS_CHANGE, function(evt:FocusEvent):void {
							if (evt.shiftKey && evt.keyCode == 9) 
							{
								_model.call_logging.vindex--;
								_model.call_logging.tabBackward = true;
								evt.preventDefault();
							}
						});
						// grab the source code ac input and apply its parameters
						var formField:LookupInput = pledgeInfo.getField('event_id') as LookupInput;
						formField.debugMode = _model.debug;
						formField.itemRenderer = new ClassFactory(SourceCode_Item);
						// add the search lookup action and attach it to a data binding
						formField.addEventListener('searchStart', searchStartHandler);	
						BindingUtils.bindProperty(formField, 'searchDataProvider', _model.call_logging, 'sourceCodeSearch');						
						// add the label search function and appropriate databindings
						formField.addEventListener('labelSearch', labelSearchHandler);	
						formField.addEventListener('labelChanged', labelChangedHandler);	
						_model.call_logging.eventsLabel = formField.label;
						BindingUtils.bindProperty(formField, 'label', _model.call_logging, 'eventsLabel');
						_model.call_logging.eventsValue = formField.dataValue;
						BindingUtils.bindProperty(formField, 'dataValue', _model.call_logging, 'eventsValue');
						// if this an edit, this field needs to be locked
						formField.enabled = _model.call_logging.formAction != 'edit';	
						
						var dateField:* = pledgeInfo.getField('pledge_date');
						dateField.enabled = _model.call_logging.formAction != 'edit';				
						
						// validate the form if this is an edit
						if(_model.call_logging.formAction == 'edit')
							if(_model.debug) Logger.info('Pledge Info - edit', pledgeInfo.isValid);
							isValid = true;
							
						// send the data to the binding
						_model.call_logging.pledgeData = pledgeInfo.formVariables;
					break;
					
					case ccForm :
						lastField = event.currentTarget.lastField;
						
 						lastField.addEventListener(FocusEvent.KEY_FOCUS_CHANGE, function(evt:FocusEvent):void {
							if (!evt.shiftKey && evt.keyCode == 9 && _model.call_logging.numTabs > 2) 
							{
								_model.call_logging.vindex++;
								evt.preventDefault();
							}
						});
 
						field = event.currentTarget.getField('amount') as TextInput;
 						BindingUtils.bindProperty(field, 'text', _model.call_logging, 'pledgeAmount');
					break;
					
					case checkForm :
						var focusfield2:ComboBox = event.currentTarget.getField('form_send') as ComboBox;
						
						focusfield2.addEventListener(FocusEvent.KEY_FOCUS_CHANGE, function(evt:FocusEvent):void {
							if (!evt.shiftKey && evt.keyCode == 9 && _model.call_logging.numTabs > 2) 
							{
								_model.call_logging.vindex++;
								evt.preventDefault();
							}
						});

						field = event.currentTarget.getField('amount') as TextInput;
 						BindingUtils.bindProperty(field, 'text', _model.call_logging, 'pledgeAmount');
					break;
				}
				
			}
			
			/**
			 * Handle the searches for the LookupInput fields
			 */
			private function searchStartHandler(event:Event):void
			{
				if(_model.debug) Logger.info ('search start', event.currentTarget.dataValue, event.currentTarget.label);
				
				var table:String = event.currentTarget.id == 'tr_users_id' ? 'tr_users_details' : 'events';
				
				new PledgeWorkspaceEvent ( 
					PledgeWorkspaceEvent.LOOKUP_INPUT_SEARCH,
				 	{ 
				 		'table' : table, 
				 		'searchTerm' : event.currentTarget.searchTerm, 
				 		'searchCount' : 200 
				 	} 
				).dispatch();
			}
			
			/**
			 * Handle any label searches that are needed for the LookupInputs
			 */
			private function labelSearchHandler(event:Event):void
			{
				if(_model.debug) Logger.info ('perform label search', event.currentTarget.dataValue, event.currentTarget.label);
				
				var table:String = event.currentTarget.id == 'tr_users_id' ? 'tr_users_details' : 'events';
				
				new PledgeWorkspaceEvent (
					PledgeWorkspaceEvent.GET_LABEL,
					{ 'table' : table, 'id' : event.currentTarget.dataValue } 
				).dispatch();
			}
			
			/**
			 * Run some processes after a new label has been entered
			 */
			private function labelChangedHandler(event:Event):void
			{
				this.isValid = true;	
			}
			
		
			/**
			 * Add some hot keys so the user can switch between cc & check via the keyboard
			 */
			private function keyHandler(event:KeyboardEvent):void
			{
				if(_model.call_logging.formAction == 'edit') return;
				
				if(event.shiftKey && event.keyCode == 49) 
				{
					var amount:TextInput =  ccForm.getField('amount') as TextInput;
					amount.setFocus();
					_model.call_logging.transVStack = 0;
					event.preventDefault();
					event.stopImmediatePropagation();
					addLabels.selectedIndex = 0;
					return;
				}
				
				if(event.shiftKey && event.keyCode == 50) 
				{
					var checkAmount:TextInput =  checkForm.getField('amount') as TextInput;
					checkAmount.setFocus();
					_model.call_logging.transVStack = 1;	
					event.preventDefault();
					event.stopImmediatePropagation();
					addLabels.selectedIndex = 1;
					return;
				}
				
				
			}
			
			/**
			 * Handle the clicks of the linkbar in the transaction form
			 */
			private function transactionLinkBarClickHandler(event:ItemClickEvent):void
			{
				if(_model.debug) Logger.info('Edit Click', event.label, event.index, _model.call_logging.formAction);
				
				switch(_model.call_logging.formAction)	
				{	
					case 'add' :	
						_model.call_logging.transVStack = event.index;
						
						if(_model.debug) Logger.info('Edit Click', _model.call_logging.transVStack);
						
						var cfield:*
						switch(event.index)	
						{
							case 0:
								cfield = ccForm.lastField;
							break;
							case 1:
								cfield = checkForm.lastField;
							break;
						}
	
						lastField = cfield;
					break;
					default :
					case 'edit' :
						_model.call_logging.transVStack = 2;
					break
				}
			}
			
			/**
			 * Handle the viewstack change and verify the forms
			 */
			private function vstackChangeHandler(event:IndexChangedEvent):void
			{
				isValid = true;
				
				switch(event.newIndex)
				{
					case 0 :
						_model.call_logging.addPayment = ccForm.formVariables;
					break;
					case 1 :
						_model.call_logging.addPayment = checkForm.formVariables;
					break;
					case 2 :
						_model.call_logging.vo.check = null;
						_model.call_logging.vo.transaction = null;
						_model.call_logging.vo.transactionData = null;
					break;
				}
			}
			
		]]>
	</mx:Script>
	
</mx:Canvas>
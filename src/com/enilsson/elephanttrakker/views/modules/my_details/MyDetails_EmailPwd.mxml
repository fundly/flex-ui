<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas 
	xmlns:mx="http://www.adobe.com/2006/mxml" 
	xmlns:common="com.enilsson.elephanttrakker.views.common.*" 
	xmlns:graphics="com.enilsson.graphics.*" 
	horizontalScrollPolicy="off"
	show="init()"
	creationComplete="init()" xmlns:effects="com.enilsson.elephanttrakker.views.common.effects.*">

	<mx:Text styleName="detailsTitle" text="CHANGE MY EMAIL ADDRESS" left="30" top="20" rotation="90" />	
	<mx:Form id="emailForm" left="30" top="20" paddingTop="0" width="270">
		<mx:FormItem label="New Email" required="true" styleName="labelStyleName">
			<mx:TextInput styleName="struktorInput" id="newEmail" />
		</mx:FormItem>
		<mx:FormItem label="Password" required="true" styleName="labelStyleName">
			<mx:TextInput styleName="struktorInput" id="emailPwd" displayAsPassword="true" />
		</mx:FormItem>
		<mx:Spacer height="5" />
		<mx:Text color="#333333" fontSize="11" width="100%">
			<mx:htmlText><![CDATA[Your password is needed as a confirmation when changing your email address.]]></mx:htmlText>
		</mx:Text> 		
	</mx:Form>
	
	<mx:Canvas styleName="pwdContainer" width="330" height="285" right="0" top="5">
		<mx:Text styleName="detailsTitle" text="CHANGE MY PASSWORD" left="25" top="20" rotation="90" />	
		<mx:Form id="pwdForm" left="22" top="20" paddingTop="0">
			<mx:FormItem label="Old Password" required="true" styleName="labelStyleName">
				<mx:TextInput styleName="struktorInput" id="oldPwd" displayAsPassword="true" text="{_model.my_details.oldPWD}" />
			</mx:FormItem>
			<mx:FormItem label="New Password" required="true" styleName="labelStyleName">
				<mx:TextInput id="newPwd"
					styleName="struktorInput" 
					displayAsPassword="true" 
					keyUp="currentState = newPwd.text != '' ? 'showPwdMeter' : '';" 
					text="{_model.my_details.newPWD}" />
			</mx:FormItem>	
			<mx:FormItem id="pwdMeter"
				label="Password Strength"
				styleName="labelStyleName" paddingTop="4" 
				color="#666666" backgroundColor="#e0e0e0"
				visible="false" includeInLayout="false" height="0">
				<graphics:PasswordMeter text="{newPwd.text}" verticalGap="2" 
					trackHeight="2" minLength="7" 
					fontSize="9" color="#666666" 
					width="160" />		
			</mx:FormItem>
			<mx:FormItem label="Confirm Password" required="true" styleName="labelStyleName">
				<mx:TextInput styleName="struktorInput" id="confirmNewPwd" displayAsPassword="true" text="{_model.my_details.newPWD}" />
			</mx:FormItem>		
			<mx:Spacer height="5" />
			<mx:Text color="#333333" fontSize="11" width="100%">
				<mx:htmlText><![CDATA[Passwords need to be at least <b>7</b> characters long, and a mixture of upper & lower-case letters and/or numbers. Passwords <b>ARE</b> case sensitive.]]></mx:htmlText>
			</mx:Text> 
		</mx:Form>		
	</mx:Canvas>

	<mx:HBox bottom="10" left="75" horizontalAlign="right">
		<common:ValidFormIndicator status="{emailValid}" />
		<mx:Button id="submitEmailChange" styleName="submitBtn" 
			useHandCursor="true" buttonMode="true" 
			enabled="{emailValid}" 
			click="changeEmail()"  
			label="Change My Email" />
	</mx:HBox>
	
	<mx:HBox bottom="10" right="14" horizontalAlign="right">
		<common:ValidFormIndicator status="{pwdValid}" />
		<mx:Button id="submitPwdChange" styleName="submitBtn" 
			useHandCursor="true" buttonMode="true" 
			enabled="{pwdValid}"
			click="changePassword()"  
			label="Change My Password" />
	</mx:HBox>
		

    <mx:transitions>
       <mx:Transition>
            <mx:Parallel targets="{[pwdMeter]}">
                <effects:BounceResize />
            </mx:Parallel>
        </mx:Transition>
    </mx:transitions>
    <mx:states>
        <mx:State name="showPwdMeter">
            <mx:SetProperty target="{pwdMeter}" name="includeInLayout" value="true" />  
            <mx:SetProperty target="{pwdMeter}" name="visible" value="true" />
            <mx:SetProperty target="{pwdMeter}" name="height" value="28" />
        </mx:State>    
    </mx:states>
    
	
	<mx:Script>
		<![CDATA[
			import org.osflash.thunderbolt.Logger;
			import com.adobe.cairngorm.control.CairngormEventDispatcher;
			import com.enilsson.elephanttrakker.events.modules.my_details.MyDetailsEvent;
			import mx.events.ValidationResultEvent;
			import com.enilsson.utils.eNilssonUtils;
			import com.enilsson.elephanttrakker.models.ETModelLocator;
			import mx.effects.easing.Bounce;
			
			[Bindable] private var _model:ETModelLocator = ETModelLocator.getInstance();
			[Bindable] private var emailValid:Boolean = false;
			[Bindable] private var pwdValid:Boolean = false;
			
			private var _fvEmail:Array = new Array();
			private var _fvPwd:Array = new Array();
			
			private function init():void
			{
				resetForm();
				
				// set the validators and listeners for the new email form
				eNilssonUtils.setFieldValidator('email', newEmail, _fvEmail);															
				eNilssonUtils.setFieldValidator('required', emailPwd, _fvEmail);
				newEmail.addEventListener(FocusEvent.FOCUS_OUT, validateEmailFields);
				emailPwd.addEventListener(FocusEvent.FOCUS_OUT, validateEmailFields);
				emailPwd.addEventListener(KeyboardEvent.KEY_UP, validateEmailFields);
				
				// set the validators and listeners for the new password form														
				eNilssonUtils.setFieldValidator('required', oldPwd, _fvPwd);
				eNilssonUtils.setFieldValidator('required', newPwd, _fvPwd, {minLength:7});
				eNilssonUtils.setFieldValidator('password_conf', confirmNewPwd, _fvPwd, { match : newPwd });
				oldPwd.addEventListener(FocusEvent.FOCUS_OUT, validatePwdFields);
				newPwd.addEventListener(FocusEvent.FOCUS_OUT, validatePwdFields);
				confirmNewPwd.addEventListener(KeyboardEvent.KEY_UP, validatePwdFields);
			}
			
			/**
			 * Run a validation routine on the fields
			 */
			private function validateEmailFields(e:Event=null):void
			{
				var flag:Boolean = true;
				for(var i:String in _fvEmail)
				{
					var vResult:ValidationResultEvent = _fvEmail[i].validator.validate(null, true);
					if (vResult.type==ValidationResultEvent.INVALID) 
						flag = false;
					if(vResult.type == ValidationResultEvent.VALID)
						_fvEmail[i].validator.source.errorString = null;
				}
				emailValid = flag;
			}			
			
			/**
			 * Run a validation routine on the fields
			 */
			private function validatePwdFields(e:Event=null):void
			{
				var flag:Boolean = true;
				for(var i:String in _fvPwd)
				{
					var vResult:ValidationResultEvent = _fvPwd[i].validator.validate(null, true);
					if (vResult.type==ValidationResultEvent.INVALID) 
						flag = false;
					if(vResult.type == ValidationResultEvent.VALID)
						_fvPwd[i].validator.source.errorString = null;
				}
				pwdValid = flag;
			}	
			
			
			private function matchPwds(e:KeyboardEvent):void
			{
				if ( newPwd.text != confirmNewPwd.text )
				{
					pwdValid = false;
					confirmNewPwd.errorString = 'Your new password does not match the confirmation';
				}
			}
			
			private function changeEmail():void
			{
				new MyDetailsEvent (
					MyDetailsEvent.MYDETAILS_CHANGE_EMAIL,
					{
						'email' : newEmail.text,
						'password' : emailPwd.text
					}
				).dispatch();
				
				CairngormEventDispatcher.getInstance().addEventListener(MyDetailsEvent.MYDETAILS_CHANGE_EMAIL, resetEmailForm);					
			}	
			
			private function resetEmailForm(e:Event = null):void
			{
				newEmail.text = "";
				newEmail.errorString = "";
				emailPwd.text = "";
				emailPwd.errorString = "";
				
				emailValid = false;
			}
			
			private function changePassword():void
			{
				_model.my_details.pwdUpdate = true;
				
				new MyDetailsEvent (
					MyDetailsEvent.MYDETAILS_CHANGE_PWD,
					{
						'new_password' : newPwd.text,
						'old_password' : oldPwd.text
					}
				).dispatch();
					
				CairngormEventDispatcher.getInstance().addEventListener(MyDetailsEvent.MYDETAILS_PASSWORD_CHANGED, resetForm);	
			}	
			
			public function resetForm(e:Event = null):void
			{
				if (_model.debug) Logger.info('Reset Pwd Form');
				
				_model.my_details.newPWD = "";
				_model.my_details.oldPWD = "";

				newPwd.text = "";
				newPwd.errorString = "";
				oldPwd.text = "";
				oldPwd.errorString = "";
				confirmNewPwd.text = "";
				confirmNewPwd.errorString = "";
				
				pwdValid = false;
				
				_fvEmail = new Array();
				_fvPwd = new Array();
				
				currentState = "";
				
				CairngormEventDispatcher.getInstance().removeEventListener(MyDetailsEvent.MYDETAILS_PASSWORD_CHANGED, resetForm);
			}
		]]>
	</mx:Script>
	
	<mx:Style>
		.pwdContainer {
			borderStyle:solid;
			borderColor:#e0e0e0;
			backgroundColor:#e0e0e0;
			cornerRadius:6;	
		}
	</mx:Style>
	
</mx:Canvas>
<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas 
	verticalScrollPolicy="off" horizontalScrollPolicy="off"
	show="init()"
	hide="hideAction()"
	xmlns:mx="http://www.adobe.com/2006/mxml" 
	xmlns:controls="com.enilsson.controls.*"
	xmlns:common="com.enilsson.elephanttrakker.views.common.*"
	xmlns:msg="com.enilsson.elephanttrakker.views.modules.message_center.*"
	>
	
	<mx:Script>
		<![CDATA[
			import mx.events.IndexChangedEvent;
			import mx.events.FlexEvent;
			import mx.controls.Alert;
			import com.enilsson.elephanttrakker.events.modules.message_center.MessageCenterEvent;
			import com.enilsson.elephanttrakker.events.session.PingEvent;
			import mx.utils.ObjectUtil;
			import org.osflash.thunderbolt.Logger;
			import com.enilsson.elephanttrakker.models.ETModelLocator;

			[Bindable] private var _model:ETModelLocator = ETModelLocator.getInstance();
			[Bindable] private var _runInit:Boolean = false		
			
			/**
			 * Initialisation trigger when the main view is shown for the first time
			 */
			public function set runInit(value:Boolean):void
			{				
				if(value && _model.mainViewState == ETModelLocator.MESSAGE_CENTER_VIEW)
					init();			
			}

			/**
			 * Initialisation routine
			 */
			private function init():void
			{
				if(_model.debug) Logger.info('Init Message Center');
				
				// ping the server to see all is well
				new PingEvent().dispatch();
				
				// assign a close handler to the error msg
				_model.message_center.onClose = onErrorClose;

				// inform the views to initialise
				_runInit = true;
			
				// get the received messages
				new MessageCenterEvent(MessageCenterEvent.MESSAGES_GET).dispatch();
				
				// get the sent messages
				new MessageCenterEvent(MessageCenterEvent.MESSAGES_GET_SENT).dispatch();				
			}	
			
			/**
			 * Action triggered when the view is hidden
			 */
			private function hideAction():void
			{
				Logger.info('Hide Message Center');
				
				_runInit = false;
			}	

			/**
			 * Run the fundraiser lookup search
			 */
			private function searchStart(table:String, query:String):void  
			{
				new MessageCenterEvent(
				 	MessageCenterEvent.SEARCH, { 
				 		'table' : table,
				 		'searchTerm' : query,
				 		'searchCount' : 200
				 	} 
				).dispatch();
			}	
			
			/**
			 * Handle the error message close action
			 */
			private function onErrorClose():void
			{
				_model.message_center.isSubmitting = false;
			}
			
			[Bindable] private var _showX:Number = 630;
			[Bindable] private var _hideX:Number = -630;			
			[Bindable] private var _IndexChange:IndexChangedEvent;
			private function showHandler(event:FlexEvent):void
			{				
				if(!_IndexChange) return;
				
				if(_IndexChange.newIndex == 0)
				{				
					_showX = 630;
					_hideX = -630;
				}				
				if(_IndexChange.newIndex == 2)
				{				
					_showX = -630;
					_hideX = 630;
				}
			}			
		]]>
	</mx:Script>
	
	<mx:Style source="/assets/skins/flex_skins.css" />
	<mx:Style>
		.msgTitle {
			color:#333333;
			fontSize:14;
			fontWeight:normal;	
		}
		.msgDate {
			color:#999999;
			fontSize:11;	
		}
		.msgDesc {
			color:#666666;
			fontSize:11;	
		}
		.selectorBar {
			cornerRadius:6;
			borderColor:#CCCCCC;
			borderStyle:solid;
			backgroundColor:#CCCCCC;
			verticalAlign:middle;
			horizontalAlign:center;
			paddingTop:5;
			paddingBottom:5;
		}
	</mx:Style>

	<mx:Fade id="fadeIn" alphaTo="1" duration="300" />
	<mx:Fade id="fadeOut" alphaTo="0" duration="300" />
	<mx:Move id="moveLeftShow" xFrom="{_showX}" xTo="0" duration="500" />
    <mx:Move id="moveRightHide" xFrom="0" xTo="{_hideX}" duration="500" /> 
	
	<mx:DefaultListEffect id="myListEffect" fadeOutDuration="500" fadeInDuration="500" />

	<mx:Image source="{_model.icons.messages}" top="0" right="-2" />
	<mx:Text id="contentTitle" 
		styleName="contentTitle" 
		text="MESSAGE CENTER" 
		right="-155" rotation="90" />
	
	<mx:Canvas styleName="tabBarBg" 
		width="634" height="35"
		top="0" left="0" />
	<mx:TabBar id="tbnav" styleName="qcmTab" 
		dataProvider="{vstack}" 
		tabHeight="35" fontSize="12"
		itemClick="_model.message_center.vindex = event.index;"
		useHandCursor="true" buttonMode="true" />
	
	<mx:ViewStack id="vstack" top="35"
		width="{this.width-36}" 
		height="{this.height - 35}"		
		change="_IndexChange = event"
		selectedIndex="{_model.message_center.vindex}">
		<msg:MessageCenter_Inbox id="inBox"
			label="Inbox"
			runInit="{_runInit}"
			hide="showHandler(event)"
			width="100%" height="100%" 
			showEffect="moveLeftShow" hideEffect="moveRightHide" />
		<msg:MessageCenter_SentBox id="sentBox"
			label="Sent Messages"
			runInit="{_runInit}"
			hide="showHandler(event)"
			width="100%" height="100%" 
			showEffect="moveLeftShow" hideEffect="moveRightHide" />
		<msg:MessageCenter_WriteMsg id="writeMsgRequest"
			label="Write/Request" 
			runInit="{_runInit}"
			hide="showHandler(event)"
			width="100%" height="100%" 
			searchStart="searchStart('tr_users_details', writeMsgRequest.searchTerm)"
			showEffect="moveLeftShow" hideEffect="moveRightHide" />
	</mx:ViewStack>

	<mx:Canvas id="formProcessingIndicator" 
		visible="{_model.message_center.isSubmitting}"
		top="0" left="0"
		width="100%" height="100%" 
		backgroundColor="#CCCCCC" backgroundAlpha="0.75"
		borderColor="#FFFFFF" borderStyle="solid" cornerRadius="6"
		showEffect="fadeIn" hideEffect="fadeOut" />
	<controls:ErrorMsgBox 
		verticalCenter="0" horizontalCenter="0" 
		params="{_model.message_center.errorVO}" 
		onClose="{_model.message_center.onClose}"
		/>
			
</mx:Canvas>
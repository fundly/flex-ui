<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml"
	xmlns="com.enilsson.elephanttrakker.views.modules.message_center.*">
	
	<mx:VDividedBox width="100%" height="100%">
		<mx:DataGrid id="inBoxList"
			width="100%" height="100%"
			dataProvider="{_model.message_center.messages}" 
			verticalGridLines="false"
			valueCommit="selectItem()" 
			itemClick="timerToRead()">
			<mx:columns>
				<mx:DataGridColumn headerText="From" dataField="from_name" />
				<mx:DataGridColumn headerText="Subject" dataField="title" sortCompareFunction="sort_alphaFunc" />
				<mx:DataGridColumn headerText="Received" dataField="created_on" labelFunction="date_labelFunc" width="150" />
				<mx:DataGridColumn headerText="Status" width="60" sortCompareFunction="index_statusFunc">
					<mx:itemRenderer>
						<mx:Component>
							<mx:HBox paddingLeft="5">
								<mx:Text 
									fontWeight="{data.viewed == 1 ? 'normal' : 'bold'}"
									text="{data.viewed == 1 ? 'Read' : 'Unread'}" />
							</mx:HBox>
						</mx:Component>
					</mx:itemRenderer>
				</mx:DataGridColumn>
				<mx:DataGridColumn headerText="Type" dataField="msgType" width="100" />
			</mx:columns>
		</mx:DataGrid>
		<mx:HBox width="100%" height="100%"
			visible="{inBoxList.dataProvider.length > 0}" 
			includeInLayout="{inBoxList.dataProvider.length > 0}">
			<mx:VBox id="msgBox" horizontalAlign="center"
				width="100%" height="100%" 
				verticalGap="4">
				<mx:Form id="msgFormDetails" styleName="msgForm" 
					width="100%" verticalGap="0" 
					paddingTop="0" paddingBottom="0">
					<mx:FormItem label="From:" labelStyleName="msgFormLabel" width="100%">
						<mx:Text text="{inBoxList.selectedItem.from_name}" />
					</mx:FormItem>
					<mx:FormItem label="Subject:" labelStyleName="msgFormLabel" width="100%">
						<mx:Text text="{inBoxList.selectedItem.title}" width="100%" />
					</mx:FormItem>
					<mx:FormItem label="Date:" labelStyleName="msgFormLabel" width="100%">
						<mx:Text text="{formatMsgDate(inBoxList.selectedItem.created_on)}" />
					</mx:FormItem>
				</mx:Form>
				<mx:HRule strokeWidth="1" strokeColor="#e0e0e0" width="94%" />
				<mx:Text htmlText="{inBoxList.selectedItem.description}" 
					paddingLeft="18" paddingRight="18"
					width="100%" 
					styleName="msgDesc" 
					fontSize="11" />
				<mx:Spacer height="100%" />
				<mx:HBox horizontalAlign="right" width="100%" height="24"
					visible="{inBoxList.selectedItem.msgType == 'Message'}" 
					includeInLayout="{inBoxList.selectedItem.msgType == 'Message'}">
					<mx:Button styleName="submitBtn" fontSize="11" 
						label="Set as {this._msgStatus}" 
						click="setAction( this._msgStatus )" 
						useHandCursor="true" buttonMode="true" 
						enabled="{!_model.dataLoading}" />
					<mx:Button styleName="submitBtn" fontSize="11" 
						label="Reply" 
						click="sendReply(inBoxList.selectedItem)" 
						useHandCursor="true" buttonMode="true" 
						enabled="{!_model.dataLoading}" />
					<mx:Button styleName="cancelBtn" fontSize="11"
						label="Delete" 
						click="deleteMessage()" 
						useHandCursor="true" buttonMode="true" 
						enabled="{!_model.dataLoading}" />
				</mx:HBox>
				<mx:HBox horizontalAlign="right" width="100%"
					visible="{inBoxList.selectedItem.msgType != 'Message'}" 
					includeInLayout="{inBoxList.selectedItem.msgType != 'Message'}">
					<mx:Button styleName="submitBtn" fontSize="11" 
						label="Accept" 
						click="acceptRequest(inBoxList.selectedItem)" 
						useHandCursor="true" buttonMode="true" 
						enabled="{!_model.dataLoading}" />
					<mx:Button styleName="cancelBtn" fontSize="11"
						label="Reject" 
						click="rejectRequest(inBoxList.selectedItem)" 
						useHandCursor="true" buttonMode="true" 
						enabled="{!_model.dataLoading}" />
				</mx:HBox>
			</mx:VBox>
		</mx:HBox>
	</mx:VDividedBox>

	<mx:DateFormatter id="df" formatString="EEEE, MMM. D, YYYY" />
	<mx:DateFormatter id="df2" formatString="EEEE, MMM. D, YYYY at L:NN A" />
	<mx:DefaultListEffect id="myListEffect" fadeOutDuration="500" fadeInDuration="500" />


	<mx:Script>
		<![CDATA[
			import org.osflash.thunderbolt.Logger;
			import mx.utils.ObjectUtil;
			import mx.utils.StringUtil;
			import com.enilsson.elephanttrakker.events.modules.message_center.MessageCenterEvent;
			import mx.controls.Alert;
			import mx.events.CloseEvent;
			import com.enilsson.elephanttrakker.models.ETModelLocator;
			
			[Bindable] private var _model:ETModelLocator = ETModelLocator.getInstance();
			[Bindable] private var _msgStatus:String;
			
			public function set runInit(value:Boolean):void { }

			/**
			 * Action to toggle a message as read or unread
			 */
            private function setAction(action:String):void 
            {
            	inBoxList.selectedItem.viewed = action == 'read' ? '1' : '0';
            	
            	new MessageCenterEvent(
            		MessageCenterEvent.MESSAGES_STATUS,
            		{
            			'id' : inBoxList.selectedItem.id,
            			'viewed' : inBoxList.selectedItem.viewed,
            			'data' : inBoxList.selectedItem
            		}
            	).dispatch();

				var selIndex:int = _model.message_center.messages.getItemIndex(inBoxList.selectedItem);
				_model.message_center.messages.getItemAt(selIndex).viewed = (action == 'read' ? '1' : '0');
				
				inBoxList.dataProvider.refresh();
				
           		this._msgStatus = inBoxList.selectedItem.viewed == 1 ? 'unread' : 'read';
           		
           		if(_model.debug) Logger.info('Timer to Read', this._msgStatus);
            }

			/**
			 * Confirm with the user before deleting a message
			 */
            private function deleteMessage():void 
            {
				var obj:Alert = Alert.show(
					'Are you sure you want to delete this item?', 
					'Delete message', 
					Alert.YES | Alert.NO,
					this,
					deleteEvent,
					null,
					Alert.NO
				);
				obj.width = 330; 
            }
            
            /**
            * Action to delete the message
            */
            private function doDelete():void 
            {
            	_model.message_center.requestResponse = null;
            	
            	new MessageCenterEvent(
            		MessageCenterEvent.MESSAGES_ACTION,
            		{
            			'id' : inBoxList.selectedItem.id, 
            			'action' : 'delete',
            			'data' : inBoxList.selectedItem,
            			'index':_model.message_center.messages.getItemIndex(inBoxList.selectedItem),
            			'array':'messages'
            		}
            	).dispatch();
			}

			/**
			 * Handler to run the delete event
			 */
			private function deleteEvent(eventObj:CloseEvent):void 
			{
				if (eventObj.detail==Alert.YES)
					doDelete();
			}  
			
			/**
			 * Send a reply to a fundraiser message
			 */
			private function sendReply(data:Object):void
			{
				_model.message_center.fid = data.from_id;
				_model.message_center.vindex = 2;
				_model.message_center.subject = 'RE: ' + data.title;
			}
			
			/**
			 * Send a message to reject the listed request
			 */
            private function rejectRequest(data:Object):void 
            {
            	var requestObj:Object = new Object();
            	requestObj['id'] = data.id;
            	requestObj['action'] = 'reject';
            	requestObj['data'] = data;
            	
            	_model.message_center.requestResponse = data;
            	_model.message_center.requestResponse['requestAction'] = 'reject';
            	
            	new MessageCenterEvent( MessageCenterEvent.MESSAGES_ACTION, requestObj ).dispatch();
            }

			/**
			 * Send a message to accept the listed request
			 */
            private function acceptRequest(data:Object):void 
            {
             	var requestObj:Object = new Object();
            	requestObj['tablename'] = data.action;
            	requestObj['action'] = 'accept';
            	requestObj['data'] = data;
            	
            	_model.message_center.requestResponse = data;
            	_model.message_center.requestResponse['requestAction'] = 'accept';
            	
            	new MessageCenterEvent( MessageCenterEvent.MESSAGES_ACTION, requestObj ).dispatch();
            }
            
            /**
            * If there is no selected index currently when the dataProvider is changed, select the first one
            */
            private function selectItem():void
            {
            	if(inBoxList.dataProvider)
            	{
            		if(inBoxList.selectedIndex == -1)
            		{
	            		inBoxList.selectedIndex = 0;
	            		timerToRead();
	            	}    
	            	else
	            		timerToRead();        	
	            }
            }
            
            /**
            * Run a timer to set the message as read after a short while
            */
            private var readTimer:Timer;
           	private function timerToRead():void
           	{
           		if ( !inBoxList.selectedItem ) return;
           		
           		this._msgStatus = inBoxList.selectedItem.viewed == 1 ? 'unread' : 'read';
           		
           		Logger.info('Timer to Read', this._msgStatus);
           		
           		if ( readTimer )
	           		if ( readTimer.running ) readTimer.stop();
           		
           		readTimer = new Timer(5000);
           		readTimer.addEventListener(TimerEvent.TIMER, readTimerHandler);
           		readTimer.start();
           	}
            
            /**
            * Handle the action once the timer event fires, do nothing if the message is already read
            */
            private function readTimerHandler(event:TimerEvent):void
            {
            	if ( !inBoxList.selectedItem ) return;
            	
            	if ( inBoxList.selectedItem.viewed == '1' ) 
            		readTimer.stop();
            	else
            	{
            		setAction('read');
            		readTimer.stop();
            	}
            }
            
            /**
            * Format the created date of the site message to a readable and time shifted string
            */
            private function formatMsgDate(timestamp:int):String	
            {
            	var formattedDate:Date = new Date( timestamp * 1000 )
            	
            	return df2.format( formattedDate );         	
            }

			/**
			 * Label function to show the date in the correct format
			 */
			private function date_labelFunc(item:Object, column:DataGridColumn):String 
			{
		  		return df.format( new Date( item[column.dataField] * 1000 ) );
			} 
			
			/**
			 * Case insensitive sort for text fields
			 */
			private function sort_alphaFunc(itemA:Object, itemB:Object):int 
			{
                return ObjectUtil.stringCompare(itemA.title, itemB.title, true);
            }

			/**
			 * Sort the status via the viewed field
			 */
			private function index_statusFunc(itemA:Object, itemB:Object):int 
			{
                return ObjectUtil.numericCompare(itemA.viewed, itemB.viewed);
            }


		]]>
	</mx:Script>


	<mx:Style>
		.msgForm {
			fontSize:10;
			color:#333333;				
		}
		.msgFormLabel {
			fontWeight:bold;
			color:#999999;	
		}
	</mx:Style>

	
</mx:Canvas>
<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas 
	xmlns:mx="http://www.adobe.com/2006/mxml"
	xmlns:en="com.enilsson.controls.*"
	xmlns:graphics="com.enilsson.graphics.*" 
	xmlns:common="com.enilsson.elephanttrakker.views.common.*"
	xmlns:ns="com.enilsson.elephanttrakker.views.modules.events.*"
	show="init()"
	verticalScrollPolicy="off" horizontalScrollPolicy="off">
	
	<mx:Script>
		<![CDATA[
			import com.enilsson.utils.EDateUtil;
			import mx.events.FlexEvent;
			import mx.controls.Alert;
			import mx.effects.easing.Exponential;
			import com.enilsson.utils.eNilssonUtils;
			import com.enilsson.elephanttrakker.events.modules.events.EventsEvent;
			import org.osflash.thunderbolt.Logger;
			import com.enilsson.elephanttrakker.events.session.PingEvent;
			import mx.events.DataGridEvent;
			import mx.events.ItemClickEvent;
			import com.enilsson.elephanttrakker.models.ETModelLocator;
			
			[Bindable] private var _model:ETModelLocator = ETModelLocator.getInstance();
			private var sortActions:Object = new Object();			
			private var lastSort:String = 'events.created_on DESC';
			private var searching:Boolean = false;
			
			public function set runInit(value:Boolean):void
			{
				if(value && _model.mainViewState == ETModelLocator.EVENTS_VIEW) {
					init();			
				}
			}

			private function init():void
			{
				if(_model.debug) Logger.info('Events Init');

				// ping the server to make sure that all is well
				new PingEvent().dispatch();
				
				new EventsEvent('get_events',{
					iFrom : 0, 
					iCount : _model.itemsPerPage, 
					paginate : 'P', 
					sort : lastSort
				}).dispatch();
				
				if (_model.events.showRSVPFormOnStart) 
				{
					_model.events.showRSVPForm = true;
					_model.events.showRSVPFormOnStart = false;
				}
			}
			
			/**
			 * Call a search event when the footer is clicked
			 */
			private function handleSearch():void
			{
				if(_model.debug) Logger.info('Start Search', dgFooter.searchTerm);
				
				new EventsEvent('search_events', {
					searchTerm : dgFooter.searchTerm, 
					iFrom : 0, 
					searchCount : _model.itemsPerPage
				}).dispatch();
				searching = true;
				
				dgFooter.reset();
			}
			
			/**
			 * Handle the data call events when teh pagination links are clicked
			 */
			private function newPageAction():void
			{
				if(_model.debug) 
				{					
					Logger.info(
						'Events - New Page', 
						dgFooter.selectedPage, 
						dgFooter.selectedPage * _model.itemsPerPage, 
						_model.itemsPerPage,
						searching
					);
				}
			
				if (searching) 
				{
					new EventsEvent('search_events', {
						searchTerm : dgFooter.searchTerm, 
						sort : lastSort, 
						iFrom : dgFooter.selectedPage * _model.itemsPerPage, 
						searchCount : _model.itemsPerPage
					}).dispatch();
				} 
				else 
				{
					new EventsEvent('get_events', {
						iFrom : dgFooter.selectedPage * _model.itemsPerPage, 
						iCount : _model.itemsPerPage, 
						paginate : '', 
						sort : lastSort
					}).dispatch();
				}
			}
			
			/**
			 * Handle the clear search action and reset the page
			 */
			private function clearSearchAction():void
			{
				if(_model.debug) Logger.info('Clear Search');
				
				new EventsEvent('get_events', {
					iFrom : 0, 
					iCount : _model.itemsPerPage, 
					paginate : 'P', 
					sort : lastSort
				}).dispatch();
				searching = false;				
			}
			
			/**
			 * Handle column header sorts, including if the data is from a search
			 */
			private function sortAction(e:DataGridEvent):void
			{
			 	if(_model.debug) Logger.info('SortAction', e.dataField);
			 	
			 	// stop the default sort action
			 	e.preventDefault();
			 	
			 	// get the fieldname
			 	var fieldName:String = e.dataField;
			 	var sort:String = '';
			 	
			 	// loop through and highlight the sorted column
			 	for ( var i:int=0; i<eventsDG.columns.length; i++)
			 	{
			 		if(e.columnIndex == i)
			 			eventsDG.columns[i].setStyle('backgroundColor','#ededed');
			 		else
			 			eventsDG.columns[i].setStyle('backgroundColor','none');
			 	}
			 	
			 	// run the sort action, desc first or toggle the existing
			 	if(sortActions[fieldName])
			 	{
			 		var direction:String = sortActions[fieldName] == 'ASC' ? 'DESC' : 'ASC';
			 		sortActions[fieldName] = direction;
			 		sort = 'events.' + fieldName + ' ' + direction;	
			 		lastSort = sort;		 		
			 		new EventsEvent('get_events',{
			 			iFrom : 0, 
			 			iCount : _model.itemsPerPage, 
			 			paginate:'P', 
			 			sort : sort
			 		}).dispatch();
			 	} 
			 	else 
			 	{
			 		sortActions[fieldName] = 'DESC';
			 		sort = 'events.' + fieldName + ' DESC';
			 		lastSort = sort;
			 		new EventsEvent('get_events',{
			 			iFrom : 0, 
			 			iCount : _model.itemsPerPage, 
			 			paginate : 'P', 
			 			sort : sort
			 		}).dispatch();
			 	}
			}
			
			private function date_labelFunc(item:Object, column:DataGridColumn):String 
			{
				if ( item[column.dataField] == 0 ) return '';
				
				// Convert UTC date to local date to display using dateformatter
				var displayDate:Date = EDateUtil.dateFromTimestamp(item[column.dataField]);
				return dateFormatter.format(displayDate);
			}
		]]>
	</mx:Script>
	
	<mx:Style>
		.editForm {
			borderStyle:"solid";
			borderThickness:5;
			borderColor:#f3f3f3;
			backgroundColor:#f3f3f3;
			cornerRadius:5;
			dropShadowEnabled: true;
		   	shadowDistance: 4;
		   	shadowDirection: center;
		}			
	</mx:Style>

	<mx:Move id="moveIn" xTo="15" easingFunction="{Exponential.easeIn}" />
	<mx:Move id="moveOut" xTo="-700" easingFunction="{Exponential.easeIn}" />	

	<mx:Image source="{_model.icons.events}" top="0" right="-4" />
	<mx:Text id="contentTitle" styleName="contentTitle" text="EVENTS" right="-67" top="40" rotation="90" />	

	<mx:DateFormatter id="dateFormatter" formatString="MMM D, YYYY" />

	<mx:DataGrid id="eventsDG" 
		dataProvider="{_model.events.events}" 
		width="633" height="{this.height - 36}" 
		top="0" selectable="true" 
		verticalGridLines="false" horizontalScrollPolicy="off" 
		headerRelease="sortAction(event)">
		<mx:columns>
            <mx:DataGridColumn textAlign="left" dataField="name" headerText="Name" width="250"  />
            <mx:DataGridColumn textAlign="left" dataField="source_code" headerText="Source Code"  />
            <mx:DataGridColumn textAlign="left" dataField="state" headerText="State"  />
            <mx:DataGridColumn textAlign="left" dataField="date_time" headerText="Date" labelFunction="date_labelFunc"  />
            <mx:DataGridColumn textAlign="left" headerText="Actions" width="50" 
            	itemRenderer="com.enilsson.elephanttrakker.views.modules.events.Events_Actions" />
        </mx:columns>
	</mx:DataGrid>
	
	<common:DataGridFooter id="dgFooter" 
		bottom="0" width="633"
		searchStart="handleSearch()" 
		changePage="newPageAction()" 
		clearSearch="clearSearchAction()"
		itemsPerPage="{_model.itemsPerPage}" 
		itemsTotal="{_model.events.numEvents}"
		/>
	
	<ns:Events_RSVPForm id="rsvpForm" styleName="editForm"
		width="600" height="280" 
		y="20" x="-700" 
		visible="{_model.events.showRSVPForm}"
		showEffect="moveIn" hideEffect="moveOut" />

	<ns:Events_Details id="eventDetails" styleName="editForm"
		width="600" height="280" 
		y="20" x="-700" 
		visible="{_model.events.showDetails}"
		showEffect="moveIn" hideEffect="moveOut" />
			
	<common:ErrorMsgBox id="errorBox" 
		verticalCenter="0" horizontalCenter="0" 
		params="{_model.events.errorVO}" 
		onClose="{_model.events.onClose}" />
			
</mx:Canvas>
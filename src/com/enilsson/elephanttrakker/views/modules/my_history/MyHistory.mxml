<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas 
	xmlns:mx="http://www.adobe.com/2006/mxml"
	show="init()"
	verticalScrollPolicy="off" horizontalScrollPolicy="off"
	xmlns:myhistory="com.enilsson.elephanttrakker.views.modules.my_history.*" 
	xmlns:common="com.enilsson.elephanttrakker.views.common.*">


	<mx:Image source="{_model.icons.myHistory}" top="0" right="-3" />
	<mx:Text id="contentTitle" styleName="contentTitle" text="MY HISTORY" right="-110" top="40" rotation="90" />	

	<mx:Canvas styleName="tabBarBg" 
		top="0" left="0" 
		width="634" height="35"
		horizontalScrollPolicy="off" verticalScrollPolicy="off"
		/>
	<mx:TabBar id="MyHistorySelector" styleName="qcmTab"
		top="0" left="0" tabHeight="35" verticalAlign="middle" fontSize="10"
		dataProvider="{historyVS}" itemClick="setVstackSlide(event)" /> 
	
	<mx:ViewStack id="historyVS"
		selectedIndex="{_model.my_history.vStackViewState}"
		width="634" height="292" 
		top="30" left="0">
		
		<myhistory:MyHistory_Progress_Report label="Progress Report"
			showEffect="moveLeftShow" hideEffect="moveRightHide" />			
		<myhistory:MyHistory_Pledges id="pledges" label="Pledges"
			showEffect="moveLeftShow" hideEffect="moveRightHide" />		
		<myhistory:MyHistory_Contribs id="contribs" label="Contributions" 
			showEffect="moveLeftShow" hideEffect="moveRightHide" />
		<myhistory:MyHistory_SavedCalls id="savedcalls" label="Saved Pledges" 
			showEffect="moveLeftShow" hideEffect="moveRightHide" />
		<myhistory:MyHistory_Export id="export" label="Export" 
			showEffect="moveLeftShow" hideEffect="moveRightHide" />
	</mx:ViewStack>

	<common:ErrorMsgBox id="callLoggingErrorBox"
		verticalCenter="0" horizontalCenter="0"
		params="{_model.my_history.errorVO}" />

	<mx:Move id="moveLeftShow" 
        xFrom="630" xTo="0" yTo="0"
        duration="500" />
    <mx:Move id="moveRightHide" 
        xFrom="0" xTo="-630" 
        duration="500" />  

	
	<mx:Script>
		<![CDATA[
			import mx.events.ItemClickEvent;
			import org.osflash.thunderbolt.Logger;
			import com.enilsson.elephanttrakker.events.session.PingEvent;
			import com.enilsson.elephanttrakker.models.ETModelLocator;
			
			[Bindable] private var _model:ETModelLocator = ETModelLocator.getInstance();
			private var currVS:int;
			
			public function set runInit(value:Boolean):void
			{
				if(value && _model.mainViewState == ETModelLocator.MY_HISTORY_VIEW)
					init();			
			}
			
			private function init():void
			{
				if(_model.debug) Logger.info('My History Init', _model.my_history.vStackViewState, historyVS.selectedIndex);

				// ping the server to see all is well
				new PingEvent().dispatch();	
				
				// adjust the index of the vStack if it has been set elsewhere
				if(_model.my_history.vStackViewState > 0)
					historyVS.selectedIndex = _model.my_history.vStackViewState;
					
				// if an update of the currently visible view stack child is necessary, run the child's init function so its
				// data gets updated.
//				if( _model.my_history.initQuickStats && historyVS.selectedChild == quickstats )
//					quickstats.init();
				else if( _model.my_history.initPledges && historyVS.selectedChild == pledges )
					pledges.init();
				else if(_model.my_history.initContributions && historyVS.selectedChild == contribs )
					contribs.init();
				else if(_model.my_history.initSavedCalls && historyVS.selectedChild == savedcalls )
					savedcalls.init();
				else if(_model.my_history.initExport && historyVS.selectedChild == export )
					export.init();
			}

			/**
			 * Adjust the move effects so it makes the VStack look like it moves from side to side
			 */
			private function setVstackSlide(e:ItemClickEvent):void
			{
				// ping the server to make sure that all is well
				new PingEvent().dispatch();

				if(e.index > currVS){
					moveLeftShow.xFrom = 630;
					moveLeftShow.xTo = 0;
					moveRightHide.xFrom = 0;
					moveRightHide.xTo = -630;	
				} else {
					moveLeftShow.xFrom = -630;
					moveLeftShow.xTo = 0;
					moveRightHide.xFrom = 0;
					moveRightHide.xTo = 630;	
				}
	
				currVS = historyVS.selectedIndex;			
			}
			 
		]]>
	</mx:Script>	

</mx:Canvas>
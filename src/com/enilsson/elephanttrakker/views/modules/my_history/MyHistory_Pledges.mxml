<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas 
	xmlns:mx="http://www.adobe.com/2006/mxml"
	xmlns:en="com.enilsson.controls.*"
	xmlns:graphics="com.enilsson.graphics.*" 
	xmlns:common="com.enilsson.elephanttrakker.views.common.*"
	show="init()">
	
	<mx:Script>
		<![CDATA[
			import com.enilsson.elephanttrakker.vo.SearchVO;
			import com.enilsson.utils.EDateUtil;
			import com.enilsson.elephanttrakker.events.modules.my_history.MyHistorySearchEvent;
			import org.osflash.thunderbolt.Logger;
			import com.enilsson.elephanttrakker.events.modules.my_history.MyHistoryGetPledgesEvent;
			import mx.events.DataGridEvent;
			import mx.events.ItemClickEvent;
			import mx.messaging.AbstractConsumer;
			import com.enilsson.elephanttrakker.models.ETModelLocator;
			
			[Bindable] private var _model:ETModelLocator = ETModelLocator.getInstance();
			[Bindable] private var _showFilter:Boolean = false;
			private var sortActions:Object = new Object();			
			private var lastSort:String = 'pledges.pledge_date DESC pledges.created_on DESC';
			private var _run:Boolean = false;
			private var isSearch:Boolean = false;
			
			public function init():void
			{
				if(_model.debug) Logger.info('myHistory Pledges Init', _model.my_history.initPledges);
				
				if(_model.session && _model.my_history.initPledges)
				{ 
					_model.my_history.initPledges = false;
					_showFilter = false;
					isSearch = false;
					
					// check to see there are any date filtering listed
					var where:Object;
					if(_model.my_history.startDate != null)
					{

						where = {
							'statement':'(1 AND 2 AND 3)',
							'1':{ 
								'what' : 'pledges.created_by_id',
								'val' : _model.session.user_id,
								'op' : '='
							},
							'2':{ 
								'what' : 'pledges.pledge_date',
								'val' : EDateUtil.localDateToTimestamp(_model.my_history.startDate),
								'op' : '>'
							},
							'3':{ 
								'what' : 'pledges.pledge_date',
								'val' : EDateUtil.localDateToTimestamp(_model.my_history.endDate),
								'op' : '<'
							}
						};
						
						filterDesc.htmlText = 'Showing pledges from <b>' + df2.format(_model.my_history.startDate) + '</b>';
						_showFilter = true;
					}
					
					new MyHistoryGetPledgesEvent(0, _model.itemsPerPage, 'PN', lastSort, where).dispatch();
				}
			}
			
			private function clearFilter():void
			{
				_model.my_history.startDate = null;
				_model.my_history.endDate = null;
				
				_showFilter = false;
				
				new MyHistoryGetPledgesEvent(0, _model.itemsPerPage, 'PN', lastSort).dispatch();
			}
			
			/**
			 * Run the search routine
			 */
			private function handleSearch():void
			{
				if(_model.debug) Logger.info('Start Search', dgFooter.searchTerm);
				
				_model.my_history.startDate = null;
				_model.my_history.endDate = null;
				_showFilter = false;
				
				isSearch = true;
				
				new MyHistorySearchEvent( 
					new SearchVO('pledges', dgFooter.searchTerm, null, 0, _model.itemsPerPage, null, true )
				).dispatch();
				dgFooter.reset();
			}

			/**
			 * Clear the searched data and return an unfiltered set
			 */
			private function clearSearchAction():void
			{
				if(_model.debug) Logger.info('Clear Search');
				
				isSearch = false;
				
				new MyHistoryGetPledgesEvent(0, _model.itemsPerPage, 'PN', lastSort).dispatch();				
			}
			
			/**
			 * Retrieve another page of data, eithered searched or not
			 */
			private function newPageAction():void
			{
				if(_model.debug) Logger.info('New Page', dgFooter.selectedPage);

				if(isSearch)
				{
					new MyHistorySearchEvent(
						new SearchVO( 'pledges', dgFooter.searchTerm, null, dgFooter.selectedPage * _model.itemsPerPage, _model.itemsPerPage, null, true ) 
					).dispatch();
				}
				else
				{
					new MyHistoryGetPledgesEvent(
						dgFooter.selectedPage * _model.itemsPerPage, 
						_model.itemsPerPage, 
						'', 
						lastSort
					).dispatch();
				}
			}
			
			/**
			 * Sort the data based on the column head clicks
			 */
			private function sortAction(e:DataGridEvent):void
			{
				if (_model.my_history.isSorting) {
					e.preventDefault();
					return;
				}

				_model.my_history.isSorting = true;
				
			 	if(_model.debug) Logger.info('SortAction', e.dataField);
			 	// stop the default sort action
			 	e.preventDefault();
			 	// get the fieldname
			 	var fieldName:String = e.dataField == 'fullName' ? 'lname' : e.dataField;
			 	var sort:String = '';
			 	// loop through and highlight the sorted column
			 	for ( var i:int=0; i<pledgesDG.columns.length; i++)
			 	{
			 		if(e.columnIndex == i)
			 			pledgesDG.columns[i].setStyle('backgroundColor','#ededed');
			 		else 
			 			pledgesDG.columns[i].setStyle('backgroundColor','none');
			 	}
			 	// run the sort action, desc first or toggle the existing
			 	if(sortActions[fieldName])
			 	{
			 		var direction:String = sortActions[fieldName] == 'ASC' ? 'DESC' : 'ASC';
			 		sortActions[fieldName] = direction;
			 		sort = 'pledges.' + fieldName + ' ' + direction;	
			 		lastSort = sort;		 		
			 		new MyHistoryGetPledgesEvent(0, _model.itemsPerPage, 'PN', sort).dispatch();
			 		dgFooter.reset();			 		
			 	} 
			 	else 
			 	{
			 		sortActions[fieldName] = 'DESC';
			 		sort = 'pledges.' + fieldName + ' DESC';
			 		lastSort = sort;
			 		new MyHistoryGetPledgesEvent(0, _model.itemsPerPage, 'PN', sort).dispatch();
			 		dgFooter.reset();
			 	}
			}
			
			/**
			 * Label function to show the dollars in the correct format
			 */
			private function money_labelFunc(item:Object, column:DataGridColumn):String {
		  		return currencyFormatter.format(item[column.dataField]);
			} 

			/**
			 * Label function to show the date in the correct format
			 */
			private function date_labelFunc(item:Object, column:DataGridColumn):String {
		  		return dateFormatter.format( EDateUtil.timestampToLocalDate( item[column.dataField] ) );
			} 

		]]>
	</mx:Script>

	<mx:CurrencyFormatter id="currencyFormatter" precision="2" currencySymbol="$" useNegativeSign="false" />
	<mx:DateFormatter id="dateFormatter" formatString="MM/DD/YY" />
	<mx:DateFormatter id="df2" formatString="MMMM YYYY" />
	
	<mx:VBox top="5" width="100%" height="100%" verticalGap="0">
		<mx:HBox visible="{_showFilter}" includeInLayout="{_showFilter}" 
			horizontalAlign="right" verticalAlign="middle"
			paddingBottom="6">
			<mx:Text id="filterDesc" fontSize="11" color="#333333" />
			<mx:Button label="Clear filter" 
				fontSize="9" color="#333333" 
				height="15" 
				useHandCursor="true" buttonMode="true" 
				click="clearFilter()" />
		</mx:HBox>
		<mx:DataGrid id="pledgesDG" 
			dataProvider="{_model.my_history.pledges}" 
			width="100%" height="100%" 
			selectable="true" 
			verticalGridLines="false" 
			horizontalScrollPolicy="off" 
			headerRelease="sortAction(event)">
			<mx:columns>
				<mx:DataGridColumn textAlign="left" headerText="" width="8" sortable="false" resizable="false"
		            itemRenderer="com.enilsson.common.components.PledgeRefundedDecorator" />
	            <mx:DataGridColumn textAlign="left" dataField="fullName" headerText="Name" fontWeight="bold"  />
	            <mx:DataGridColumn textAlign="left" dataField="pledge_date" headerText="Date" labelFunction="date_labelFunc" width="57" />            
	            <mx:DataGridColumn textAlign="left" dataField="city" showDataTips="true" 
	            	dataTipField="fullAddress" headerText="City" />
	            <mx:DataGridColumn textAlign="left" dataField="state" headerText="State" width="50" />
	            <mx:DataGridColumn textAlign="left" dataField="sourceCode" headerText="Event" width="50" />
	            <mx:DataGridColumn textAlign="right" dataField="pledge_amount" 
	            	headerText="Pledged" width="65" labelFunction="money_labelFunc"
	            	itemRenderer="com.enilsson.elephanttrakker.views.modules.my_history.MyHistory_PledgesAmount" />
	            <mx:DataGridColumn textAlign="right" dataField="contrib_total" 
	            	headerText="Contrib'd" width="65" labelFunction="money_labelFunc" />
	            <mx:DataGridColumn textAlign="left" headerText="Status" 
	            	itemRenderer="com.enilsson.elephanttrakker.views.modules.my_history.renderers.MyHistory_Unfulfilled" />	            	
	            <mx:DataGridColumn textAlign="left" headerText="Actions"
	            	itemRenderer="com.enilsson.elephanttrakker.views.modules.my_history.renderers.MyHistory_PledgesActions" />
	        </mx:columns>
		</mx:DataGrid>	
		<common:DataGridFooter id="dgFooter"
			searchStart="handleSearch()" 
			changePage="newPageAction()" 
			clearSearch="clearSearchAction()"
			itemsPerPage="{_model.itemsPerPage}" 
			itemsTotal="{_model.my_history.numPledges}" />
	</mx:VBox>

	
</mx:Canvas>
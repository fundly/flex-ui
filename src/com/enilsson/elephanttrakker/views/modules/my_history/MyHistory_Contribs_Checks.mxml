<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas 
	xmlns:mx="http://www.adobe.com/2006/mxml"
	xmlns:en="com.enilsson.controls.*"
	xmlns:graphics="com.enilsson.graphics.*" 
	xmlns:common="com.enilsson.elephanttrakker.views.common.*"
	show="init()">
	
	<mx:Script>
		<![CDATA[
			import com.enilsson.elephanttrakker.vo.SearchVO;
			import com.enilsson.utils.EDateUtil;
			import com.enilsson.elephanttrakker.events.modules.my_history.MyHistorySearchEvent;
			import org.osflash.thunderbolt.Logger;
			import com.enilsson.elephanttrakker.events.modules.my_history.MyHistoryGetContribsEvent;
			import mx.events.DataGridEvent;
			import mx.events.ItemClickEvent;
			import mx.messaging.AbstractConsumer;
			import com.enilsson.elephanttrakker.models.ETModelLocator;
			
			[Bindable] private var _model:ETModelLocator = ETModelLocator.getInstance();
			private var sortActions:Object = new Object();			
			private var lastSort:String = 'checks.created_on DESC';
			
			public function init() : void
			{
				if(_model.session)
					new MyHistoryGetContribsEvent('myhistory_get_check_contribs',0, _model.itemsPerPage, 'P', lastSort).dispatch();
			}
			
			private function handleSearch():void
			{
				if(_model.debug) Logger.info('Start Search', dgFooter.searchTerm);
				
				new MyHistorySearchEvent( 
					new SearchVO('checks', dgFooter.searchTerm ) ).dispatch();
				dgFooter.reset();
			}
			
			private function newPageAction():void
			{
				if(_model.debug) Logger.info('New Page', dgFooter.selectedPage);

				new MyHistoryGetContribsEvent('myhistory_get_check_contribs',
					dgFooter.selectedPage * _model.itemsPerPage, 
					_model.itemsPerPage, 
					'', 
					lastSort
				).dispatch();
			}
			
			private function clearSearchAction():void
			{
				if(_model.debug) Logger.info('Clear Search');
				
				new MyHistoryGetContribsEvent('myhistory_get_check_contribs',0, _model.itemsPerPage, 'P', lastSort).dispatch();				
			}
			
			private function sortAction(e:DataGridEvent):void
			{
				if (_model.my_history.isSorting) {
					e.preventDefault();
					return;
				}

				_model.my_history.isSorting = true;

			 	if(_model.debug) Logger.info('SortAction', e.dataField);
			 	// stop the default sort action
			 	e.preventDefault();
			 	// get the fieldname
			 	var fieldName:String = e.dataField.replace("_plain","");
			 	var sort:String = '';
			 	// loop through and highlight the sorted column
			 	for ( var i:int=0; i<pledgesDG.columns.length; i++)
			 	{
			 		if(e.columnIndex == i)
			 			pledgesDG.columns[i].setStyle('backgroundColor','#ededed');
			 		else
			 			pledgesDG.columns[i].setStyle('backgroundColor','none');		 		
			 	}
			 	// run the sort action, desc first or toggle the existing
			 	if(sortActions[fieldName])
			 	{
			 		var direction:String = sortActions[fieldName] == 'ASC' ? 'DESC' : 'ASC';
			 		sortActions[fieldName] = direction;
			 		sort = 'checks.' + fieldName + ' ' + direction;	
			 		lastSort = sort;		 		
			 		new MyHistoryGetContribsEvent('myhistory_get_check_contribs',0, _model.itemsPerPage, 'P', sort).dispatch();
			 		dgFooter.reset();			 		
			 	} 
			 	else 
			 	{
			 		sortActions[fieldName] = 'DESC';
			 		sort = 'checks.' + fieldName + ' DESC';
			 		lastSort = sort;
			 		new MyHistoryGetContribsEvent('myhistory_get_check_contribs',0, _model.itemsPerPage, 'P', sort).dispatch();
			 		dgFooter.reset();
			 	}
			}
			
			/**
			 * Label function to show the dollars in the correct format
			 */
			private function money_labelFunc(item:Object, column:DataGridColumn):String 
			{
		  		return currencyFormatter.format(item[column.dataField]);
			} 

			/**
			 * Label function to show the date in the correct format
			 */
			private function date_labelFunc(item:Object, column:DataGridColumn):String 
			{
		  		if(item[column.dataField] > 0)
			  		return dateFormatter.format( new Date( item[column.dataField] * 1000 ) );
			  	else
			  		return '';
			} 

			/**
			 * Label function to show the date in the correct format
			 */
			private function entry_date_labelFunc(item:Object, column:DataGridColumn):String 
			{
		  		if(item[column.dataField] > 0)
			  		return dateFormatter.format( EDateUtil.dateFromTimestamp(item.entry_date) );
			  	else
			  		return '';
			} 

		]]>
	</mx:Script>

	<mx:CurrencyFormatter id="currencyFormatter" precision="0" currencySymbol="$" useNegativeSign="false" />
	<mx:DateFormatter id="dateFormatter" formatString="MM/DD/YY" />
	
	<mx:DataGrid id="pledgesDG" dataProvider="{_model.my_history.checks}" 
		width="100%" height="{this.height - 41}" 
		top="5" selectable="true" verticalGridLines="false" horizontalScrollPolicy="off" 
		headerRelease="sortAction(event)">
		<mx:columns>
            <mx:DataGridColumn textAlign="left" dataField="full_name" headerText="Full Name" />
            <mx:DataGridColumn textAlign="left" dataField="amount" headerText="Amount" labelFunction="money_labelFunc" /> 
            <mx:DataGridColumn textAlign="left" dataField="check_num" headerText="Check Number" />           
            <mx:DataGridColumn textAlign="left" dataField="created_on" headerText="Created" labelFunction="date_labelFunc" /> 
            <mx:DataGridColumn textAlign="left" dataField="entry_date" headerText="Received" labelFunction="entry_date_labelFunc" /> 
            <mx:DataGridColumn textAlign="left" headerText="Status"
            	itemRenderer="com.enilsson.elephanttrakker.views.modules.my_history.renderers.MyHistory_CheckStatus" />
            <mx:DataGridColumn textAlign="left" headerText="Actions" width="50" 
            	itemRenderer="com.enilsson.elephanttrakker.views.modules.my_history.renderers.MyHistory_ContribsActions" />
        </mx:columns>
	</mx:DataGrid>
	
	<common:DataGridFooter id="dgFooter" 
		bottom="0" 
		searchStart="handleSearch()" 
		changePage="newPageAction()" 
		clearSearch="clearSearchAction()"
		itemsPerPage="{_model.itemsPerPage}"
		itemsTotal="{_model.my_history.numCheckContribs}"
		/>
	
</mx:Canvas>
<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas 
	xmlns:mx="http://www.adobe.com/2006/mxml"
	xmlns:overview="com.enilsson.elephanttrakker.views.modules.overview.*" 
	horizontalScrollPolicy="off" verticalScrollPolicy="off"
	>
	
	<mx:Script>
		<![CDATA[
			import mx.charts.chartClasses.IAxis;
			import mx.utils.ObjectUtil;
			import mx.managers.PopUpManager;
			import com.enilsson.elephanttrakker.utils.AppUtils;
			import org.osflash.thunderbolt.Logger;
			import mx.charts.chartClasses.CartesianDataCanvas;
			import mx.collections.ArrayCollection;
			import mx.charts.HitData;
			import mx.charts.events.ChartItemEvent;
			import com.enilsson.elephanttrakker.models.ETModelLocator;
		
			[Bindable] private var _model:ETModelLocator = ETModelLocator.getInstance();

			private var goalLine:CartesianDataCanvas = new CartesianDataCanvas();
			
			/**
			 * Action to handle a clicked chart item
			 */
			private function goToMyHistory(e:ChartItemEvent):void
			{
				// grab the chart data object from the clicked item
				var chartData:Object = e.hitData.chartItem.item;
				
				// set some Dates according the clicked month
				var startDate:Date = new Date();
				startDate.setUTCFullYear(chartData.year, chartData.month - 1, 1);
				var endDate:Date = new Date();
				endDate.setUTCFullYear(chartData.year, chartData.month, 1);				
				
				// set the my history model variables
				_model.my_history.vStackViewState = 1;   				
				_model.my_history.startDate = startDate; 
				_model.my_history.endDate = endDate;
				_model.mainViewState = ETModelLocator.MY_HISTORY_VIEW;
				_model.my_history.initPledges = true;					
			}
			
			/**
			 * Reset the chart data when the slider changes, but only if there is session data available
			 */
			private function sliderChangeHandler():void
			{
				if(_model.session && (_model.overview.chartData.length > 0))
					gateChartData(chartRange.values);
			}

			/**
			 * Limit the chart data according to what is set in the slider
			 */
			private function gateChartData(months:Array):void
			{
				var startMonth:Number = months[0];
				var endMonth:Number = months[1];
				var numMonths:Number = _model.overview.fundraising.length;
				var chartData:ArrayCollection = new ArrayCollection();
				for(var i:Number = 0; i<numMonths; i++){
					if(i > startMonth - 1 && i < endMonth + 1){
						chartData.addItem(_model.overview.fundraising[i]);						
					}
				}
				
				_model.overview.chartData = chartData;
				
				addGoalLine();
				
				_model.overview.startMonth = startMonth;
				_model.overview.endMonth = endMonth;
			}

			/**
			 * Add the goal line to the chart
			 */
			public function addGoalLine():void
			{
				if(_model.debug) Logger.info('ADD GOAL LINE');
				if ((!_model.session) || (myFundRaising.dataProvider.length <= 0))
					return;
				if(_model.debug) Logger.info('ADDDDDDDDDDDDD');
				
				// check to see if the fundraising data has been returned yet	
				if (!_model.overview.fundraising)  {
					this.callLater(addGoalLine);
					return;
				}

				if(_model.debug) Logger.info('Fundraising Goal', _model.session.data._fundraising_goal);
				
			    goalLine.buttonMode = true;
			    goalLine.useHandCursor = true;
			    goalLine.includeInRanges = true;
			    goalLine.toolTip = "My Fundraising Goal: " + cF.format(_model.session.data._fundraising_goal) + '\nClick to change';		        
			    goalLine.addEventListener(MouseEvent.CLICK, launchGoalLinePopUp);
			    goalLine.clear();
			    goalLine.lineStyle(
			    	3, 
			        0x870095,
			        1, 
			        true, 
			        LineScaleMode.NORMAL, 
			        CapsStyle.ROUND, 
			        JointStyle.MITER, 
			        2
			    );
			    
			    var start:String = myFundRaising.dataProvider[0].label;
			    var end:String = myFundRaising.dataProvider[myFundRaising.dataProvider.length -1].label;
			    
			    if(_model.debug) Logger.info('Set GoalLine', start, end, _model.session.data._fundraising_goal);	
			    
			    goalLine.moveTo(start, _model.session.data._fundraising_goal);
			    goalLine.lineTo(end, _model.session.data._fundraising_goal);
			    
			    myFundRaising.annotationElements = new Array(goalLine);
			}
			
			/**
			 * Build the datatips for the chart data
			 */
			private function chartDataTips(hitData:HitData):String
			{
				var seriesName:String = AreaSeries(hitData.element).displayName;
				var dt:String = '';
				
				dt += '<b><font face="Lucida Grande">' + seriesName + '</font></b><br>';
				dt += '<font face="Lucida Grande">Month</font><font face="Lucida Grande">: ' + hitData.item.label + '</font><br>';
				dt += '<font face="Lucida Grande">Donors</font><font face="Lucida Grande">: ' + hitData.item.Donors + '</font><br>';
				
				if(seriesName == 'Pledges')
					dt += '<font face="Lucida Grande">Pledged</font><font face="Lucida Grande">: $' + hitData.item.Pledge + '</font><br>';
				else
					dt += '<font face="Lucida Grande">Contributed</font><font face="Lucida Grande">: $' + hitData.item.Received + '</font><br>';
				
				dt += '<br><b><font face="Lucida Grande">Click graph for more</font></b>';
								
				return dt;	        	
			}
			
			/**
			 * Set the slider datatip
			 */
			private function chartRangeDataTip(sliderItem:Number):String
			{
				return _model.overview.fundraising[sliderItem].label;
			}	
			
			/**
			 * Click handler to launch the goalline popup
			 */
			private function launchGoalLinePopUp(e:MouseEvent):void
			{
			 	var pClass:Class = Overview_UpdateGoalLine as Class;
			 	
			 	var p:* = PopUpManager.createPopUp( _model.mainScreen, pClass, true );
	
			    p.addEventListener('updatedGoal', function(e:Object):void{
			    	addGoalLine();
			    });
			    
			    PopUpManager.centerPopUp(p);
			}			

			/**
			 * Format the linear axis labels
			 */
			private function linearAxis_labelFunc(item:Object, prevValue:Object, axis:IAxis):String 
			{
                if(_model.overview.chartData.length == 0)
                {
	                if( item > 1000 )
	                	return '$' + item.toString().substr(0, -3) + 'K';
	                else
	                    return cF.format(item);
                }
                else
                {                
	                var totalPledged:Number = _model.overview.chartData[_model.overview.chartData.length -1].cPledge;
	                
	                if(totalPledged > 10000)
		            { 
		                if( item > 1000 )
		                	return '$' + item.toString().substr(0, -3) + 'K';
		                else
		                    return cF.format(item);
		            }
		            else
		              return cF.format(item);
                }
            }

		]]>
	</mx:Script>	
	
	<mx:SeriesSlide id="slideIn" duration="600" direction="down"/>
	<mx:CurrencyFormatter id="cF" precision="0" currencySymbol="$" useNegativeSign="false" />

	<mx:ApplicationControlBar styleName="overviewAppBar" width="{this.width}" height="25"	>
		<mx:Text styleName="controlBarTitle" text="MY FUNDRAISING" />
	</mx:ApplicationControlBar>	
	<mx:Button id="chartMore"
		styleName="controlMore" 
		useHandCursor="true" buttonMode="true"
		click="_model.overview.viewState = 'chartShow'" 
		visible="{this.width &lt; 381}" />	

	<mx:AreaChart id="myFundRaising" 
		styleName="fundraisingChart"
		dataProvider="{_model.overview.chartData}"
		show="addGoalLine()" 
		visible="{_model.overview.chartData.length > 0}"
		height="{this.width > 380 ? this.height - 60 : this.height - 26}" 
		width="{this.width}" top="30"
        itemClick="goToMyHistory(event)"
        showDataTips="true" 
        dataTipFunction="chartDataTips">          
        <mx:horizontalAxis>
            <mx:CategoryAxis categoryField="label" />
        </mx:horizontalAxis>
		<mx:verticalAxis>
        	<mx:LinearAxis labelFunction="linearAxis_labelFunc" />
    	</mx:verticalAxis>        
        <mx:series>
            <mx:AreaSeries yField="cPledge" form="segment" displayName="Pledges" showDataEffect="slideIn">
            	<mx:areaFill>
            		<mx:LinearGradient angle="0">
            			<mx:GradientEntry color="#ffde47" ratio="0"  />
            			<mx:GradientEntry color="#ff3f00" ratio="1" />
            		</mx:LinearGradient>
            	</mx:areaFill>
            </mx:AreaSeries>
            <mx:AreaSeries yField="cReceived" form="segment" displayName="Donations" showDataEffect="slideIn">
            	<mx:areaFill>
            		<mx:LinearGradient angle="180">
            		    <mx:GradientEntry color="#77be30" ratio="0" />
            			<mx:GradientEntry color="#cef47d" ratio="1"  />
            		</mx:LinearGradient>
            	</mx:areaFill>
            </mx:AreaSeries>
        </mx:series>
    </mx:AreaChart>
    
    <mx:Legend id="chartLegend"
    	styleName="chartLegend"
    	bottom="65" right="30" 
    	visible="{this.width > 380}">
        <mx:LegendItem label="Pledges">
        	<mx:fill>
				<mx:LinearGradient angle="270">
					<mx:GradientEntry color="#ffde47" ratio="0" />
					<mx:GradientEntry color="#ff3f00" ratio="1"  />
				</mx:LinearGradient>
           	</mx:fill>
           	<mx:stroke>
            	<mx:Stroke color="0xCCCCCC" weight="1"/>
           	</mx:stroke>
        </mx:LegendItem>
        <mx:LegendItem label="Contributions">
        	<mx:fill>
				<mx:LinearGradient angle="90">
					<mx:GradientEntry color="#77be30" ratio="0" />
					<mx:GradientEntry color="#cef47d" ratio="1"  />
				</mx:LinearGradient>
           	</mx:fill>
           	<mx:stroke>
            	<mx:Stroke color="0xCCCCCC" weight="1"/>
           	</mx:stroke>
        </mx:LegendItem>
        <mx:LegendItem label="My Fundraising Goal">
           <mx:fill>
            <mx:SolidColor color="0x870095"/>
           </mx:fill>
           <mx:stroke>
            <mx:Stroke color="0xCCCCCC" weight="2"/>
           </mx:stroke>
         </mx:LegendItem>
	</mx:Legend>

	<mx:HSlider id="chartRange" 
		thumbCount="2" snapInterval="1" minimum="0"
		change="sliderChangeHandler()" 
		labels="{[_model.overview.firstLabel, _model.overview.lastLabel]}"
		values="{[_model.overview.startMonth, _model.overview.endMonth]}" 
		maximum="{_model.overview.fundraising.length -1}"
		width="25%" bottom="-20" left="10" 
		showTrackHighlight="true"
		dataTipFormatFunction="chartRangeDataTip" showDataTip="true" 
		labelStyleName="rangeLabelStyle" labelOffset="25"
		visible="{this.width > 380}" />
	<mx:Text text="Drag sliders to set month range" 
		styleName="sliderText" 
		visible="{chartRange.visible}" 
		bottom="8" left="{chartRange.x + chartRange.width + 10}" />
	
</mx:Canvas>
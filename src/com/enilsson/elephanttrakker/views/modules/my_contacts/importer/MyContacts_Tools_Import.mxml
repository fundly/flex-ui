<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas 
	xmlns:mx="http://www.adobe.com/2006/mxml"
	xmlns:common="com.enilsson.elephanttrakker.views.common.*"	
	width="600" height="280" 
	horizontalScrollPolicy="off" verticalScrollPolicy="off"
	show="init()" xmlns:controls="com.enilsson.controls.*">
	

	<mx:ViewStack id="dgStack" 
		width="100%" height="100%" 
		creationPolicy="all" 
		selectedIndex="{_model.my_contacts.stackIndex}"
		change="_model.my_contacts.popupTitle = event.currentTarget.selectedChild.label">
	
		<mx:HBox label="Upload Contacts"
			horizontalAlign="center" verticalAlign="middle" 
			width="100%" height="100%">
			<mx:Text text="Loading..." />
		</mx:HBox>			
		
		<mx:Canvas label="Upload Contacts: Step 1 - identify field names"
			width="100%" height="100%">
			<mx:CheckBox label="Does the first row of the uploaded file represent the field name of each column?"
				change="_model.my_contacts.headerFirst = event.currentTarget.selected"
				verticalCenter="-60" horizontalCenter="0" />
			<mx:Image source="@Embed(source='/assets/images/contactsupload_fieldnames.png')"
				horizontalCenter="0" verticalCenter="10" />
			<mx:Button label="Next" 
				styleName="submitBtn"
				bottom="10" right="20" 
				click="this.buildIT()" />
		</mx:Canvas>

		<mx:Canvas label="Upload Contacts: Step 2 - Review data" 
			verticalScrollPolicy="off">
			<mx:Canvas id="dgBox" 
				width="100%" height="180" 
				top="0" left="0">
				<mx:DataGrid id="dg"
					dataProvider="{_model.my_contacts.importData}"					
					height="{dgBox.height - 9}"
					rowHeight="20"
					draggableColumns="false"
					sortableColumns="false"
					resizableColumns="false" 
					wordWrap="false"
					rowCount="{_model.my_contacts.importData.length - 1}" />
			</mx:Canvas>
			<mx:Text top="185" left="10" 
				width="96%" fontSize="9"
				htmlText="Please review each column. If no match can be found for a field, please select the appropriate choice from the dropdowns.&lt;br&gt;You can also review each row and decide if you want it uploaded by using the checkbox on the left of the row." />
			<controls:Paginator bottom="0" left="10"
				styleName="paginator" 
				rangeCount="3" buttonHeight="18" 
				itemsPerPage="50" 
				itemsTotal="{_model.my_contacts.importTotal}"
				newPage="selectImportPageData( event.index )" />
			<mx:Button bottom="0" right="100" 
				label="Import Contacts" 
				styleName="submitBtn" 
				click="validateColumnHeaders()" />
			<mx:Button bottom="0" right="0"
				label="Cancel" 
				styleName="cancelBtn"
				click="cancelImport()" />
		</mx:Canvas>
		
		<mx:Canvas label="Upload Contacts: Step 3 - Success!"
			width="100%" height="100%">
			<mx:Text textAlign="center" fontSize="14"
				verticalCenter="0" horizontalCenter="0"
				htmlText="Contacts Imported Successfully! {_model.my_contacts.importMessage}" />
			<mx:Button label="Close" 
				styleName="submitBtn"
				bottom="10" right="20" 
				click="cancelImport()" />				
		</mx:Canvas>			
	</mx:ViewStack>
		
		
	<mx:Fade id="fadein" alphaFrom="0" alphaTo="100" />
	<mx:Fade id="fadeout" alphaFrom="100" alphaTo="0" />		
		
		
	<mx:Script>
		<![CDATA[
			import com.enilsson.elephantadmin.models.Icons;
			import mx.binding.utils.BindingUtils;
			import mx.events.CloseEvent;
			import mx.controls.Alert;
			import com.enilsson.vo.ErrorVO;
			import mx.controls.ComboBox;
			import mx.collections.ArrayCollection;
			import mx.controls.dataGridClasses.DataGridColumn;
			import mx.controls.DataGrid;
			import com.adobe.cairngorm.control.CairngormEventDispatcher;
			import com.enilsson.elephanttrakker.events.modules.my_contacts.ImportContactEvent;
			import org.osflash.thunderbolt.Logger;
			import mx.utils.ObjectUtil;
			import com.enilsson.elephanttrakker.models.ETModelLocator;
			
			[Bindable] private var _model:ETModelLocator = ETModelLocator.getInstance();
			
			/**
			 * Initialise the component
			 */		
			public function init():void 
			{
				_model.my_contacts.importIgnore = [];
				_model.my_contacts.importCurrPage = 0;
				
				new ImportContactEvent(
					ImportContactEvent.FETCH_CONTACTS,
					{ 'from' : 0, 'limit' : 50 }
				).dispatch();               
			 	CairngormEventDispatcher.getInstance().addEventListener(ImportContactEvent.CONTACTS_IMPORTED, showHeaderChoice);
			}
			
			/**
			 * Switch the viewstack once the upload is done
			 */
			public function showHeaderChoice ( e:ImportContactEvent ):void
			{
				CairngormEventDispatcher.getInstance().removeEventListener(ImportContactEvent.CONTACTS_IMPORTED, showHeaderChoice);
				_model.my_contacts.stackIndex = 1;
			}
			
			/**
			 * Build the data grid with the appropriate headers and item renderers
			 */
			public function buildIT( ):void 
			{				
				_model.my_contacts.stackIndex = 2;
				
				// clear the array of columnHeaderCombos
				_model.my_contacts.columnHeaderCombos = new Array();

				// check if they are including the headers in the first line
				if (_model.my_contacts.headerFirst) 
				{
					_model.my_contacts.firstRow = _model.my_contacts.importData.getItemAt(0);
					_model.my_contacts.importIgnore.push(_model.my_contacts.firstRow.id);
					_model.my_contacts.importData.removeItemAt(0);				
				}

				// initialise a list of columns				
                var cols:Array = new Array();

				// create the checkbox fields
				var dgc:DataGridColumn = new DataGridColumn('selected');
				dgc.itemRenderer = new ClassFactory(MyContacts_Tools_Import_CheckBox);
				//dgc.headerRenderer = new ClassFactory(MyContacts_Tools_Import_CheckBoxAll);
				dgc.headerText = '';
				dgc.width = 25;
                cols.push(dgc);		
				
				var range:Array = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z'];
								
				// create the columns
				for(var i:uint = 0;i<range.length;i++) 
				{				
					if (_model.my_contacts.importData.getItemAt(0)[range[i]] != undefined) 
					{
						dgc = new DataGridColumn(range[i]);
						dgc.headerText = range[i];
						dgc.headerRenderer = new ClassFactory(MyContacts_Tools_Import_Header);
						dgc.width = 130;
		                cols.push(dgc);
	    			}
				}
				
				// add the columns to the datagrid
                dg.columns = cols;
                
                // add the data to the grid
                dg.dataProvider = _model.my_contacts.importData;
			}
			
			/**
			 * Handle a pagination page change
			 */
			private function selectImportPageData ( page:int ):void
			{
				_model.my_contacts.importCurrPage = page;
				
				new ImportContactEvent(
					ImportContactEvent.FETCH_CONTACTS,
					{ 'from' : (page * 50), 'limit' : (page * 50 + 50) }
				).dispatch();               
			}
			
			/**
			 * Do a validation check on all the column header combos to see if the user has adjsuted them all
			 */
			private function validateColumnHeaders():void
			{
				var flag:Boolean = false;
				var headers:Object = {};
				var fields:Array = [];
				
				// check that all columns are at least checked
				for ( var i:String in _model.my_contacts.columnHeaderCombos )
				{
					var c:ComboBox = _model.my_contacts.columnHeaderCombos[i] as ComboBox;
					
					if( c.selectedIndex > -1 )
					{
						if( headers.hasOwnProperty(c.selectedItem.fieldname) )
							headers[c.selectedItem.fieldname] = headers[c.selectedItem.fieldname] + 1;
						else
							headers[c.selectedItem.fieldname] = 1;
						
						fields.push( c.selectedItem.fieldname );
					}
					
					if ( c.selectedIndex == -1 ) 
						flag = true; 
				}
 				if( flag )
				{
					_model.my_contacts.errorVO = new ErrorVO ( 
						'Please review all columns<br>- Either choose an appropriate field, or list as IGNORE.', 
						'errorBox', 
						true 
					);
					return;
				} 

				// check to see that there is at least fname and lname as columns
				if ( fields.indexOf('fname') == -1 || fields.indexOf('lname') == -1 )
				{
					_model.my_contacts.errorVO = new ErrorVO ( 
						'Your upload needs First Name and Last Name fields at a minimum! Please include these before attempting to upload again', 
						'errorBox', 
						true 
					);
					return;
				}

				// check to see if any columns are repeated
				for ( i in headers )
				{
					if ( headers[i] > 1 && i != 'undefined' )
					{
						_model.my_contacts.errorVO = new ErrorVO ( 
							'You can only include each field name once, please make sure there are no duplications', 
							'errorBox', 
							true 
						);
						return;
					}
				}				
				
				// ask the user one last time about their data
				alertReminder();
			}
			
			/**
			 * Show an alert reminder to check the data
			 */
			private function alertReminder():void
			{
				Alert.show( 
					'Have you checked that each record is correct? You can deselect them from the upload if they are not right.', 
					'Upload Reminder',
					( Alert.YES | Alert.NO ), 
					null,
					function ( e:CloseEvent ):void {
						if ( e.detail == Alert.YES ) importContacts();
					},
					Icons.ALERT
				);
			}			
			
			/**
			 * Import the listed contacts and field mappings
			 */
			private function importContacts( ):void 
			{												
				new ImportContactEvent(
					ImportContactEvent.IMPORT_CONTACTS,
					{ 'mappings' : _model.my_contacts.importFields, 'rows' : _model.my_contacts.importIgnore }
				).dispatch();
			}

			/**
			 * Cancel the import and delete the data in the csv table
			 */			
			public function cancelImport():void
			{
				parentDocument.vstack.selectedIndex = 0; 
				parentDocument.filePath.text = ''; 
				
				_model.my_contacts.popupTitle = 'My Contacts Tools';
				
				new ImportContactEvent(ImportContactEvent.DELETE_IMPORTED).dispatch(); 
			}
		]]>
	</mx:Script>		
		
</mx:Canvas>
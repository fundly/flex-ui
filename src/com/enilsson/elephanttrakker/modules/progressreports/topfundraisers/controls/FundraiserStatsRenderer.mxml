<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml"
	verticalScrollPolicy="off"
	xmlns:display="flash.display.*"
	filters="{[rendererShadow]}"
	fontWeight="bold">
	
	<mx:Canvas 
		left="{PADDING_LEFT + 75}"
		verticalCenter="0">
		
		<mx:Image 
			source="{icon}" 
			filters="{[iconBevel, glow]}" />
			 
		<mx:Label
			text="{position}" 
			left="9" top="4"
			fontSize="20" color="#FFFFFF"
			filters="{[fontBevel]}" />
			
	</mx:Canvas>
	
	<mx:Canvas
		top="10"
		horizontalCenter="0">
		
		<mx:Label
			horizontalCenter="0"  
			text="{line1}" 
			fontSize="14" filters="{[fontBevel,glow]}"  />
			
		<mx:Label
			top="20" horizontalCenter="0"
			text="{line2}"			  
			fontSize="12" 
			filters="{[fontBevel,glow]}" />	
			
	</mx:Canvas>	
		
	<mx:UIComponent id="highlight" />
		
	<mx:BevelFilter id="fontBevel" distance=".3" blurY="0" blurX="0" />	
	<mx:BevelFilter id="iconBevel" distance=".3" />
	<mx:GlowFilter id="glow" alpha=".3" color="0xFFFFFF" />	
	<mx:DropShadowFilter id="rendererShadow" alpha=".3" />
	
	<mx:Fade id="fadeIn" alphaFrom="0" alphaTo="1" duration="2000" />
	<mx:Fade id="fadeOut" alphaFrom="1" alphaTo="0" duration="2000" />
	
			
	<mx:CurrencyFormatter id="cf" /> 	

	<mx:Script>
		<![CDATA[
			import com.enilsson.elephanttrakker.modules.vo.FundraiserStatistics;
			import com.enilsson.elephanttrakker.modules.progressreports.topfundraisers.components.FundraiserStatsWrapper;
			import mx.controls.listClasses.BaseListData;
			import mx.controls.listClasses.IListItemRenderer;
			
			override public function set data( value : Object ) : void {
				super.data = value;
				
				var wrapper : FundraiserStatsWrapper = data as FundraiserStatsWrapper;
				
				if(wrapper && wrapper.data) {
					position = wrapper.position;
					icon = wrapper.icon;
					stats = wrapper.data as FundraiserStatistics;
				}
			}
			
			
			override protected function updateDisplayList(w:Number, h:Number):void {
				drawHighlight( w, h );
				drawBackground( w ,h );
				
				super.updateDisplayList(w, h);
			}
			
			
			private function drawBackground( w : Number, h : Number ) : void {
				var g : Graphics = graphics;
				
				var m : Matrix = new Matrix();
				m.createGradientBox( w, h, Math.PI/2 );
				
				g.clear();
				g.lineStyle(1, 0xA8A8A8 );
				g.beginGradientFill( GradientType.LINEAR, [0xC0C0C0, 0x5B5B5B], [1,1], [0, 255], m );
				g.drawRoundRect( PADDING_LEFT, PADDING_TOP, w - PADDING_LEFT - PADDING_RIGHT, h - PADDING_TOP - PADDING_BOTTOM, 20, 20 );
				g.endFill();
			}
			
			private function drawHighlight( w : Number, h : Number ) : void {
				var g : Graphics = highlight.graphics;
				
				highlight.setActualSize( w, h );
				
				g.clear();
				g.moveTo( PADDING_LEFT, PADDING_TOP );
				g.beginFill( 0xFFFFFF, .2 );				
				g.lineTo( PADDING_LEFT, PADDING_TOP + 10 );
				g.curveTo(w/2 - PADDING_LEFT - PADDING_RIGHT, h - PADDING_TOP - PADDING_BOTTOM, w - PADDING_RIGHT, PADDING_TOP + 10 );
				g.lineTo( w - PADDING_RIGHT, 0 );
				g.endFill();
				
			}
				
			[Bindable] protected var position 	: int;
			
			[Bindable] protected var line1		: String;
			[Bindable] protected var line2		: String;
			
			protected function set stats( val : FundraiserStatistics ) : void {
				_stats = val;
				
				if(_stats) {
					
					var inDownline : int = _stats.users_in_downline;
					
					line1 =	_stats.fullname + " (" + _stats.fid + ")";
					
					if( inDownline > 0 )
						line2 = inDownline + " Downline member" + (inDownline > 1 ? "s" : "");
					else
						line2 = cf.format( _stats.total_contributed ); 
						 
				}
			}			
			[Bindable] private var _stats : FundraiserStatistics;			
			
			
			private static const PADDING_LEFT 	: Number = 10;
			private static const PADDING_RIGHT 	: Number = 10;
			private static const PADDING_BOTTOM : Number = 3;
			private static const PADDING_TOP	: Number = 3;
			
		]]>
	</mx:Script>	
	
</mx:Canvas>

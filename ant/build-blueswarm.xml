<?xml version="1.0" encoding="UTF-8" standalone="yes"?>

<project name="build.blueswarm" default="compile">

	<import file="build-base.xml" />
	
	<property name="revision.file.template" value="${flex.src.dir}/revision.xml.template" />
	<property name="revision.filename" value="revision.xml"/>
	<property name="revision.file" value="${flex.src.dir}/${revision.filename}" />
	
	<property name="module.client" value="ET_cairngorm" />
	<property name="module.admin" value="ET_admin" />
	<property name="swf.client" value="${module.client}.swf" />
	<property name="swf.admin" value="${module.admin}.swf" />
	
	<property name="client.dir" value="${package.dir}" />
	<property name="admin.dir" value="${package.dir}/admin"/>
	<property name="client.build.dir" value="${build.dir}/client" />
	<property name="admin.build.dir" value="${build.dir}/admin" />
	
	<property name="framework.swz.url" value="${rsl.url}/${framework.file}" />
	<property name="framework.swf.url" value="${rsl.url}/${framework.fallback.file}" />
	<property name="rpc.swz.url" value="${rsl.url}/${rpc.file}" />
	<property name="rpc.swf.url" value="${rsl.url}/${rpc.fallback.file}" />
	<property name="crossdomain.file" value="" />
	
	<target name="init" depends="buildbase.init">
		<mkdir dir="${admin.dir}" />
		<mkdir dir="${client.dir}" />
		<mkdir dir="${admin.build.dir}" />
		<mkdir dir="${client.build.dir}" />
	</target>
	
	<!-- 
		compiles any module with mxmlc
		@param.mxml: the path to the mxmlc file to be compiled
		@param.swf: the path to the resulting swf file
	--> 
	<target name="compile.module">
		<mxmlc
			file="${param.mxml}"
			output="${param.swf}"
			incremental="true"
			locale="en_US"
			actionscript-file-encoding="UTF-8"
			keep-generated-actionscript="false"
			allow-source-path-overlap="true"
			optimize="true"
			static-rsls="false"
			debug="${swf.debug}">
		
			<source-path path-element="${flex.src.dir}" />
			<source-path path-element="${flex.framework.dir}" />
			<source-path path-element="${enilsson.lib}" />
						
			<library-path dir="${flex.framework.dir}" append="true">
				<include name="${flex.lib.dir}" />
				<include name="locale/{locale}" />
			</library-path>			
			<library-path dir="${basedir}" append="true">
				<include name="${flex.lib.dir}" />
			</library-path>
			<library-path dir="${enilsson.lib}" append="true">
				<include name="${flex.lib.dir}" />
			</library-path>
			
			<runtime-shared-library-path 
				path-element="${flex.sdk.home}/frameworks/libs/framework.swc">
				<url rsl-url="${framework.swz.url}"/>
				<url policy-file-url="${crossdomain.file}"/>
				<url rsl-url="${framework.swf.url}"/>
				<url policy-file-url="${crossdomain.file}"/>
			</runtime-shared-library-path>
			<runtime-shared-library-path 
				path-element="${flex.sdk.home}/frameworks/libs/rpc.swc">
				<url rsl-url="${rpc.swz.url}"/>
				<url policy-file-url="${crossdomain.file}"/>
				<url rsl-url="${rpc.swf.url}"/>
				<url policy-file-url="${crossdomain.file}"/>
			</runtime-shared-library-path>
			
			<fonts>
				<manager>flash.fonts.AFEFontManager</manager>
			</fonts>			
		</mxmlc>
		
	</target>
	
	<target name="compile.application">
		<mxmlc
			file="${param.mxml}"
			output="${param.swf}"
			incremental="true"
			locale="en_US"
			default-background-color="0x333333"
			actionscript-file-encoding="UTF-8"
			keep-generated-actionscript="false"
			allow-source-path-overlap="true"
			optimize="true"
			static-rsls="false"
			debug="${swf.debug}">
			
			<source-path path-element="${flex.src.dir}" />
			<source-path path-element="${flex.framework.dir}" />
			<source-path path-element="${enilsson.lib}" />
			<source-path path-element="${enilsson.lib}/locale/{locale}" />
						
			<library-path dir="${flex.framework.dir}" append="true">
				<include name="${flex.lib.dir}" />
				<include name="locale/{locale}" />
			</library-path>			
			<library-path dir="${basedir}" append="true">
				<include name="${flex.lib.dir}" />
			</library-path>
			<library-path dir="${enilsson.lib}" append="true">
				<include name="${flex.lib.dir}" />
			</library-path>
			
			<runtime-shared-library-path 
				path-element="${flex.sdk.home}/frameworks/libs/framework.swc">
				<url rsl-url="${framework.swz.url}"/>
				<url policy-file-url="${crossdomain.file}"/>
				<url rsl-url="${framework.swf.url}"/>
				<url policy-file-url="${crossdomain.file}"/>
			</runtime-shared-library-path>
			<runtime-shared-library-path 
				path-element="${flex.sdk.home}/frameworks/libs/rpc.swc">
				<url rsl-url="${rpc.swz.url}"/>
				<url policy-file-url="${crossdomain.file}"/>
				<url rsl-url="${rpc.swf.url}"/>
				<url policy-file-url="${crossdomain.file}"/>
			</runtime-shared-library-path>
			<fonts>
				<manager>flash.fonts.AFEFontManager</manager>
			</fonts>			
		</mxmlc>
	</target>
	
	<target name="check.client.uptodate">
		<condition property="client.uptodate">
			<filesmatch file1="${revision.file}" file2="${client.build.dir}/${revision.filename}" />
		</condition>
	</target>

	<target name="check.admin.uptodate">
		<condition property="admin.uptodate">
			<filesmatch file1="${revision.file}" file2="${admin.build.dir}/${revision.filename}" />
		</condition>
	</target>
	
	<!-- Compiles the client UI and saves it in the build directory -->
	<target name="compile.client" 
		depends="init, export.revision, check.client.uptodate" unless="client.uptodate">
		
		<antcall target="compile.application">
			<param name="param.mxml" value="${flex.src.dir}/${module.client}.mxml" />
			<param name="param.swf" value="${client.build.dir}/${swf.client}" />
		</antcall>
		
		<!-- copy the revision as a marker so that ANT knows when to rebuild -->
		<copy file="${revision.file}" todir="${client.build.dir}" overwrite="true" />
	</target>
	
	
	<!-- Compiles the administrator UI and saves it in the build directory -->
	<target name="compile.admin"
		depends="init, export.revision, check.admin.uptodate" unless="admin.uptodate">		
		
		<antcall target="compile.application">
			<param name="param.mxml" value="${flex.src.dir}/${module.admin}.mxml" />
			<param name="param.swf" value="${admin.build.dir}/${swf.admin}" />
		</antcall>
		
		<!-- copy the revision as a marker so that ANT knows when to rebuild -->
		<copy file="${revision.file}" todir="${admin.build.dir}" overwrite="true" />
	</target>
	
	
	<!-- Compiles both the client and administrator UIs -->
	<target name="compile" depends="compile.client, compile.admin" />
	
	<!--  Writes the current SVN revision number into an external xml file -->
	<target name="export.revision" description="Exports the revision number to an XML file, also places it into the html template.">
		<exec outputproperty="revision.number" executable="${svnversion}" dir="${flex.src.dir}" />
		<copy file="${revision.file.template}" tofile="${revision.file}" overwrite="true" />		
		<replace file="${revision.file}" token="#REVISION#" value="${revision.number}" />
	</target>
	
	<target name="copy.client.build.files" depends="init">
		<copy todir="${client.dir}" overwrite="true" verbose="false" failonerror="false">
			<fileset dir="${client.build.dir}" excludes="**/*.cache" />
		</copy>
	</target>
	
	<target name="copy.admin.build.files" depends="init">
		<copy todir="${admin.dir}" overwrite="true" verbose="false" failonerror="false">
			<fileset dir="${admin.build.dir}" excludes="**/*.cache" />
		</copy>
	</target>
	
	<!-- Copies both the admin and client to the deployment dir -->
	<target name="copy.build.files" depends="copy.client.build.files, copy.admin.build.files" />
	
	<!-- copies all application files to package dir and zips them -->
	<target name="package" depends="clean.package, copy.build.files">
		<property name="revision.folder" value="${package.dir}/${revision.number}" />
		<property name="zip.folder" value="${package.dir}/zip" />
		<mkdir dir="${zip.folder}" />
		
		<move todir="${zip.folder}">
			<fileset dir="${package.dir}" includes="**/*" excludes="zip" />
		</move>
		<mkdir dir="${revision.folder}" />
		<zip destfile="${revision.folder}/revision.zip" basedir="${zip.folder}" />
		<delete dir="${zip.folder}" />
		<copy todir="${revision.folder}" file="${revision.file}" />
	</target>
	
</project>
